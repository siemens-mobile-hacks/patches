;M65v50
;Большая Библиотека Функций
;Big Function Library
;(c) avkiev
;(p) Mifodiy
;Version: 61007
;PatchID: 5443
;Details: https://patches.kibab.com/patches/details.php5?id=5443
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=m65v50&f=Big_Function_Library.zip

/*
Версия патча записана в формате "ГММДД". Индицирует дату обновления патча.


В этом обновлении добавлено:
+ функции для работы эльфа TED

!Не забудте скачать функции: FREAD32,FWRITE32 (Прикрепил выше)

Эта новая библиотека нужна для Мастер-Патча v11 и далее.

Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
Требуется для многих патчей, написанных с использованием концепции "Мастер-Патч + Библиотека функций" (c) 1nvisible, avkiev

English:
Patch version is in "YMMDD" format. It indicates its update date.

For Master-Patch v11

It is auxiliary patch. It consists of 255 most useable function.
It is needed for many other patches, whitch are written using "Master-Patch+Functon Library" concept (c) 1nvisible, avkiev

*/
+0FD4000
#pragma enable old_equal_ff
;0000: 0x   ; 00: SWI0
;0004: 0x   ; 01: SWI1
;0008: 0x   ; 02: SWI2
;000C: 0x   ; 03: SWI3
;0010: 0x   ; 04: SWI4
0014: 0xA082BE21   ; 05: DecToHex
0018: 0xA1159FD0   ; 06: GetAkku
001C: 0xA13CFB71   ; 07: GetLP
0020: 0xA1225E6C   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1240938   ; 09: SwitchPhoneOff

0028: 0xA1216FE8   ; 0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)

;002C: 0xA1217028   ; 0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;0030: 0xA1217110   ; 0C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
002C: 0xA0FD9401   ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0030: 0xA0FD9451   ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);

0034: 0xA1216F3C   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA1216F6C   ; 0E: fflush
003C: 0xA1216F9C   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)
0040: 0xA1216DCC   ; 10: mkdir

;0044: 0xA0BB4107   ; 11: OpenReadCloseFile
0044: 0xA0FCF201   ; 11: OpenReadCloseFile

0048: 0xA1260A70   ; 12: GetFileAttrib
004C: 0xA126057C   ; 13: SetFileAttrib
0050: 0xA0820F98   ; 14: malloc(unsigned int size)
0054: 0xA0821000   ; 15: mfree(void *)
0058: 0xA153D2FD   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA153E585   ; 17: strcat(char *,const char *)
0060: 0xA153E5A5   ; 18: strchr(const char *,int)
0064: 0xA153E5C8   ; 19: strcmp(const char *,const char *)
0068: 0xA153E665   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA153E6E5   ; 1B: strlen(char *)
0070: 0xA0BF5735   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0BF56E9   ; 1D: wsInsertChar
0078: 0xA114DEE1   ; 1E: GetPITaddr
007C: 0xA163B09D   ; 1F: DrawMainScreen
0080: 0xA163DBB1   ; 20: DrawScreenSaver
0084: 0xA114E015   ; 21: GetImgHeight
0088: 0xA114E025   ; 22: GetImgWidth
008C: 0xA16341BD   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA11450D5   ; 24: DrawImage2
0094: 0xA1634197   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA1145015   ; 26: DrawImgBW
009C: 0xA1633B99   ; 27: AddIconToIconbar
00A0: 0xA1226ED4   ; 28: getEELiteMaxID
00A4: 0xA1215A6C   ; 29: getEEFullMaxID
00A8: 0xA1226D70   ; 2A: GetEELiteBlockAddress
00AC: 0xA1226E78   ; 2B: getEELiteBlockSizeVersion
00B0: 0xA12156B0   ; 2C: getEEFullBlockSizeVersion
00B4: 0xA1226F08   ; 2D: StartWriteEELiteBlock
00B8: 0xA1226F84   ; 2E: FinishWriteEELiteBlock
00BC: 0xA1226EE0   ; 2F: DeleteEELiteBlock

00C0: 0xA1226F40   ; 30: WriteEELiteBlock
00C4: 0xA153E82D   ; 31: strrchr
00C8: 0xA09505FC   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA09467E0   ; 33: PlaySound2
00D0: 0xA0935CF8   ; 34: PlaySoundLoop
00D4: 0xA0B6D4A7   ; 35: AlarmClockRing
00D8: 0xA0B0A8E9   ; 36: GetATCmdString
00DC: 0xA0B6F6CF   ; 37: OriginalATCGSN
00E0: 0xA0B0A285   ; 38: PostAtCommand
00E4: 0xA0B0B9A3   ; 39: SendATAnswerStr
00E8: 0xA0BB76E5   ; 3A: mfree_high
00EC: 0xA153DD01   ; 3B: MemChr
00F0: 0xA1217068   ; 3C: SetFileSize
00F4: 0xA0A2A105   ; 3D: editOrNewTXTModule
00F8: 0xA0B08D7D   ; 3E: LoadProcesses
00FC: 0xA1145D39   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA08E2143   ; 40: GetVibraStatus
0104: 0xA0B45EB7   ; 41: GetProvider
0108: 0xA163E2D1   ; 42: IsScreenSaver
010C: 0xA114D0A7   ; 43: IsUnlocked
0110: 0xA0B69779   ; 44: TempLigntOn
0114: 0xA0965710   ; 45: GetWavLen
0118: 0xA163D791   ; 46: HasNewSMS
011C: 0xA163C951   ; 47: HasFlashSMS
0120: 0xA0A2C19B   ; 48: ReadNewSMS
0124: 0xA16395A2   ; 49: ReadFlashSMS
0128: 0xA0948C58   ; 4A: PlayFile
012C: 0xA0C349A8   ; 4B: StartMidlet
0130: 0xA0B42471   ; 4C: GetMissedCallsCount
0134: 0xA0828294   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA113BCDB   ; 4E: ShowMsgInR1_3
013C: 0xA113BCEB   ; 4F: ShowMsgInR1_4

0140: 0xA113BD53   ; 50: ShowMsgInR1_7
0144: 0xA132D75D   ; 51: GetNetAccessMode
0148: 0xA1226518   ; 52: GetIlluminationDataTable
014C: 0xA153DD25   ; 53: memcmp
0150: 0xA082BE5D   ; 54: StrToInt
0154: 0xA08E2159   ; 55: SwitchVibraOnOff
0158: 0xA0FCF451   ; 56: PlayVibra
015C: 0xA08283A0   ; 57: IsCallAfterTimerStillRunning
0160: 0xA0836F4C   ; 58: ClearMemory
0164: 0xA153E1F0   ; 59: memcpy
0168: 0xA114C9D3   ; 5A: KeypressOn
016C: 0xA114CA91   ; 5B: KeypressOff
0170: 0xA09038D5   ; 5C: GetCPUClock()
0174: 0xA090390F   ; 5D: GetCPULoad()
0178: 0xA0824650   ; 5E: GetMMIMemUsed
017C: 0xA082100C   ; 5F: GetNonPermMemAvail

0180: 0xA08E22FF   ; 60: ShowMainMenu
0184: 0xA08E714B   ; 61: ShowNativeMenu
;0188:             ; 62: SetVibraStatus
018C: 0xa16379ab   ; 63: MS_Wallpaper_Flush
0190: 0xA113C635   ; 64: TriggerUpdate
0194: 0xA0B43B99   ; 65: EndCall
0198: 0xA0B148CF   ; 66: EndCallBusy
019C: 0xA16335E5   ; 67: IsDirectCallActive
01A0: 0xA16310B3   ; 68: GetScreenSaverRAM
01A4: 0xA082949C   ; 69: LockSched
01A8: 0xA0829524   ; 6A: UnlockSched
01AC: 0xA1216D20   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA1216D5C   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA1216CA8   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA130034F   ; 6E: IsCalling
01BC: 0xA163826F   ; 6F: RefreshGPRSTraffic

01C0: 0xA163828D   ; 70: GetGPRSTrafficPointer
01C4: 0xA1143A6B   ; 71: DrawFrame
01C8: 0xA0B3E62B   ; 72: SetCurrentSecondOfCall
01CC: 0xA1300B43   ; 73: GetTypeOfCall
01D0: 0xA08E2883   ; 74: GetFunctionPointer
01D4: 0xA114A30D   ; 75: StoreXYWHtoRECT
01D8: 0xA116647D   ; 76: SetWindowText
01DC: 0xA1163C5B   ; 77: set2color_byPaletteAdr
01E0: 0xA0B21BB7   ; 78: GetTimeFormat
01E4: 0xA11496E1   ; 79: PushWindowBuffer
01E8: 0xA1163CF1   ; 7A: ClearWindowBuffer
01EC: 0xA08CA621   ; 7B: GetProfileFilter
01F0: 0xA122E208   ; 7C: SetVibration(unsigned int power)
01F4: 0xA12FFD69   ; 7D: IsIncognitoCall
01F8: 0xA1309889   ; 7E: Rand
;01FC: 0x          ; 7F: IsPlayerOn
0200: 0xA0A861B1   ; 80: ShowCallList(int list, int zero)
0204: 0xA153E480   ; 81: HexToDec

;0208: 0x          ; 82: GetCurrentTrackFilename
020C: 0xA09393F0   ; 83: GetPathOfFoundFile
0210: 0xA1216E9C   ; 84: GetFileStats
0214: 0xA0825D79   ; 85: StrCmpNoCase
0218: 0xA12155D8   ; 86: ReadEEPROMData
021C: 0xA121571C   ; 87: WriteEEPROMData
;0220:             ; 88: GetAccessoryType
;0224:             ; 89: GetLangMesIntoWS
0228: 0xA1216C38   ; 8A: GetFreeFlexSpace
022C: 0xA12171FC   ; 8B: GetTotalFlexSpace
;
0230: 0xA092DAB8   ; 8C: RegExplorerExt(REGEXPLEXT const *)
;0234:             ; 8D: GetProfileName
0238: 0xA1216DFC  ; f142: int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA1216E34  ; f143: int rmdir(char *cDirectory, unsigned int *ErrorNumber);
0240: 0xA12170D8  ; f144: int truncate (int FileHandler, int length, int *errornumber);
0244: 0xA1216D9C  ; f145: int isdir(char *cDirectory, unsigned int *ErrorNumber);
0248: 0xA1216E9C  ; f146: int stat(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
024C: 0xA1240944   ; 93: RebootPhone 
;0250: 0x   ; 94: 
;0254: 0x   ; 95:

;0258: 0x   ; 96: 
;025C: 0x   ; 97: 
;0260: 0x   ; 98: 
;0264: 0x   ; 99: 
;0268: 0x   ; 9A: 
;026C: 0x   ; 9B: 
;0270: 0x   ; 9C: 
;0274: 0x   ; 9D: 
;0278: 0x   ; 9E: 
027C: 0xA1143937   ; 9F: DrawRect

0280: 0xA0BF4CAF   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0825E59   ; A1: wstrcpy
0288: 0xA0BF5233   ; A2: Unicode_GetCharByPosition
028C: 0xA1216488   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0BF54A7   ; A4: AllocWS_2(int len)
0294: 0xA0BF54E3   ; A5: FreeWS_2(WSHDR *wshdr)
;0298: 0x          ; A6: 
;029C: 0x          ; A7: 
;02A0: 0x          ; A8: 
;02A4: 0x          ; A9: 
02A8: 0xA0FCF001   ; f170: OpenWriteCloseFile
02AC: 0xFFFFFFFF   ; f171: SWI_AB
02B0: 0xA0FCF1B1   ; f172: DrawText
02B4: 0xA0FCF0A1   ; f173: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; f174: StrUni2Ansi
02BC: 0xA0FCF051   ; f175: Hex2Int
02C0: 0xA0FCF351   ; f176: DrawPicWithCanvas
02C4: 0xA0FCF371   ; f177: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; f178: GetBuildCanvas
02CC: 0xA0FCF301   ; f179: Seconds2iTime
;
;
02D0: 0xA0B20D3B   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF   ; B5: GetWeek(TDate*)
02D8: 0xA08C9FE5   ; B6: GetProfile()
02DC: 0xA08C9EB3   ; B7: SetProfile(char)
02E0: 0xA153E364   ; B8: dwMODdw
02E4: 0xA114D327   ; f185: KbdUnlock

02E8: 0xA153E34C   ; B8: __arm void *memset(void *s, int c, int n);
02EC: 0xA082100C   ; B9: __arm void *realloc(void *ptr, int size);
02F0: 0xA0837018   ; BA: __arm int divide(int divisor, int dividend);
02F4: 0xA153E438   ; BB: __arm int divide(int divisor, int dividend);

;02F8: 0xA0FC0C81  ; BE: RunScaner (MPv11)
02F8: 0xA0FC0C91   ; BE: RunScaner (MPv14)
02FC: 0xA0FC3001   ; BF: SpellTime
0300: 0xA0FC7601   ; C0: MiniGPS
0304: 0xA0FC0C51   ; C1: RunDispatcher
0308: 0xA0FC12A1   ; C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; C3: ProcessFiles
0310: 0xA0FC0C01   ; C4: GetBuffer
;0314: 0x          ; C5: PIT_Manager_Core
;0318: 0x          ; C6: 
;031C: 0x          ; C7: CallLibFunByNumber
;
0320: 0xA866EAFC   ; C8: RamCap
0324: 0xA866EAFE   ; C9: RamLS
0328: 0xA867B0A0   ; CA: RamNet
032C: 0xA867B0A6   ; f203: RamNetRX
0330: 0xA83FF460   ; CC: RamMissedCalls
0334: 0xA83FF454   ; CD: RamMissedSMS
0338: 0xA863E780   ; CE: RamDateTime
033C: 0xA868652C   ; CF: RamAlarm

0340: 0xA86B414C   ; D0: RamAccPoint
0344: 0xA863A518   ; D1: RamScreensaver
0348: 0xA863E7A8   ; D2: RamAutoTime
034C: 0xA863A518   ; D3: RamStby
0350: 0xA83FF444   ; D4: RamMissedMes
0354: 0xA8655EE0   ; D5: RamIsLocked
0358: 0xA863D124   ; D6: RamNetOnline
035C: 0xA8690A7A   ; D7: RamScreenBrightness
0360: 0xA863E52D   ; D8: RamMenuAnywhere
0364: 0xA8677D1C   ; D9: RamShutdownMode
0368: 0xA86B41BC   ; DA: RamIsShutdown
036C: 0xA863A544   ; DB: RamMainscreenAccuIcon
;
0370: 0xA8716724   ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
;0378: 0x   ; DE: RamIsSimPresent
037C: 0xA8655DF0   ; DF: RamPressedKey

0380: 0xA864A838  ; E0: RamScreenBuffer
;0384: 0x   ; E1: 
;0388: 0x   ; E2: 
038C: 0xA867C278   ; E3: RamProfileNum
0390: 0xA8402000   ; E4: FreeRAM
0394: 0x00001297   ; E5: LP_MonthsShort
0398: 0x000004A0   ; E6: Pic_Big0
039C: 0x00000427   ; E7: Pic_Little0
03A0: 0x000004AE   ; E8: Pic_Extra
03A4: 0x000004FC   ; E9: Pic_Profiles
03A8: 0x000002E6   ; EA: Pic_Vibra
03AC: 0x00000512   ; EB: Pic_Call
03B0: 0x00000503   ; EC: Pic_AdvNet
03B4: 0x0000118C   ; ED: LP_MonthsLong
03B8: 0x00000400   ; EE: LP_Weekdays
03BC: 0x00000526   ; EF: Pic_Calendar

03C0: 0x00000514   ; F0: Pic_AccuGraph
03C4: 0xA163AE8D   ; F1: BuildCanvas
;03C8:             ; F2: lpRAM_PIT
;03CC:             ; F3: RAM_PIT_Cap
;03D0:             ; F4: 
;03D4:             ; F5: 
;03D8:             ; F6: 
;03DC:             ; F7: 
03E0: 0xA0FD0050   ; F8: Additional_PIT_address
03E4: 0x000004FC   ; F9: Additional_PIT_start
03E8: 0x0000055F   ; FA: Additional_PIT_end
;03EC:             ; FB: 
03F0: 0xA0FC0A00   ; FC: PictureRelocationTable
03F4: 0x0000F000   ; FD: PictureRelocationBase
03F8: 0x00001E1E   ; FE: NextPictureMagic
;03FC:             ; FF: 
;-------------------------
0400: 0xA0827B04   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826AA0   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0   ; 102: GBS_AcceptMessage(void);
040C: 0xA0826EC8   ; 103: GBS_ClearMessage(void);
0410: 0xA0827098   ; 104: GBS_PendMessage(GBS_MSG *);
0414: 0xA0827F74   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA86389AC   ; 106: CSM_root()
041C: 0xA1137E37   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA1137E49   ; 108: FindCSMbyID(int id)
0424: 0xA1137EF3   ; 109: DoIDLE(void)0xA08B2325
;0428:             ; 10A: GetConfig(unsigned int id)
;042C:             ; 10B: GetMinAdrScan()
;0430:             ; 10C: GetMaxAdrScan()
;0434:             ; 10D: GetCI()
;0438:             ; 10E: Vibration(unsigned int power, unsigned int duration)
;
043C: 0xA163C3FD   ; 10F: freeUSSD()
0440: 0xA0825E59   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA163C439   ; 111: GetTypeUSSD()
0448: 0xA163C449   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA153E6B5   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA153E731   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA153E761   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA153E7B1   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA153E82D   ; 117: strrchr_2(const char *s,int c)
0460: 0xA153E845   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA153E8C1   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA153E93D   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA153D2A9   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA153DD25   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA153E1A8   ; 11D: zeromem(void *dest,int n)
0478: 0xA153E1F0   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0BF55C7   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0480: 0xA0BF55E9   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0BF560D   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0BF56A1   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0BF4F0B   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0BF4CAF   ; 124: wsprintf_2(WSHDR *,const char *format,...)
;
0494: 0xA0BF54A7   ; 125: AllocWS(int len)
0498: 0xA0BF589B   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0BF543F   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0BF545F   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0BF4DF1   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA11496E1   ; 12A: DrawObject_2(DRWOBJ *)
;
;04AC:             ; 12B: AddKeybMsgHook(void *proc)
;04B0:             ; 12C: AddKeybMsgHook_end(void *proc)
;04B4:             ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA1145D39   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA1145D5D   ; 12F: getRGBcolor(int ColorIndex,void *dest)
04C0: 0xA1145D6D   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA1145D8B   ; 131: setColor(int a,int r,int g,int b,void *dest)
;04C8:             ; 132: 
04CC: 0xA114A30D   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA114A323   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA113C4DB   ; 135: IsGuiOnTop(int id)

04D8: 0xA113C5BD   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA113C5CD   ; 137: CreateGUI(void *gui)
04E0: 0xA113C5DB   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA113C615   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA113C625   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)

04EC: 0xA113C635   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA113C643   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA113C651   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA113C661   ; 13E: GeneralFunc_flag0(int id,int cmd)

04FC: 0xA113C6F3   ; 13F: DirectRedrawGUI(void)
0500: 0xA113C6FF   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA113C78F   ; 141: PendedRedrawGUI(void)
0508: 0xA1143331   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828330   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243BC   ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA082949C   ; 146: __arm void LockSched(void);
051C: 0xA0829524   ; 147: __arm void UnlockSched(void);
0520: 0xA113BCBD   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA116647D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA1163CF1   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA1163C5B   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA11664CD   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA113C4E9   ; 14D: GetTopGUI(void)
0538: 0xA1150653   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA115067D   ; 14F: GetDataOfItemByID(GUI *gui,int id)
0540: 0xA1143A6B   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA1144FEB   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA113B875   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: KillGBSproc(int cepid)

0554: 0xA151C801  ; 155: __arm png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
;0558:            ; 156: __arm png_infop png_create_info_struct(png_structp png_ptr);
;055C:            ; 157: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;0560:            ; 158: __arm void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
;0564:            ; 159: __arm void png_read_info(png_structp png_ptr, png_infop info_ptr);
;0568:            ; 15A: __arm png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
;056C:            ; 15B: __arm png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
;0570:            ; 15C: __arm void png_read_image(png_structp png_ptr, png_bytepp image);
;0574:            ; 15D: __arm void png_read_end(png_structp png_ptr, png_infop info_ptr);
;0578:            ; 15E: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
;057C:            ; 15F: __arm png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
;0580:            ; 160: __arm png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
;0584:            ; 161: __arm png_init_io(png_structp png_ptr, int fp);

0588: 0xA153EBA0   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA1138F49   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA1138425   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA1138733   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA11390E1   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA114A629   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)

05A0: 0xA116C4AD   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA116C451   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA116C45B   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA1216ED4   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA1216368   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0BAFFA7   ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA0B4AF17   ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA0B4B70D   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA0B11C0D   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;05C4:             ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8:             ;172 __arm void REDRAW(void);

;05CC:             ; 173: __thumb int socket(int af,int type,int protocol);
;05D0:             ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
;05D4:             ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
;05D8:             ; 176: __thumb int closesocket(int socket);
;05DC:             ; 177: __thumb int shutdown(int socket,int how);
;05E0:             ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
;05E4:             ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
;05E8:             ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
;05EC:             ; 17B: __thumb unsigned int htonl(unsigned int);
;05F0:             ; 17C: int socklasterr(void)
;05F4:             ; 17D: void SetIDLETMR(int time_ms,int msg)
;05F8:             ; 17E: void RestartIDLETMR(void)
05FC: 0xA113C68D   ; 17F: void DisableIDLETMR(void)
;
;0600:              ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
;0604:              ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
;0608:              ; 182: int EDIT_GetFocus(void *gui)
;060C:              ; 183: int EDIT_GetUnFocus(void *gui)
;0610:              ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
;0614:              ; 185: 
;0618:              ; 186: 
;061C:              ; 187: 
;0620:              ; 188: 
;0624:              ; 189: 
;0628:              ; 18A: 
;062C:              ; 18B: 
;0630:              ; 18C: 
;0634:              ; 18D: 
;0638:              ; 18E: 
;063C:              ; 18F: 
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

