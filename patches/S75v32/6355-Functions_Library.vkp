;S75v32
;Библиотека функций
;Functions Library
;(c) avkiev
;Version: 060922
;PatchID: 6355
;Details: https://patches.kibab.com/patches/details.php5?id=6355
/*
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
В патче собрано 4096 самых часто-используемых функций, переменных и констант.
После применения патча для вызова (например) функции GetWeek достаточно написать "SWI 181".
Для получения в R0 адреса переменной RamCap нужно будет написать "SWI 200". На любом телефоне и на любой прошивке.
После портирования этого патча на определенную прошивку - для портирования других патчей
в большинстве случаев достаточно будет поменять только место врезки.
Для портирования этого патча на другие прошивки используйте Smelter - Инструменты - Библиотека функций.

*/

+0074000
#pragma enable old_equal_ff
0000: 0xA00020F0   ; 00: SWI0
0004: 0xA00020F0   ; 01: SWI1
0008: 0xA00020F0   ; 02: SWI2
000C: 0xA00020F0   ; 03: SWI3
0010: 0xA00020F0   ; 04: SWI4
0014: 0xA026CB85   ; 05: DecToHex
0018: 0xA01A9BC0   ; 06: GetAkku
001C: 0xA006F061   ; 07: GetLP
0020: 0xA01B40B4   ; 08: SetIllumination
0024: 0xA0231A04   ; 09: SwitchPhoneOff
0028: 0xA0250320   ; 0A: fopen
002C: 0xA02503E0   ; 0B: fread
0030: 0xA0250510   ; 0C: fwrite
0034: 0xA0250274   ; 0D: fclose
0038: 0xA02502A4   ; 0E: fflush
003C: 0xA02502D4   ; 0F: lseek

0040: 0xA024FF18   ; 10: mkdir
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA024FD78   ; 12: GetFileAttrib
004C: 0xA025006C   ; 13: SetFileAttrib
0050: 0xA0094B50   ; 14: malloc
0054: 0xA009493C   ; 15: mfree
0058: 0xA0FC16DD   ; 16: sprintf
005C: 0xA0FC3149   ; 17: strcat
0060: 0xA0FC3169   ; 18: strchr
0064: 0xA0FC318C   ; 19: strcmp
0068: 0xA0FC3229   ; 1A: strcpy
006C: 0xA0FC32A9   ; 1B: strlen
0070: 0xA01F529D   ; 1C: wsAppendChar
0074: 0xA01F5251   ; 1D: wsInsertChar
0078: 0x00000000   ;-1E: GetPITaddr
007C: 0x00000000   ;-1F: DrawMainScreen

0080: 0x00000000   ; 20: DrawScreenSaver
0084: 0xA09739E7   ; 21: GetImgHeight
0088: 0xA09739F7   ; 22: GetImgWidth
008C: 0xA029A5E5   ; 23: DrawImg
0090: 0xA09FEF7F   ; 24: DrawImage2
0094: 0xA0299ADF   ; 25: DrawCanvas
0098: 0xA09FEEA9   ; 26: DrawImgBW
009C: 0xA0299D05   ;-27: AddIconToIconbar
00A0: 0x00000000   ;-28: getEELiteMaxID
00A4: 0x00000000   ;-29: getEEFullMaxID
00A8: 0x00000000   ;-2A: GetEELiteBlockAddress
00AC: 0x00000000   ;-2B: getEELiteBlockSizeVersion
00B0: 0x00000000   ;-2C: getEEFullBlockSizeVersion
00B4: 0x00000000   ;-2D: StartWriteEELiteBlock
00B8: 0x00000000   ;-2E: FinishWriteEELiteBlock
00BC: 0x00000000   ;-2F: DeleteEELiteBlock

00C0: 0x00000000   ;-30: WriteEELiteBlock
00C4: 0xA0FC33F1   ; 31: strrchr
00C8: 0xA027FD00   ; 32: PlaySound
00CC: 0xA027670C   ; 33: PlaySound2
00D0: 0xA0B32FC0   ; 34: PlaySoundLoop
00D4: 0x00000000   ;-35: AlarmClockRing
00D8: 0x00000000   ;-36: GetATCmdString
00DC: 0xA09A2AA5   ; 37: OriginalATCGSN
00E0: 0x00000000   ;-38: PostAtCommand
00E4: 0xA08E4E5D   ; 39: SendATAnswerStr
00E8: 0x00000000   ;-3A: mfree_high
00EC: 0xA0FC2445   ; 3B: memchr
00F0: 0xA0250420   ; 3C: setfilesize
00F4: 0x00000000   ;-3D: editOrNewTXTModule
00F8: 0x00000000   ;-3E: LoadProcesses
00FC: 0xA096EC21   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA028860D   ; 40: GetVibraStatus
0104: 0xA08F66AF   ; 41: GetProvider
0108: 0x00000000   ;-42: IsScreenSaver
010C: 0xA08FE55F   ; 43: IsUnlocked
0110: 0x00000000   ;-44: TempLigntOn
0114: 0x00000000   ;-45: GetWavLen
0118: 0x00000000   ;-46: HasNewSMS
011C: 0x00000000   ;-47: HasFlashSMS
0120: 0x00000000   ;-48: ReadNewSMS
0124: 0x00000000   ;-49: ReadFlashSMS
0128: 0x00000000   ;-4A: PlayFile
012C: 0xA0AA4C84   ; 4B: StartMidlet
0130: 0x00000000   ;-4C: GetMissedCallsCount
0134: 0xA0093278   ; 4D: CallAfterTimer
0138: 0x00000000   ;-4E: ShowMsgInR1_3
013C: 0x00000000   ;-4F: ShowMsgInR1_4

0140: 0x00000000   ;-50: ShowMsgInR1_7
0144: 0xA0D4B2AF   ; 51: GetNetAccessMode
0148: 0x00000000   ;-52: GetIlluminationDataTable
014C: 0xA0FC2469   ; 53: memcmp
0150: 0xA02BEA8D   ; 54: strtoint
0154: 0xA0377C8B   ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
015C: 0x00000000   ;-57: IsCallAfterTimerStillRunning
0160: 0xA001838C   ; 58: ClearMemory
0164: 0xA000B228   ; 59: memcpy
0168: 0x00000000   ;-5A: KeypressOn
016C: 0x00000000   ;-5B: KeypressOff
0170: 0xA01CEF64   ; 5C: GetCPUClock()
0174: 0xA032F66B   ; 5D: GetCPULoad()
0178: 0x00000000   ;-5E: GetMMIMemUsed
017C: 0x00000000   ;-5F: GetNonPermMemAvail

0180: 0xA03307F9   ; 60: ShowMainMenu
0184: 0xA033081D   ; 61: ShowNativeMenu
0188: 0xA02885D5   ; 62: SetVibraStatus
018C: 0x00000000   ;-63: MS_Wallpaper_Flush
0190: 0x00000000   ;-64: TriggerUpdate
0194: 0x00000000   ;-65: EndCall
0198: 0x00000000   ;-66: EndCallBusy
019C: 0x00000000   ;-67: IsDirectCallActive
01A0: 0x00000000   ;-68: GetScreenSaverRAM
01A4: 0xA009AE88   ; 69: LockSched
01A8: 0xA009AF74   ; 6A: UnlockSched
01AC: 0xA024FDF0   ; 6B: FindFirstFile / GBSS_pc_gfirst
01B0: 0xA024FE70   ; 6C: FindNextFile / GBSS_pc_gnext
01B4: 0xA024FD38   ; 6D: FindClose / GBSS_pc_gdone
01B8: 0xA0D05B01   ; 6E: IsCalling
01BC: 0xA094F99C   ; 6F: RefreshGPRSTraffic

01C0: 0xA094F9CC   ; 70: GetGPRSTrafficPointer
01C4: 0x00000000   ;-71: DrawRoundRect
01C8: 0x00000000   ;-72: SetCurrentSecondOfCall
01CC: 0x00000000   ;-73: GetTypeOfCall
01D0: 0x00000000   ;-74: GetFunctionPointer
01D4: 0xA09734B9   ; 75: StoreXYWHtoRECT
01D8: 0x00000000   ;-76: SetWindowText
01DC: 0x00000000   ;-77: set2color_byPaletteAdr
01E0: 0x00000000   ;-78: GetTimeFormat
01E4: 0xA08FD701   ; 79: DrawObject
01E8: 0x00000000   ;-7A: ClearWindowBuffer
01EC: 0x00000000   ;-7B: GetProfileFilter
01F0: 0xA01AE9CF   ; 7C: SetVibration
01F4: 0xA0D054C3   ; 7D: IsIncognitoCall
01F8: 0xA0D04B61   ; 7E: Rand
01FC: 0xA0528DF9   ; 7F: IsPlayerOn

0200: 0xA05DBC51   ; 80: ShowCallList
0204: 0xA0FC2CBC   ; 81: HexToDec
0208: 0xA0528EDB   ; 82: GetCurrentTrackFilename
020C: 0x00000000   ; 83: GetPathOfFoundFile
0210: 0xA02500E4   ; 84: GetFileStats
0214: 0x00000000   ;-85: StrCmpNoCase
0218: 0x00000000   ;-86: ReadEEPROMData
021C: 0x00000000   ;-87: WriteEEPROMData
0220: 0xA022C918   ; 88: GetAccessoryType
0224: 0xA0900834   ; 89: GetLangMesIntoWS
0228: 0xA024FCC8   ; 8A: GetFreeFlexSpace
022C: 0xA025057C   ; 8B: GetTotalFlexSpace
0230: 0xA04D43A9   ; 8C: RegExplorerExt
0234: 0xA02FEBB9   ; 8D: GetProfileName
0238: 0xA024FF80   ; 8E: fmove
023C: 0xA0250004   ; 8F: rmdir

0240: 0xA0250498   ; 90: truncate
0244: 0xA024FEB0   ; 91: isdir
0248: 0x00000000   ;-92:
024C: 0x00000000   ;-93: 
0250: 0x00000000   ;-94: 
0254: 0x00000000   ;-95: 
0258: 0x00000000   ;-96: 
025C: 0x00000000   ;-97: 
0260: 0x00000000   ;-98: 
0264: 0x00000000   ;-99: 
0268: 0x00000000   ;-9A: 
026C: 0x00000000   ;-9B: 
0270: 0x00000000   ;-9C: 
0274: 0x00000000   ;-9D: 
0278: 0x00000000   ;-9E: 
027C: 0x00000000   ;-9F: DrawRect

0280: 0xA09664B1   ; A0: wsprintf
0284: 0x00000000   ;-A1: wstrcpy
0288: 0x00000000   ;-A2: Unicode_GetCharByPosition
028C: 0xA0250A60   ; A3: ws2str
0290: 0xA0966F75   ; A4: AllocWS_2
0294: 0xA01F4A21   ; A5: FreeWS_2
0298: 0xA094F974   ; A6: ResetGPRSTraffic
029C: 0x00000000   ;-A7: 
02A0: 0x00000000   ;-A8: 
02A4: 0x00000000   ;-A9: 
02A8: 0x00000000   ;-AA: 
02AC: 0xA00020F0   ; AB: SWI_AB
02B0: 0x00000000   ;-AC: DrawText
02B4: 0x00000000   ;-AD: StrAnsi2Uni
02B8: 0x00000000   ;-AE: StrUni2Ansi
02BC: 0x00000000   ;-AF: Hex2Int

02C0: 0x00000000   ;-B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
02C8: 0x00000000   ;-B2: 
02CC: 0x00000000   ;-B3: Seconds2iTime
02D0: 0xA08FAB2F   ;-B4: GetDateTime
02D4: 0xA026BB47   ; B5: GetWeek
02D8: 0xA0287E0B   ; B6: GetProfile
02DC: 0xA0287E6B   ; B7: SetProfile
02E0: 0xA0FC2ADC   ; B8: dwMODdw
02E4: 0x00000000   ;-B9: 
02E8: 0x00000000   ;-BA: 
02EC: 0x00000000   ;-BB: 
02F0: 0x00000000   ;-BC: 
02F4: 0x00000000   ;-BD: 
02F8: 0xA0060C81   ; BE: RunScaner
02FC: 0x00000000   ;-BF: SpellTime

0300: 0x00000000   ;-C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
0308: 0x00000000   ;-C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
0314: 0x00000000   ;-C5: PIT_Manager_Core
0318: 0x00000000   ;-C6: 
031C: 0x00000000   ;-C7: CallLibFunByNumber
0320: 0xA8D036D6   ; C8: RamCap
0324: 0xA8D036FA   ; C9: RamLS
0328: 0xA8E2ED1A   ; CA: RamNet
032C: 0x00000000   ;-CB: 
0330: 0x00000000   ;-CC: RamMissedCalls
0334: 0x00000000   ;-CD: RamMissedSMS
0338: 0x00000000   ;-CE: RamDateTime
033C: 0x00000000   ;-CF: RamAlarm

0340: 0xA8D6A3B0   ; D0: RamAccPoint
0344: 0x00000000   ;-D1: RamScreensaver
0348: 0x00000000   ;-D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
0350: 0xA8DD3428   ; D4: RamMissedMes
0354: 0xA8D34F98   ; D5: RamIsLocked
0358: 0x00000000   ;-D6: RamNetOnline
035C: 0x00000000   ;-D7: RamScreenBrightness
0360: 0x00000000   ;-D8: RamMenuAnywhere
0364: 0x00000000   ;-D9: RamShutdownMode
0368: 0x00000000   ;-DA: RamIsShutdown
036C: 0x00000000   ;-DB: RamMainscreenAccuIcon
0370: 0x00000000   ;-DC: RamRandSeed
0374: 0xA899F2CC   ; DD: RamCurrentTrack
0378: 0xA8D77FCC   ; DE: RamIsSimPresent
037C: 0xA8D34F70   ; DF: RamPressedKey

0380: 0xA8D29984   ; E0: RamScreenBuffer 
0384: 0x00000000   ;-E1: 
0388: 0x00000000   ;-E2: 
038C: 0x00000000   ;-E3: RamProfileNum
0390: 0xA8A80000   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000260   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
03AC: 0x00000000   ;-EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B0   ; EF: Pic_Calendar

03C0: 0x00000000   ;-F0: Pic_AccuGraph
03C4: 0xA02FD959   ; F1: BuildCanvas
03C8: 0x00000000   ;-F2: lpRAM_PIT
03CC: 0x00000000   ;-F3: RAM_PIT_Cap
03D0: 0x00000000   ;-F4: 
03D4: 0x00000000   ;-F5: 
03D8: 0x00000000   ;-F6: 
03DC: 0x00000000   ;-F7: 
03E0: 0x00000000   ;-F8: Additional_PIT_address
03E4: 0x00000000   ;-F9: Additional_PIT_start
03E8: 0x00000000   ;-FA: Additional_PIT_end
03EC: 0x00000000   ;-FB: 
03F0: 0x00000000   ;-FC: PictureRelocationTable
03F4: 0x00000000   ;-FD: PictureRelocationBase
03F8: 0x00000000   ;-FE: NextPictureMagic
03FC: 0x00000000   ;-FF: 

0400: 0xA0092A94   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB99F4   ; 106: CSM_root()
041C: 0xA096D5D3   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA096D5E5   ; 108: FindCSMbyID(int id)
0424: 0xA096D6A1   ; 109: DoIDLE(void)
0428: 0x00000000   ;-10A: GetConfig(unsigned int id)
042C: 0x00000000   ;-10B: GetMinAdrScan()
0430: 0x00000000   ;-10C: GetMaxAdrScan()
0434: 0x00000000   ;-10D: GetCI()
0438: 0x00000000   ;-10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA0298C21   ; 10F: freeUSSD()

0440: 0xA026CF5D   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA0298C5D   ; 111: GetTypeUSSD()
0448: 0xA0298C6D   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FC3279   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FC32F5   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC3325   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC3375   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC33F1   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FC3409   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FC3431   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC34AD   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC1689   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0018941   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FC28C4   ; 11D: zeromem(void *dest,int n)
0478: 0xA000B228   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA01F518F   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F51B1   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F51D5   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F5209   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F4AEF   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA09664B1   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0966F75   ; 125: AllocWS(int len)
0498: 0xA01F5401   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA01F501F   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F5099   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F4A21   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA08FD701   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA096D77D   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA096D785   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA096D78D   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA096EC21   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA096EC45   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA096EC55   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA096EC73   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0x00000000   ;-132: 
04CC: 0xA09734B9   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA09734CF   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0975DBB   ; 135: IsGuiOnTop(int id)
04D8: 0xA0975EDF   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA0975EEF   ; 137: CreateGUI(void *gui)
04E0: 0xA0975EFD   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA0975F37   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0975F47   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0975F57   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA0975F65   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA0975F73   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0975F83   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0976017   ; 13F: DirectRedrawGUI(void)

0500: 0xA097602F   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA0976023   ; 141: PendedRedrawGUI(void)
0508: 0xA09FCA53   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B528   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0098F10   ; 145: GBS_GetCurCepid(void)
0518: 0xA009AE88   ; 146: LockSched_2(void)
051C: 0xA009AF74   ; 147: UnlockSched_2(void)
0520: 0xA0975443   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA0970F39   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA096F16D   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA096F0D7   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0970F83   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0975DC9   ; 14D: GetTopGUI(void)
0538: 0xA0A14BD9   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A14C25   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA09FE92B   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA09FEE7F   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0974FD3   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091808   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0098E88   ; 154: KillGBSproc(int cepid)
0554: 0xA00E2950   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA00E1378   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA00E3E74   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA00E117C   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA00E2BD0   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA00E2108   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0118D4C   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA00E3750   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA00E37B0   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA00E3E74   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA00E1D24   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA00E31E4   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E18B8   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC36E0   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A08DF3   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A08231   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0853F   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A08F8F   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A05BB9   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A0EE5B   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A0EDF1   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A0EDFD   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA025015C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA025096C   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA055D4D8   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA050265C   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA05034D0   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA09534B9   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;05C4: 0xA007918C  ; 171: SUBPROC
;05C8: 0xA0079178  ; 172: REDRAW
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

