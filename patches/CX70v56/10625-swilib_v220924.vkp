;CX70v56
;Библиотека Функций
;Function Library
;(c) avkiev
;Version: 220924
;PatchID: 10625
;Details: https://patches.kibab.com/patches/details.php5?id=10625
/*

*/

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0092E1C ; 000: void loopback0()
0004: 0xA0092E1C ; 001: void loopback1()
0008: 0xA0092E1C ; 002: void loopback2()
000C: 0xA0092E1C ; 003: void loopback3()
0010: 0xA0092E1C ; 004: void loopback4()
0014: 0xA082BE21 ; 005: DecToHex
0018: 0xA11502A4 ; 006: int GetAkku(int param1,int param2)
001C: 0xA1559A09 ; 007: GetLP
0020: 0xA1151138 ; 008: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA116CB88 ; 009: _arm void SwitchPhoneOff()
0028: 0xA113B324 ; 00A: int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;002C: 0x ; 00B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;0030: 0x ; 00C: unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA113B278 ; 00D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA113B2A8 ; 00E: fflush
003C: 0xA113B2D8 ; 00F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)
0040: 0xA113B108 ; 010: int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0FCF201 ; 011: OpenReadCloseFile
0048: 0xA113B024 ; 012: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA113B1A0 ; 013: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0820F98 ; 014: void *malloc(unsigned int size)
0054: 0xA0821000 ; 015: void mfree(void *)
0058: 0xA1610211 ; 016: int sprintf(char *buf, char *str, ...)
005C: 0xA16EF379 ; 017: char * strcat (char *,const char *)
0060: 0xA16EF399 ; 018: char * strchr (const char *,int)
0064: 0xA16EF3BC ; 019: int strcmp (const char *,const char *)
0068: 0xA16EF459 ; 01A: char * strcpy (char *dest,const char *source)
006C: 0xA16EF4D9 ; 01B: unsigned int strlen(char *)
0070: 0xA0C8D245 ; 01C: void wsAppendChar (void *WSHDR,int wchar)
0074: 0xA0C8D1F9 ; 01D: int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA0CB75B5 ; 01E: IMGHDR *GetPITaddr(int num)
007C: 0xA171CEDB ; 01F: DrawMainScreen
0080: 0xA171FAFB ; 020: DrawScreenSaver
0084: 0xA0CB76E9 ; 021: int GetImgHeight(int picture)
0088: 0xA0CB76F9 ; 022: int GetImgWidth(int picture)
008C: 0xA1715CA9 ; 023: void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0CAE7A9 ; 024: DrawImage2
0094: 0xA1715C83 ; 025: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0CAE6E9 ; 026: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA171560B ; 027: AddIconToIconbar
00A0: 0xA11521A0 ; 028: getEELiteMaxID
00A4: 0xA1139D44 ; 029: getEEFullMaxID
00A8: 0xA115203C ; 02A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA1152144 ; 02B: getEELiteBlockSizeVersion
00B0: 0xA1139988 ; 02C: getEEFullBlockSizeVersion
00B4: 0xA11521D4 ; 02D: StartWriteEELiteBlock
00B8: 0xA1152250 ; 02E: FinishWriteEELiteBlock
00BC: 0xA11521AC ; 02F: DeleteEELiteBlock
00C0: 0xA115220C ; 030: WriteEELiteBlock
00C4: 0xA16EF621 ; 031: char *strrchr_2(const char *s,int c)
00C8: 0xA096E590 ; 032: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0964774 ; 033: PlaySound2
00D0: 0xA0959C24 ; 034: PlaySoundLoop
00D4: 0xA0ACC4F9 ; 035: void AlarmClockRing()
00D8: 0xA0B78D51 ; 036: GetATCmdString
00DC: 0xA0AD4327 ; 037: OriginalATCGSN
00E0: 0xA0B786ED ; 038: PostAtCommand
00E4: 0xA0B79E0B ; 039: SendATAnswerStr
00E8: 0xA0C3AEDD ; 03A: mfree_high
00EC: 0xA16EE76D ; 03B: MemChr
00F0: 0xA113B3A4 ; 03C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA0A6FDD1 ; 03D: editOrNewTXTModule
00F8: 0xA0B77361 ; 03E: LoadProcesses
00FC: 0xA0CAF40D ; 03F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)
0100: 0xA08F00FF ; 040: GetVibraStatus
0104: 0xA0BA49A3 ; 041: GetProvider
0108: 0xA1720205 ; 042: IsScreenSaver
010C: 0xA0CB677B ; 043: int IsUnlocked(void)
0110: 0xA0BD1A0D ; 044: TempLigntOn
0114: 0xA098E56C ; 045: GetWavLen
0118: 0xA171F68D ; 046: int HasNewSMS()
011C: 0xA171E819 ; 047: int HasFlashSMS()
0120: 0xA0A71E7F ; 048: int ReadNewSMS(void)
0124: 0xA171B137 ; 049: int ReadFlashSMS(void)
0128: 0xA0966BEC ; 04A: void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA0CD94A4 ; 04B: void StartMidlet(char *midlet)
0130: 0xA0BA0CE1 ; 04C: GetMissedCallsCount
0134: 0xA0828294 ; 04D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA0C92327 ; 04E: int MsgBoxError(int flag, int LgpId)
013C: 0xA0C92385 ; 04F: MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))
0140: 0xA0C9238F ; 050: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA12A2571 ; 051: GetNetAccessMode
0148: 0xA11517E4 ; 052: char *GetIlluminationDataTable()
014C: 0xA16EE791 ; 053: ;int  memcmp_2(void *m1,void *m2,int n)
0150: 0xA082BE5D ; 054: StrToInt
0154: 0xA08F0115 ; 055: int SwitchVibraOnOff(void)
0158: 0xA0FCF451 ; 056: PlayVibra
015C: 0xA08283A0 ; 057: int IsCallAfterTimerStillRunning()
0160: 0xA0836F4C ; 058: ClearMemory
0164: 0xA16EEC5C ; 059: ;void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0CB60A7 ; 05A: void KeypressOn(int key)
016C: 0xA0CB6165 ; 05B: KeypressOff
0170: 0xA11A59F4 ; 05C: unsigned char GetCPUClock()
0174: 0xA0918D0F ; 05D: unsigned char GetCPULoad()
0178: 0xA0918CDD ; 05E: GetMMIMemUsed
017C: 0xA082100C ; 05F: int GetFreeRamAvail()
0180: 0xA08F02BB ; 060: void ShowMainMenu
0184: 0xA08FB15F ; 061: void ShowNativeMenu
;0188: 0x ; 062: SetVibraStatus
018C: 0xA1719523 ; 063: MS_Wallpaper_Flush
0190: 0xA0C92C71 ; 064: TriggerUpdate
0194: 0xA0BA2409 ; 065: EndCall
0198: 0xA0B82D47 ; 066: EndCallBusy
019C: 0xA1715059 ; 067: IsDirectCallActive
01A0: 0xA17129D7 ; 068: GetScreenSaverRAM
01A4: 0xA082949C ; 069: LockShed
01A8: 0xA0829524 ; 06A: UnLockShed
01AC: 0xA113B05C ; 06B: int FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA113B098 ; 06C: int FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA113AFE4 ; 06D: int FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA1259553 ; 06E: IsCalling
01BC: 0xA1719DFB ; 06F: void RefreshGPRSTraffic()
01C0: 0xA1719E19 ; 070: int *GetGPRSTrafficPointer()
01C4: 0xA0CAD13F ; 071: DrawFrame
01C8: 0xA0B9CE9B ; 072: GetCurrentSecondOfCall
01CC: 0xA1259D6B ; 073: GetTypeOfCall
01D0: 0xA08F0857 ; 074: void* GetFunctionPointer(char * _shortcut)
01D4: 0xA0CB39E1 ; 075: void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA0CE6C55 ; 076: SetWindowText
01DC: 0xA0CE4433 ; 077: SetWindowColor
01E0: 0xA0B914B7 ; 078: GetTimeFormat
01E4: 0xA0CB2DB5 ; 079: PushWindowBuffer
01E8: 0xA0CE44C9 ; 07A: ClearWindowBuffer
01EC: 0xA08D1FD5 ; 07B: GetProfileFilter
01F0: 0xA1159514 ; 07C: unsigned int SetVibration(unsigned int power)
01F4: 0xA1258F6D ; 07D: IsIncognitoCall
01F8: 0xA1278961 ; 07E: Rand
01FC: 0xA0D53DD0 ; 07F: IsPlayerOn
0200: 0xA0ACCD69 ; 080: int ShowCallList(int list, int zero)
0204: 0xA16EEEEC ; 081: HexToDec
;0208: 0x ; 082: GetCurrentTrackFilename
020C: 0xA08E37E4 ; 083: GetPathOfFoundFile
0210: 0xA113B1D8 ; 084: int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D79 ; 085: StrCmpNoCase
0218: 0xA11398B0 ; 086: ReadEEPROMData
021C: 0xA11399F4 ; 087: WriteEEPROMData
;0220: 0x ; 088: GetAccessoryType
;0224: 0x ; 089: GetLangMesIntoWS
0228: 0xA113AF74 ; 08A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA113B538 ; 08B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA09525F4 ; 08C: void RegExplorerExt(REGEXPLEXT *)
;0234: 0x ; 08D: GetProfileName
0238: 0xA113B138 ; 08E: int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA113B170 ; 08F: int rmdir(char *cDirectory, unsigned int *ErrorNumber)
0240: 0xA113B414 ; 090: int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA113B0D8 ; 091: int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0CA6A2C ; 092: int * calloc(size_t nelem, size_t elsize)
024C: 0xA116CB94 ; 093: RebootPhone
0250: 0xA09526B8 ; 094: int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;0254: 0x ; 095: int UnRegExplorerExt(REGEXPLEXT const *)
;0258: 0x ; 06: GetWavLenByContent
025C: 0xA006F261 ; 097: CreatePath
0260: 0xA006F211 ; 098: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA0966D14 ; 099: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA115AFDC ; 09A: int ChangeVolume(unsigned char Volume)
026C: 0xA879D98C ; 09B: Audio params addr
;0270: 0x ; 09C: CloseScreensaver
0274: 0xA0C35CB1 ; 09D: int GetMissedEventsPtr()
0278: 0xA006F2B1 ;  9E: int GetMissedEventCount(unsigned int Event)027C: 0xA0CAD00B ; 09F: DrawRect
0280: 0xA0C8C7BF ; 0A0: Unicode_sprintf
0284: 0xA0825E59 ; 0A1: Unicode_CopyStr2Str
0288: 0xA0C8CD43 ; 0A2: Unicode_GetCharByPosition
028C: 0xA113A7C4 ; 0A3: void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0C8CFB7 ; 0A4: wsAlloc
0294: 0xA0C8CFF3 ; 0A5: wsFree
0298: 0xA1719DC1 ; 0A6: ResetGPRSTraffic
029C: 0xA1719C0D ; 0A7: char IsGPRSEnabled()
02A0: 0xA127AC91 ; 0A8: char IsGPRSConnected()
02A4: 0xA0CB6D85 ; 0A9: void KbdLock()
02A8: 0xA0FCF001 ; 0AA: OpenWriteCloseFile
02AC: 0xA0092E1C ; 0AB: void loopback171()
02B0: 0xA0FCF1B1 ; 0AC: DrawText
02B4: 0xA0FCF0A1 ; 0AD: StrAnsi2Uni
02B8: 0xA0FCF0C1 ; 0AE: StrUni2Ansi
02BC: 0xA0FCF051 ; 0AF: Hex2Int
02C0: 0xA0FCF351 ; 0B0: DrawPicWithCanvas
02C4: 0xA0FCF371 ; 0B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29 ; 0B2: GetBuildCanvas
02CC: 0xA0FCF301 ; 0B3: Seconds2iTime
02D0: 0xA0B9063B ; 0B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF ; 0B5: char GetWeek(TDate*)
02D8: 0xA08D1999 ; 0B6: char GetProfile()
02DC: 0xA08D1867 ; 0B7: char SetProfile(char)
02E0: 0xA16EEDD0 ; 0B8: int dwMODdw(int denom,int number)
02E4: 0xA0CB69FB ; 0B9: void KbdUnlock()
02E8: 0xA0820FA4 ; 0BA: void *realloc(void *ptr, int size)
02EC: 0xA16EEDB8 ; 0BB: void *memset(void *s, int c, int n)
02F0: 0xA0837018 ; 0BC: int divide(int divisor, int dividend)
02F4: 0xA16EEEA8 ; 0BD: int DivBy10(int divident)
02F8: 0xA0FC0C91 ; 0BE: RunScaner (MPv14)
02FC: 0xA0FC3001 ; 0BF: SpellTime
0300: 0xA0FC7601 ; 0C0: MiniGPS
0304: 0xA0FC0C51 ; 0C1: RunDispatcher
0308: 0xA0FC12A1 ; 0C2: GetAllPatchesByInject
030C: 0xA0FCF3A1 ; 0C3: ProcessFiles
0310: 0xA0FC0C01 ; 0C4: GetBuffer
;0314: 0x ; 0C5: PIT_Manager_Core
0318: 0xA114E734 ; 0C6: GetAkkuCapacity
;031C: 0x ; 0C7: CallLibFunByNumber
0320: 0xA86C0D30 ; 80C8: unsigned short *RamCap()
0324: 0xA86C0D32 ; 0C9: RamLS
0328: 0xA86CD2D4 ; 80CA: RAMNET * RamNet()
032C: 0xA86DBDC8 ; 0CB: RamRingtoneStatus
0330: 0xA8451460 ; 0CC: RamMissedCalls
0334: 0xA8451454 ; 0CD: RamMissedSMS
0338: 0xA87BA000 ; 0CE: RamDateTime
033C: 0xA86E457C ; 0CF: RamAlarm
0340: 0xA87124E4 ; 0D0: RamAccPoint
0344: 0xA863A728 ; 0D1: RamScreensaver
;0348: 0x ; 0D2: RamAutoTime
034C: 0xA868C730 ; 0D3: RamStby
0350: 0xA8451444 ; 0D4: RamMissedMes
0354: 0xA86A8114 ; 0D5: RamIsLocked
0358: 0xA868F33C ; 0D6: RamNetOnline
035C: 0xA86EEBA2 ; 0D7: RamScreenBrightness
0360: 0xA8690745 ; 0D8: RamMenuAnywhere
0364: 0xA86C9F50 ; 0D9: RamShutdownMode
0368: 0xA871255C ; 0DA: RamIsShutdown
036C: 0xA868C75C ; 0DB: RamMainscreenAccuIcon
0370: 0xA8774AC4 ; 0DC: RamRandSeed
0374: 0xA899F2BC ; 0DD: RamCurrentTrack
0378: 0xA86CB0D9 ; 0DE: RamIsSimPresent
037C: 0xA86A8024 ; 0DF: RamPressedKey
0380: 0xA869CA6C ; 0E0: RamScreenBuffer
;0384: 0x ; 0E1: RamMPlayer_CtrlCode
0388: 0xA86B51F8 ; 0E2: RamKeyBuffer
038C: 0xA86DA2C0 ; 0E3: RamProfileNum
0390: 0xA8000000 ; 0E4: FreeRAM
0394: 0x00001297 ; 0E5: LP_MonthsShort
0398: 0x000004D6 ; 0E6: Pic_Big0
039C: 0x00000563 ; 0E7: Pic_Little0
03A0: 0x00000556 ; 0E8: Pic_Extra
03A4: 0x000002D7 ; 0E9: Pic_Profiles
03A8: 0x000002FB ; 0EA: Pic_Vibra
03AC: 0x00000400 ; 0EB: Pic_Call
03B0: 0x00000539 ; 0EC: Pic_AdvNet
03B4: 0x0000118B ; 0ED: LP_MonthsLong
03B8: 0x00000400 ; 0EE: LP_Weekdays
03BC: 0x000005A0 ; 0EF: Pic_Calendar
03C0: 0x000005B0 ; 0F0: Pic_AccuGraph
03C4: 0xA171C92F ; 0F1: BuildCanvas
;03C8: 0x ; 0F2: lpRAM_PIT
;03CC: 0x ; 0F3: RAM_PIT_Cap
03D0: 0x0000055B ; 0F4: Pic_Lani
03D4: 0xA869C9BC ; 0F5: Ram_LCD_Overlay_Layer
03D8: 0xA8691358 ; 0F6: RAM_LCD_Layer_Base_Ptr
;03DC: 0x ; 0F7:
03E0: 0xA0FD0050 ; 0F8: Additional_PIT_address
03E4: 0x00000532 ; 0F9: Additional_PIT_start
03E8: 0x000005D0 ; 0FA: Additional_PIT_end
;03EC: 0x ; 0FB:
03F0: 0xA0FC0A00 ; 0FC: PictureRelocationTable
03F4: 0x0000F000 ; 0FD: PictureRelocationBase
03F8: 0x00001E1E ; 0FE: NextPictureMagic
03FC: 0xA0FD4000 ; 0FF: AddrLibrary()
0400: 0xA0827B04 ; 100: GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
0404: 0xA0826AA0 ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0 ; 102: GBS_AcceptMessage(void)
040C: 0xA0826EC8 ; 103: GBS_ClearMessage(void)
0410: 0xA0827098 ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F74 ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA868ABC4 ; 8106: CSMROOT *CSM_root()
041C: 0xA0C8EE3B ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0C8EE4D ; 108: CSM_RAM * FindCSMbyID (int id)
0424: 0xA0C8EEF7 ; 109: void DoIDLE(void)
0428: 0x00000000 ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0x00000000 ; 810B: __unknown void *GetMinAdrScan(); //BoBaPack
0430: 0x00000000 ; 810C: __unknown void *GetMaxAdrScan(); //BoBaPack
0434: 0x00000000 ; 810D: __unknown unsigned short *GetCI()
0438: 0x00000000 ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack
043C: 0xA171E2C5 ; 10F: void freeUSSD()
0440: 0xA0825E59 ; 110: char *wstrcopy(char *dst, char *src)
0444: 0xA171E301 ; 111: char GetTypeUSSD()
0448: 0xA171E311 ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA16EF4A9 ; 113: char * strpbrk (const char *s1,const char *s2)
0450: 0xA16EF525 ; 114: char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA16EF555 ; 115: int strncmp (const char *s1,const char *s2,int n)
0458: 0xA16EF5A5 ; 116: int strncpy (char *dest,const char *source,int maxlen)
045C: 0xA16EF621 ; 117: char * strrchr (const char *s,int c)
0460: 0xA16EF639 ; 118: char * strstr (const char *s1,const char *s2)
0464: 0xA16EF6B5 ; 119: int strtol (const char *nptr,char **endptr,int base)
0468: 0xA16EF731 ; 11A: int strtoul (const char *nptr,char **endptr,int base)
046C: 0xA16101BD ; 11B: int snprintf (char *,int n,const char *format,...)
0470: 0xA16EE791 ; 11C: int memcmp (void *m1,void *m2,int n)
0474: 0xA16EEC14 ; 11D: void zeromem (void *dest,int n)
0478: 0xA16EEC5C ; 11E: void * memcpy (void *dest,const void *source,int cnt)
047C: 0xA0C8D0D7 ; 11F: WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)
0480: 0xA0C8D0F9 ; 120: WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA0C8D11D ; 121: WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0C8D1B1 ; 122: WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0C8CA1B ; 123: int wstrlen (WSHDR *wshdr)
0490: 0xA0C8C7BF ; 124: int wsprintf (WSHDR *,const char *format,...)
0494: 0xA0C8CFB7 ; 125: WSHDR * AllocWS (int len)
0498: 0xA0C8D3AB ; 126: void CutWSTR (void *WSHDR,int len)
049C: 0xA0C8CF4F ; 127: WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0C8CF6F ; 128: int CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA0C8C901 ; 129: void FreeWS (WSHDR *wshdr)
04A8: 0xA0CB2DB5 ; 12A: void DrawObject (DRWOBJ *)
;04AC: 0x ; 12B: void AddKeybMsgHook (void *proc)
;04B0: 0x ; 12C: int AddKeybMsgHook_end (void *proc)
;04B4: 0x ; 12D: __unknown void RemoveKeybMsgHook (void *proc)
04B8: 0xA0CAF40D ; 12E: int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA0CAF431 ; 12F: void getRGBcolor (int ColorIndex,void *dest)
04C0: 0xA0CAF441 ; 130: void getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA0CAF45F ; 131: void setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA16EED14 ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0CB39E1 ; 133: void StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA0CB39F7 ; 134: void StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0C92B17 ; 135: int IsGuiOnTop (int id)
04D8: 0xA0C92BF9 ; 136: int CreateGUI_ID (void *gui,int id)
04DC: 0xA0C92C09 ; 137: int CreateGUI (void *gui)
04E0: 0xA0C92C17 ; 138: int CreateGUI_30or2 (void *gui)
04E4: 0xA0C92C51 ; 139: int CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA0C92C61 ; 13A: int CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA0C92C71 ; 13B: void GeneralFuncF1 (int cmd)
04F0: 0xA0C92C7F ; 13C: void GeneralFuncF0 (int cmd)
04F4: 0xA0C92C8D ; 13D: void GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA0C92C9D ; 13E: void GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA0C92D2F ; 13F: void DirectRedrawGUI (void)
0500: 0xA0C92D3B ; 140: void DirectRedrawGUI_ID (int id)
0504: 0xA0C92DCB ; 141: void PendedRedrawGUI (void)
0508: 0xA0CACA05 ; 142: CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA0828330 ; 143: void GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08 ; 144: void GBS_StopTimer (GBSTMR *tmr)
0514: 0xA08243BC ; 145: int GBS_GetCurCepid (void)
0518: 0xA082949C ; 146: void LockSched(void)
051C: 0xA0829524 ; 147: void UnlockSched(void)
0520: 0xA0C922F9 ; 148: int ShowMSG(int flag, int lgp_id)
0524: 0xA0CE6C55 ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0CE44C9 ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0CE4433 ; 14B: void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0CE6CA5 ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0C92B25 ; 14D: GUI *GetTopGUI(void)
0538: 0xA0CB97BF ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0CB97E9 ; 14F: void *GetDataOfItemByID(GUI *gui,int id)
0540: 0xA0CAD13F ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0CAE6BF ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0C91EB1 ; 152: int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964 ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380 ; 154: void KillGBSproc(int cepid)
0554: 0xA15ECB19 ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA15EBEED ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA15ED951 ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA15EBDC1 ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA15ECC57 ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15EC53D ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA15EC8DF ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA15ED547 ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA15ED589 ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA15EC1DD ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA15EC453 ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA15ED0DF ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000 ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA16EF960 ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0C8FF4D ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0C8F429 ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0C8F737 ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0C900E5 ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0CB3CFD ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0CECCA9 ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0CECC4D ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0CECC57 ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA113B210 ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA113A6A4 ; 16C: int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0C3373F ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0BAF7FB ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0BAFFF1 ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)
05C0: 0xA0B80085 ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;Handmaded functions
;05C4: 0x ;171 void SUBPROC(void *,...); //(void (*)(void *, int),void *, int)
;05C8: 0x ;172 void REDRAW(void)
05CC: 0xA12645FD ; 173: int socket(int af,int type,int protocol)
05D0: 0xA12648CF ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA1264781 ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA1264A49 ; 176: int closesocket(int socket)
05DC: 0xA12649C5 ; 177: int shutdown(int socket,int how)
05E0: 0xA1264AF3 ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA1264DCF ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA1283D45 ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA1283D51 ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA876D9C0 ; 817C: int socklasterr(void)
05F4: 0xA0C92CAD ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0C92CBD ; 17E: void RestartIDLETMR(void)
05FC: 0xA0C92CC9 ; 17F: void DisableIDLETMR(void)
0600: 0xA0CECB7B ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0CECAE5 ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0CECB21 ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0CECB2B ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0C8F76F ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA082769C ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA1262219 ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA1262C49 ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084 ; 8188: __adr int ScreenW(void)
0624: 0x000000B0 ; 8189: __adr int ScreenH(void)
0628: 0x00000012 ; 818A: __adr int HeaderH(void)
062C: 0x00000012 ; 818B: __adr int SoftkeyH(void)
0630: 0xA08298B4 ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0D70648 ; 18D: int available0(int sock)
0638: 0xA127B53D ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0C956FF ; 18F: int GetCurMenuItem(void *gui)
0640: 0xA0828F64 ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0829090 ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA0829210 ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA0829268 ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA08292C4 ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0C96BC1 ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0C92DA5 ; 196: void RefreshGUI(void)
065C: 0xA0C96C13 ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0C96D21 ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0C96B93 ; 199: void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA0C964E5 ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0CECB35 ; 19B: void EDIT_SetFocus(void *gui, int item)
;Handmaded function
;0670: 0x ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA1157534 ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA11574FC ; 19E: void StartCpuUsageCount(void)
067C: 0xA08751D5 ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)
0680: 0xA087530B ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA0876147 ; 1A1: int inflateEnd(z_streamp strm)
0688: 0xA08CAED9 ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0CD1190 ; 1A3: int GetCurrentGPRSProfile(void)
0690: 0xA0CD1134 ; 1A4: int GetDisconnectTime(void)
0694: 0xA08CAF03 ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA08283A0 ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0B83F47 ; 1A7: char *Get_CC_NC()
06A0: 0xA15EC9DD ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA15ED9EF ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA15ED0A7 ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA15EDB17 ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA15EC441 ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA15EDB33 ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA15EE889 ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA15EDAED ; 1AF: void png_set_strip_16(png_structp png_ptr)
06C0: 0xA15EE81F ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA15EDB41 ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA15EBE21 ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0CAFD1F ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA0CAD00B ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000 ; 81B5: __adr int isnewSGold(void)
06D8: 0xA12652EF ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA126A4A1 ; 1B7: unsigned int str2ip(const char *)
;Handmaded functions
;06E0: 0x ; 1B8: __adr void *EXT_TOP(void)
;06E4: 0x ; 1B9: __adr void *PNG_TOP(void)
;06E8: 0x ; 1BA: __adr void *LIB_TOP(void)
;06EC: 0x ; 1BB: __adr void *DATA_N_SFB(void)
06F0: 0xA15D7CD7 ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA15D79BB ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA15D7BB7 ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA159C445 ; 1BF: RSA * RSA_new_method(RSA_METHOD *method)
0700: 0xA159C4D3 ; 1C0: void RSA_free (RSA *r)
0704: 0xA159C69F ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA14A9EEB ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0C93D1F ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0C93C97 ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0CB73EF ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0CECB0D ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0CECB17 ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0C9029D ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0C8F3C3 ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0C8F3B7 ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0C8F3AB ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0C8F395 ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0C8F37D ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0C8F465 ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA0951D24 ; 1CF: REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)
0740: 0xA0951EA4 ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0CECC73 ; 1D1: void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA0CECC7D ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0CECB5D ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0CECB67 ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA1162DD8 ; 1D5: char *Get_Phone_Ino(int InoIndex)
0758: 0xA15EDB25 ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA15EE8EB ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0CECBA3 ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0CECBB7 ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0A6F473 ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA87CBC00 ; 1DB: PDU *IncommingPDU(void)
0770: 0xA0C8CCA5 ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA0C8CCC7 ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0CECC43 ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0CECCD9 ; 1DF: void *EDIT_GetUserPointer(void *gui)
0780: 0xA0C97C65 ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0CB2EA1 ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA11386CF ; 1E2: int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA11385B7 ; 1E3: int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA0C91915 ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0CECD69 ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA0C95B6F ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
;079C: 0x ; 1E7: char *GetLastJavaApplication()
07A0: 0xA0CD8DF8 ; 1E8: int IsNoJava()
;Handmaded function
;07A4: 0x ; 1E9: IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA0CB7BCF ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA868BA96 ; 1EB: char *RAM_IMSI(void)
07B0: 0xA0CB7C43 ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA0CB7C6F ; 1ED: int IsDynIconBusy(int picture)
;07B8: 0x ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA0CB7BD3 ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)
07C0: 0xA08E4D08 ; 1F0: filecopy
07C4: 0xA08E6BF4 ; 1F1: filecopy_op_announce
07C8: 0xA1162B04 ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA0837C68 ; 1F3: GetSessionAge
07D0: 0xA868BE3C ; 1F4: char *RamServiceProviderName()
07D4: 0xA16EEF5D ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA0CB7C9B ; 1F6: IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
;07E0: 0x ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract);07E8: 0x ; 1FA: char *RamVolumeStep()
07EC: 0xA86CA024 ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA0C8EF3F ; 1FC: void CloseCSM(int id)
07F4: 0xA0CACFEF ; 1FD: SetProp2Square_v2
;07F8: 0x ; 1FE: char *RamLighterPower()
;07FC: 0x ; 1FF: void MEDIA_PLAYLAST()
0800: 0xA0FC7301 ; 200: ScreenShoot
0804: 0xA0CAE7CF ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0D1EAB3 ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0CAFBCF ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0CE2D6F ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0CACFC9 ; 205: void SetProp2Square_v1(void)
0818: 0xA16EEB39 ; 206: void srand(unsigned int seed)
081C: 0xA0CE6507 ; 207: void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA0CB2ECB ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA0C8EE81 ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0CECBE9 ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0CECBFD ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0CECC11 ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0CECC25 ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0C8F6F1 ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0C8F5D7 ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)
0840: 0xA0C92B11 ; 210: int GetCurGuiID(void)
0844: 0x000000A1 ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA09D5D0C ; 212: int CardExplGetCurItem(void *csm)
084C: 0xA098EB0C ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA0C8D1D9 ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA0C8D269 ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0C8C81D ; 216: void wstrcatprintf(WSHDR *,const char *format,...)
085C: 0xA0B110C5 ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA0CF1893 ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA0CF1B4B ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA0CECCF1 ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0CECCFB ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0CECD37 ; 21C: int EDIT_IsBusy(void *gui)
0874: 0xA0B7E539 ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA0C92D09 ; 21E: void FocusGUI(int id)
087C: 0xA0C92D17 ; 21F: void UnfocusGUI(void)
;0880: 0x ; 220: IsSliderClosed
0884: 0xA11A59D4 ; 221: SetCpuClockLow(2)
0888: 0xA11A59BC ; 222: SetCpuClockTempHi(2)
;088C: 0x ; 223: IsMediaPlayerInBackground
;0890: 0x ; 224: CloseMediaPlayer
0894: 0xA0966E14 ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA09671EC ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA096728C ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA09672D0 ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA16EF988 ; 229: void longjmp(jmp_buf, int)
08A8: 0xA0B85883 ; 22A: void FreeGSMTXTpkt(void *pkt)
;8AC:            ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:            ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:            ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:            ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA86909BC ; 22F:  TDateTimeSettings *RamDateTimeSettings
08C0: 0xA0B905CB ; 230:  int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8690964 ; 231:  TAppointment *RamAppointment
8C8: 0xA08278CC  ; 232:  void GBS_DestroyMessage(GBS_MSG *)
;8CC:            ; 233:  void GetAllEmail()
;08D0: 0x         ; 234:
;08D4: 0x         ; 235:
;08D8: 0x         ; 236:
;08DC: 0x         ; 237:
08E0: 0xA0B8582D ; 238: void SendAutoUSSDack(void)
08E4: 0xA1139CB4 ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA1139E00 ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA0092E1C ; 23B: void DisableIconBar(int disable); //Only loopback
08F0: 0xA0CD115C ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA15D4A51 ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA15D46C1 ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA15D4959 ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA15D53E1 ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL)
0904: 0xA0B908E3 ; 241: void SetDateTime(TDate *, TTime *)
0910: 0xA15CAD31 ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA15CADE1 ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
092C: 0xA0C97076 ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0934: 0xA0967314 ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA099C8E8 ; 24E: void *GetPlayObjById(int handle)
0950: 0xA098F758 ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA12C7D7D ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
;958:            ; 256: isSetupTheme()
;95C:            ; 257: isSendReceiveFile()
0960: 0xA0CB768B ; 258: int CalcBitmapSize(short w,short h, char typy)
0964: 0xA09798B0 ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA09D7ACC ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA097E2D4 ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0977C84 ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA167E21C ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA097CFD0 ; 25E: int Obs_Start(HObj hObj)
097C: 0xA099F058 ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)
0980: 0xA0978724 ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0978294 ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA097CE60 ; 262: int Obs_GetInfo(HObj hObj, int unk_0or1)
098C: 0xA0978150 ; 263: intObs_SetScaling(HObj hObj, int unk5)
0990: 0xA097F8F8 ; 264: int Obs_TranslateMessageGBS(GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA097D5C0 ; 265: int Obs_Pause(HObj hObj)
0998: 0xA097D6DC ; 266: int Obs_Resume(HObj hObj)
099C: 0xA097D43C ; 267: int Obs_Stop(HObj hObj)
;09A0:           ; 268: int Obs_Prepare(HObj hObj)
;09A4:           ; 269: int Obs_SetRenderOffset(HObj hObj,short x,short y)
09A8: 0xA097A640 ; 26A: int Obs_SetPosition(HObj hObj,int ms)
;9AC:            ; 26B: int Obs_Mam_SetPurpose(HObj hObj,int ms)
;9B0:            ; 26C: int Obs_Sound_SetVolumeEx(HObj hObj, char vol, char delta)
09B4: 0xA099EF1C ; 26D: int Obs_Sound_GetVolume(HObj hObj, char *vol)
0A04: 0xA86DA9E8 ; 281: char *RamIsRunJava()
;A08:            ; 282: char *RamIsRunCamera()
0A0C: 0xA095FF34 ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0AF8B33 ; 284: int IsGPRS()
;A14:            ; 285: int IsEDGE()
;A18:            ; 286: int GetSMSState()
;A1C:            ; 287: int BT_GetLocVisibility()
;A20:            ; 288: int GetCurrAudioPath()
0A24: 0xA12A18D1 ; 289: int isDecryption()
;A28:            ; 28A: char *RamIsFileCache()
0A58: 0xA08D1643 ; 296: void getProfileNamervn
0A8C: 0xA0C95BFB ; 2A3: void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0C9325F ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA0CF170D ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
;A98: ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA0C967F1 ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA0C93E2F ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA0C92177 ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0C920E9 ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0CBB169 ; 2AB: void *GetPopupUserPointer(void *gui)
;AB0: 0x         ; 2AC: __unknown int DeleteSMS(int index, short *del_cnt)
;AB4: 0x         ; 2AD: __unknown int SetSmsStatus(int index, int type)
0AB8: 0xA0C9724F ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA113D489 ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)
0AC0: 0xA0C97B2B ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
;AC4: 0x         ; 2B1: __unknown SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA134D5B5 ; 2B2: int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
;ACC: 0x         ; 2B3: __unknown NativeAbData *AllocNativeAbData(void)
;AD0: 0x         ; 2B4: __unknown int FreeNativeAbData(NativeAbData *ab_data)
;AD4: 0x         ; 2B5: __unknown int GetNativeAbDataType(NativeAbData *nab, int unk0)
;AD8: 0x         ; 2B6: __unknown WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
;ADC: 0x         ; 2B7: __unknown int GetNativeAbDataStatus(NativeAbData *nab, int _0)
;AE0: 0x         ; 2B8: __unknown int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
;AE4: 0x         ; 2B9: __unknown unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
;AE8: 0x         ; 2BA: __unknown void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
;AEC: 0x         ; 2BB: __unknown void *GetTabGUI(void *malloc_adr, void *mfree_adr)
;AF0: 0x         ; 2BC: __unknown void SetGUIDefinition(void *gui, const void *definition)
;AF4: 0x         ; 2BD: __unknown int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
;AF8: 0x         ; 2BE: __unknown int SetCursorTab(void *tab_gui, int n)
;AFC: 0x         ; 2BF: __unknown int UpdateTab1stItem(void *tab_gui, int unk_0)
;B00: 0x         ; 2C0: __unknown int GetCursorTab(void *tab_gui)
;B04: 0x         ; 2C1: __unknown void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA0BA47A5 ; 2C2: int GetSubprovider(WSHDR* ws)
0B0C: 0xA0BA49B9 ; 2C3: int GetRoamingState(); 
0B18: 0xA082B57B ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA082B5CD ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA082B9BF ; 2C8: int GetSecondsFromTime(TTime *time)
0B24: 0xA082B4B5 ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA082B5EF ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA082B9D1 ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds)
0B34: 0xA0825C8F ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA0825671 ; 2CE: int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA082B961 ; 2CF: int CmpTimes(TTime *time1, TTime *time2)
0B40: 0xA08256C1 ; 2D0: int GetDaysFromMonth(TDate *date)
0B44: 0xA08256A1 ; 2D1: int IsLeapYear(TDate *date)
0B48: 0xA0B958FB ; 2D2: StartNativeBrowserCore()
;B4C: 0x         ; 2D3: __unknown int GetFilledNAbDataCount(NativeAbData *nab)
;B50: 0x         ; 2D4: __unknown void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA0BAD9A5 ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA0CBBD87 ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA0CBC339 ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA0CBC2C3 ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
;B64: 0x         ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer)
;B68: 0x         ; 2DA: void *TViewGetUserPointer(void *gui)
0B6C: 0xA09D8B24 ; 2DB: void SendMedia(WSHDR *file, WSHDR *path)
	
;0B70: 0x        ; 2DC: void SaveMaxIllumination(int level)
;0B74: 0x        ; 2DD: int SetIlluminationoffTimeout(int time_sec)
0B78: 0xA0B8E2F3 ; 2DE: void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA0B8E30F ; 2DF: void IllumTimeRelease(int TimeMode, int Counter)
;B80:            ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA095233C ; 2E1: int GetExtUidByFileName_ws(WSHDR *path)
0B88: 0xA0C8CA47 ; 2E2: int wstrcmp(WSHDR *ws1, WSHDR *ws2)
;B8C:            ; 2E3: int fexists(WSHDR* FileName)
;B90:            ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword)
;B94:            ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char * entry,char *keyword)
;B98:            ; 2E6: int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword)
;B9C:            ; 2E7: int SettingsAE_GetFlag(int *res,int set,char * entry,char *keyword)
;BA0:            ; 2E8: int SettingsAE_Update(int val,int set,char * entry,char *keyword)
;BA4:            ; 2E9: int SettingsAE_Read(int *res,int set,char * entry,char *keyword)
;BA8:            ; 2EA: void* SettingsAE_GetEntryList(int set)
;BAC:            ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag)

0BB0: 0xA116B71C ; 2EC: int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA116B768 ; 2ED: int i2c_receive(I2C_MSG *msg)

;EP3

;Nucleus RTOS API

0C00: 0xA082AA60 ; 300:  NU_Create_Task
0C04: 0xA082AB7C ; 301:  NU_Delete_Task
0C08: 0xA082ABD8 ; 302:  NU_Reset_Task
0C0C: 0xA082ABF8 ; 303:  NU_Terminate_Task
0C10: 0xA082ACC0 ; 304:  NU_Resume_Task
0C14: 0xA082AD08 ; 305:  NU_Suspend_Task
0C18: 0xA082AD44 ; 306:  NU_Relinquish
0C1C: 0xA082AD68 ; 307:  NU_Sleep
0C20: 0xA0831050 ; 308:  NU_Change_Priority
0C24: 0xA0831068 ; 309:  NU_Change_Preemption
0C28: 0xA0831084 ; 30A:  NU_Change_Time_Slice
0C2C: 0xA08373F4 ; 30B:  NU_Check_Stack
0C30: 0xA0830CCC ; 30C:  NU_Current_Task_Pointer
0C34: 0xA082AE28 ; 30D:  NU_Established_Tasks
0C38: 0xA082B0FC ; 30E:  NU_Task_Information
0C3C: 0xA082AE50 ; 30E:  NU_Task_Pointers

0C40: 0xA082A678 ; 310:  NU_Create_Mailbox
0C44: 0xA082A6A4 ; 311:  NU_Delete_Mailbox
;C48:            ; 312:  NU_Reset_Mailbox
0C4C: 0xA082A6C4 ; 313:  NU_Send_To_Mailbox
;C50:            ; 314:  NU_Broadcast_To_Mailbox
0C54: 0xA082A728 ; 315:  NU_Receive_From_Mailbox
;C58:            ; 316:  NU_Established_Mailboxes
;C5C:            ; 317:  NU_Mailbox_Information
;C60:            ; 318:  NU_Mailbox_Pointers
0C64: 0xA0832F5C ; 319:  NU_Create_Queue
0C68: 0xA0832FFC ; 31A:  NU_Delete_Queue
;C6C:            ; 31B:  NU_Reset_Queue
;C70:            ; 31C:  NU_Send_To_Front_Of_Queue
0C74: 0xA083301C ; 31D:  NU_Send_To_Queue
;C78:            ; 31E:  NU_Broadcast_To_Queue
0C7C: 0xA08330C0 ; 31F:  NU_Receive_From_Queue

0C80: 0xA0833170 ; 320:  NU_Established_Queues
0C84: 0xA08331F4 ; 321:  NU_Queue_Information
0C88: 0xA0833184 ; 322:  NU_Queue_Pointers
;C8C:            ; 323:  NU_Create_Pipe
;C90:            ; 324:  NU_Delete_Pipe
;C94:            ; 325:  NU_Reset_Pipe
;C98:            ; 326:  NU_Send_To_Front_Of_Pipe
;C9C:            ; 327:  NU_Send_To_Pipe
;CA0:            ; 328:  NU_Broadcast_To_Pipe
;CA4:            ; 329:  NU_Receive_From_Pipe
;CA8:            ; 32A:  NU_Established_Pipes
;CAC:            ; 32B:  NU_Pipe_Information
;CB0:            ; 32C:  NU_Pipe_Pointers
0CB4: 0xA08300AC ; 32D:  NU_Create_Semaphore
0CB8: 0xA08300E4 ; 32E:  NU_Delete_Semaphore
;CBC:            ; 32F:  NU_Reset_Semaphore

0CC0: 0xA0830104 ; 330:  NU_Obtain_Semaphore
0CC4: 0xA0830154 ; 331:  NU_Release_Semaphore
;CC8:            ; 332:  NU_Established_Semaphores
;CCC:            ; 333:  NU_Semaphore_Information
;CD0:            ; 334:  NU_Semaphore_Pointers
0CD4: 0xA082F6EC ; 335:  NU_Create_Event_Group
0CD8: 0xA082F708 ; 336:  NU_Delete_Event_Group
0CDC: 0xA082F728 ; 337:  NU_Set_Events
0CE0: 0xA082F75C ; 338:  NU_Retrieve_Events
;CE4:            ; 339:  NU_Established_Event_Groups
;CE8:            ; 33A:  NU_Event_Group_Information
;CEC:            ; 33B:  NU_Event_Group_Pointers
0CF0: 0xA083109C ; 33C:  NU_Control_Signals
0CF4: 0xA08310BC ; 33D:  NU_Receive_Signals
0CF8: 0xA08310DC ; 33E:  NU_Register_Signal_Handler
0CFC: 0xA0831108 ; 33F:  NU_Send_Signals

0D00: 0xA082A790 ; 340:  NU_Create_Partition_Pool
0D04: 0xA082A814 ; 341:  NU_Delete_Partition_Pool
0D08: 0xA082A834 ; 342:  NU_Allocate_Partition
0D0C: 0xA082A898 ; 343:  NU_Deallocate_Partition
0D10: 0xA082A8D0 ; 344:  NU_Established_Partition_Pools
0D14: 0xA082A954 ; 345:  NU_Partition_Pool_Information
0D18: 0xA082A8E4 ; 346:  NU_Partition_Pool_Pointers
0D1C: 0xA082A384 ; 347:  NU_Create_Memory_Pool
0D20: 0xA082A414 ; 348:  NU_Delete_Memory_Pool
0D24: 0xA082A434 ; 349:  NU_Allocate_Memory
0D28: 0xA082A4C0 ; 34A:  NU_Deallocate_Memory
0D2C: 0xA082A4F8 ; 34B:  NU_Established_Memory_Pools
0D30: 0xA082A57C ; 34C:  NU_Memory_Pool_Information
0D34: 0xA082A50C ; 34D:  NU_Memory_Pool_Pointers
0D38: 0xA0837230 ; 34E:  NU_Control_Interrupts
0D3C: 0xA083725C ; 34F:  NU_Local_Control_Interrupts

0D40: 0xA0837278 ; 350:  NU_Restore_Interrupts
;D44:            ; 351:  NU_Setup_Vector
0D48: 0xA0830F5C ; 352:  NU_Register_LISR
0D4C: 0xA082ADC4 ; 353:  NU_Activate_HISR
0D50: 0xA082AB0C ; 354:  NU_Create_HISR
0D54: 0xA082ABB8 ; 355:  NU_Delete_HISR
0D58: 0xA0830CF4 ; 356:  NU_Current_HISR_Pointer
0D5C: 0xA082AE3C ; 357:  NU_Established_HISRs
0D60: 0xA082B01C ; 358:  NU_HISR_Information
0D64: 0xA082AEC0 ; 359:  NU_HISR_Pointers
0D68: 0xA083764C ; 35A:  NU_Protect
0D6C: 0xA08376D8 ; 35B:  NU_Unprotect
0D70: 0xA082B188 ; 35C:  NU_Create_Timer
0D74: 0xA082B1FC ; 35D:  NU_Delete_Timer
0D78: 0xA082B21C ; 35E:  NU_Reset_Timer
0D7C: 0xA082B280 ; 35F:  NU_Control_Timer

0D80: 0xA0831130 ; 360:  NU_Established_Timers
0D84: 0xA08311B4 ; 361:  NU_Timer_Information
0D88: 0xA0831144 ; 362:  NU_Timer_Pointers
0D8C: 0xA0837C5C ; 363:  NU_Set_Clock
0D90: 0xA0837C68 ; 364:  NU_Retrieve_Clock
0D94: 0xA0835540 ; 365:  NU_Release_Information
0D98: 0xA0834BD0 ; 366:  NU_License_Information
;D9C:            ; 367:  NU_Disable_History_Saving
;DA0:            ; 368:  NU_Enable_History_Saving
;DA4:            ; 369:  NU_Make_History_Entry
;DA8:            ; 36A:  NU_Retrieve_History_Entry
;DAC:            ; 36B:  NU_Create_Driver
;DB0:            ; 36C:  NU_Delete_Driver
;DB4:            ; 36D:  NU_Request_Driver
;DB8:            ; 36E:  NU_Resume_Driver
;DBC:            ; 36F:  NU_Suspend_Driver

;DC0:            ; 370:  NU_Established_Drivers
;DC4:            ; 371:  NU_Driver_Pointers
;DC8:            ; 372:  NU_IS_SUPERVISOR_MODE
0DCC: 0xA08370D8 ; 373:  NU_SUPERVISOR_MODE
0DD0: 0xA0837178 ; 374:  NU_USER_MODE
0DD4: 0xA86CDA3C ; 375:  NU_SUPERV_USER_VARIABLES

;<Reserved>

0E00: 0xA0CF0FC3 ; 380: GetClipBoard()
0E04: 0xA0CF0F9F ; 381: CopyWsToClipboard(WSHDR *src)
0E08: 0xA0CF0F59 ; 382: ClearClipboard(void)

0E0C: 0xA0CE4511 ; 383: int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *)
0E10: 0xA0CE6177 ; 384: int LCDRedrawLAYER(LCDLAYER *)
0E14: 0xA0824144 ; 385: GBSPROC *GetGBSProcAddress(short cepid)
0E18: 0xA0CE8D05 ; 386: void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2); 
0E1C: 0xA0CAC2A1 ; 387: LCDLAYER *GetLCDLAYERByCurCepID()
0E20: 0xA0C8F03B ; 388: void SetDepthBuffer(char depth); 
0E24: 0xA0C8EFF1 ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth); 
0E28: 0xA879F550 ; 838A: PCM_WAV_STRUCT *RamPCMWAVStruct()
0E2C: 0xA868AF98 ; 38B: char *RamLastStoreString()
;0E30:           ; 38C: int format(unsigned short drive, unsigned int *error);
;0E34:           ; 38D: int stat(int fhandler, FStat *fstat, unsigned int *error);
;0E38:           ; 38E: __arm void CreateICL(PGROUP *pg);
;0E3C:           ; 38F: PGroupProc *CreatePGroupRes(int mask, int unk_zero, TaskConfig *conf, int size);
;0E40:           ; 390: PGroupProc *PGroupCurrentTaskPointer();
;0E44:           ; 391: void *MemMBPAlloc(void *pool, int size);
;0E48:           ; 392: void MemMBPFree(void *pool, void *ptr);
;0E4C:           ; 8393: void *MopiResourcePool();
 
;0E50:           ; 394
;0E54:           ; 395
;0E58:           ; 396
;0E5C:           ; 397
;0E60:           ; 398
;0E64:           ; 399
;0E68:           ; 39A
;0E6C:           ; 39B
;0E70:           ; 39C
;0E74:           ; 39D
;0E78:           ; 39E
;0E7C:           ; 39F

;0E80:           ; 3A0
;0E84:           ; 3A1
;0E88:           ; 3A2
;0E8C:           ; 3A3: __thumb void SetMenuItemIconIMGHDR(void *gui, void *item, IMGHDR *img);
;0E90:           ; 3A4
;0E94:           ; 3A5: __thumb void DrawIMGHDR(int x, int y, IMGHDR *img);
;0E98:           ; 3A6
;0E9C:           ; 3A7: __thumb int GUI_NewTimer(void *gui);
;0EA0:           ; 3A8: __thumb int GUI_DeleteTimer(void *gui, int id);
;0EA4:           ; 3A9: __thumb void GUI_StartTimerProc(void *gui, int id, long timeout, GUI_TimerProc callback);
;EA8:            ; 3AA
;EAC:            ; 3AB
;EB0:            ; 3AC
;EB4:            ; 3AD
;EB8:            ; 3AE
;EBC:            ; 3AF

;0EC8:           ; 3B2: __arm WSHDR *GetLastAudioTrackDir();
;0ECC:           ; 3B3: __thumb IMGHDR *GetIMGHDRFromCanvasCache(unsigned int CanvasID);
;0ED0:           ; 3B4: __thumb GetDate_ws(WSHDR *ws, const TDate *date, unsigned int unk);
;0ED4:           ; 3B5: __thumb GetTime_ws(WSHDR *ws, const TTime *time, unsigned int unk);
;0ED8:           ; 3B6: __arm int Obs_SetTransparent(HObj obs, unsigned int unk_3_4_5);
;0F00:           ; 3C0: __thumb int ShowWaitBox(int flags, int message);
0F04: 0xA0C927B5 ; 3C1: __thumb int ShowPleaseWaitBox(int flags);
;0F08:           ; 3C2: __thumb int ShowPBarBox(int flags, int message, PBAR_DESC *pbar_desc, int initial_value, WSHDR *initial_ws);
;0F0C:           ; 3C3: __thumb int SetPBarValue(int gui_id, int value);
;0F10:           ; 3C4: __thumb int SetPBarText(int gui_id, WSHDR *ws);
;0F14:           ; 83C5: void *GetPBarProc3();
;0F18:           ; 3C6: __thumb void SetHeaderScrollText(void *header, const WSHDR *title, const void *malloc_fn, const void *mfree_fn);
;0F1C:           ; 3C7: __thumb void SetHeaderExtraText(void *header, const WSHDR *ws, const void *malloc_fn, const void *mfree_fn);
;0F20:           ; 3C8: __arm int GetMimeType(int uid, WSHDR *mime_type, int unk_0);
;0F24:           ; 3C9: __thumb int wstrncmp(const WSHDR *ws1, const WSHDR *ws2, size_t n);
;0F28:           ; 3CA: __thumb int wstricmp(const WSHDR *ws1, const WSHDR *ws2);
;0F2C:           ; 3CB: __thumb int wstrnicmp(const WSHDR *ws1, const WSHDR *ws2, size_t n);
;0F30:           ; 3CC: __arm int PersMenuCSM_Open(const WSHDR *file_name, const WSHDR *dir, int flag, int open_mode);
;0F34:           ; 3CD: __thumb int wstrtoupper(WSHDR *ws);
;0F38:           ; 3CE: __thumb int wstrtolower(WSHDR *ws);
;0F3C:           ; 3CF: __thumb int wstrcapitalize(WSHDR *ws);

;0F40:           ; 3D0: __thumb int ShowScreenSaverCodeProtection();
;0F44:           ; 3D1: __arm void MediaProc_LaunchLastPlayback();
;0F48:           ; 3D2: __thumb int GetScreenSaverType();
;0F4C:           ; 3D3: __thumb int IllumFilterSet(int flags, int unk);
;0F50:           ; 3D4: __thumb void DrawCroppedIMGHDR(int x, int y, int offset_x, int offset_y, int w, int h, int flags, const IMGHDR *img);
;0F54:           ; 3D5: __arm int BuildPath(WSHDR *ws, const WSHDR *file_name, const WSHDR *dir);
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

