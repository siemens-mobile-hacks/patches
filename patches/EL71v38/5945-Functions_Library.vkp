;EL71v38
;Библиотека функций
;Functions Library
;(c) avkiev
;(p) Bueffel,SMeeTBB,NForce,-=PaScaL=-,shadows
;Version: 070225
;PatchID: 5945
;Details: https://patches.kibab.com/patches/details.php5?id=5945
/*
25.02.07
Добавлено 1FB

24.02.07
Добавлено 1D5, 1F9

23.02.07
Добавлено 60, 73, 75, 79, 1C8,E1,1FF
Исправлено C6 

13.02.07
Добавлено 1E,1F,20,24,27,40,44,4B,4F,52,5A,5B,D5,9D,9C,DA,DB,CC,FF,132
Исправлено 08,42,7F,1B3,1B4

Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
В патче собрано 4096 самых часто-используемых функций, переменных и констант.
После применения патча для вызова (например) функции GetWeek достаточно написать "SWI 181".
Для получения в R0 адреса переменной RamCap нужно будет написать "SWI 200". На любом телефоне и на любой прошивке.
После портирования этого патча на определенную прошивку - для портирования других патчей
в большинстве случаев достаточно будет поменять только место врезки.
Для портирования этого патча на другие прошивки используйте Smelter - Инструменты - Библиотека функций.
*/
+0074000
#pragma enable old_equal_ff
0000: 0xA0002070   ;  00: SWI0
0004: 0xA0002070   ;  01: SWI1
0008: 0xA0002070   ;  02: SWI2
000C: 0xA0002070   ;  03: SWI3
0010: 0xA0002070   ;  04: SWI4
0014: 0xA0585B2D   ;  05: DecToHex
0018: 0xA01A5C18   ;  06: GetAkku
001C: 0xA006F061   ;  07: GetLP
0020: 0xA04B9724   ;  08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA054484C   ;  09: SwitchPhoneOff
0028: 0xA0568F94   ;  0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0569054   ;  0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0569184   ;  0C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0568EE8   ;  0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0568F18   ;  0E: fflush
003C: 0xA0568F48   ;  0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0568B8C   ;  10: mkdir
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA05689EC   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0568CE0   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ;  14: malloc(unsigned int size)
0054: 0xA0092F93   ;  15: mfree(void *)
0058: 0xA0FAE7C5   ;  16: sprintf(char *buf, const char *str, ...)
005C: 0xA0FB0249   ;  17: strcat(char *,const char *)
0060: 0xA0FB0269   ;  18: strchr(const char *,int)
0064: 0xA0FB028C   ;  19: strcmp(const char *,const char *)
0068: 0xA0FB0329   ;  1A: strcpy(char *dest,const char *source)
006C: 0xA0FB03A9   ;  1B: strlen(char *)
0070: 0xA04FCC75   ;  1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA04FCC29   ;  1D: wsInsertChar
078:  0xA094CF97   ;  1E: IMGHDR *GetPITaddr(int num)
07C:  0xA05C04D7   ;  1F: DrawMainScreen

0080: 0xA070897D   ;  20: DrawScreenSaver
0084: 0xA094D0BF   ;  21: GetImgHeight
0088: 0xA094D0CF   ;  22: GetImgWidth
008C: 0xA05BE7D5   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0A0C103   ;  24: DrawImage2
0094: 0xA05BDBCF   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A0C02D   ;  26: DrawImgBW
009C: 0xA05BDE0D   ;  27: AddIconToIconbar
;0A0:              ;  28: getEELiteMaxID
;0A4:              ;  29: getEEFullMaxID
00A8: 0xA04E9F00   ;  2A: int * GetEELiteBlockAddress(short blocknum)
;0AC:              ;  2B: getEELiteBlockSizeVersion
;0B0:              ;  2C: getEEFullBlockSizeVersion
;0B4:              ;  2D: StartWriteEELiteBlock
;0B8:              ;  2E: FinishWriteEELiteBlock
;0BC:              ;  2F: DeleteEELiteBlock

;0C0:              ;  30: WriteEELiteBlock
00C4: 0xA0FB04F1   ;  31: strrchr
00C8: 0xA059DA1C   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA05904FC   ;  33: PlaySound2
00D0: 0xA0B705B4   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: GetATCmdString
00DC: 0xA09A47F1   ;  37: OriginalATCGSN
;0E0:              ;  38: PostAtCommand
00E4: 0xA08B9771   ;  39: SendATAnswerStr
;00E8: 0xA0B977DC   ;  3A: mfree_high
00EC: 0xA0FAF52D   ;  3B: MemChr
00F0: 0xA0569094   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
;0F8:              ;  3E: LoadProcesses
00FC: 0xA0948121   ;  3F: GetPaletteAdrByColorIndex

0100: 0xA05A96DB   ;  40: GetVibraStatus
0104: 0xA08CACC3   ;  41: GetProvider
0108: 0xA066F057   ;  42: IsScreenSaver
010C: 0xA08D4A51   ;  43: IsUnlocked
0110: 0xA08CD8E5   ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA0594124   ;  4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0ACDAD0   ;  4B: StartMidlet
0130: 0xA09B47E1   ;  4C: GetMissedCallsCount
0134: 0xA0092531   ;  4D: GBS_StartTimerProc(void *htimer, long ms, void *func)
0138: 0xA094EB75   ;  4E: MessageBox_OK
013C: 0xA094EB93   ;  4F: MessageBox_Error

0140: 0xA094EBFD   ;  50: MessageBox_Question_Yes_No
0144: 0xA0D2345F   ;  51: GetNetAccessMode
0148: 0xA8D87EA0   ;  52: GetIlluminationDataTable
014C: 0xA0FAF551   ;  53: memcmp(void *m1,void *m2,int n)
0150: 0xA062822D   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FAFA0C   ;  58: ClearMemory
0164: 0xA0FAFA68   ;  59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA08D431B   ;  5A: KeypressOn
016C: 0xA08D442D   ;  5B: KeypressOff
0170: 0xA0621188   ;  5C: GetCPUClock()
0174: 0xA06F2BAB   ;  5D: GetCPULoad()
;178:              ;  5E: GetMMIMemUsed
017C: 0xA0092F9B   ;  5F: int GetFreeRamAvail()

0180: 0xA06EE61D   ;  60: ShowMainMenu
0184: 0xA0638AC7   ;  61: ShowNativeMenu
;188:              ; ! 62: SetVibraStatus
;18C:              ;  63: MS_Wallpaper_Flush
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA00976FF   ;  69: LockSched(void)
01A8: 0xA009777B   ;  6A: UnlockSched(void)
01AC: 0xA0568A64   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0568AE4   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA05689AC   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0CD7EFD   ;  6E: IsCalling
;1BC:              ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0602988   ;  70: int * GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0CD86FF   ;  73: GetTypeOfCall
;1D0:              ;  74: GetFunctionPointer
01D4: 0xA094CB8D   ;  75: StoreXYWHtoRECT
;1D8:              ;  76: SetWindowText
;1DC:              ;  77: set2color_byPaletteAdr
;1E0:              ;  78: GetTimeFormat
01E4: 0xA08D3B6D   ;  79: DrawObject
;1E8:              ;  7A: ClearWindowBuffer
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA04AFD9F   ;  7C: SetVibration(unsigned int power)
01F4: 0xA0CD78BF   ;  7D: IsIncognitoCall
01F8: 0xA0CD6F5D   ;  7E: Rand
01FC: 0xA069D9D4   ;  7F: IsPlayerOn

0200: 0xA0A81AB9   ;  80: ShowCallList(int list, int zero)
0204: 0xA0FAFDBC   ;  81: HexToDec
0208: 0xA069DC7C   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0568D58   ;  84: int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
;214:              ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
0220: 0xA053F790   ;  88: GetAccessoryType
0224: 0xA08D6CEC   ;  89: GetLangMesIntoWS
0228: 0xA056893C   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA05691F0   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA05025BC   ;  8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05BFB39   ;  8D: GetProfileName
0238: 0xA0568BF4   ;  8E: int fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0568C78   ;  8F: int rmdir(const char * cDirectory, unsigned int *ErrorNumber)

0240: 0xA056910C   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0568B24   ;  91: int isdir(const char * cDirectory, unsigned int *ErrorNumber)
0248: 0xA0B9C550   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0544858   ;  93: RebootPhone
0250: 0xA0502858   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA0502730   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA01B0597   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: 
;268:              ;  9A: 
;26C:              ;  9B: 
0270: 0xA066F693   ;  9C: CloseScreensaver
0274: 0xA066AAEB   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA093ECF1   ;  A0: wsprintf(WSHDR *,const char *format,...)
;284: 0xA04FCB66   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA05696D4   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA093F7B5   ;  A4: AllocWS_2(int len)
0294: 0xA04FC321   ;  A5: FreeWS_2(WSHDR *wshdr)
;298:              ;  A6: void ResetGPRSTraffic()
029C: 0xA0D172BB   ;  A7: char IsGPRSEnabled()
02A0: 0xA0CD90BD   ;  A8: char IsGPRSConnected()
02A4: 0xA08D5237   ;  A9: void KbdLock()
02A8: 0xA0A1C6AD   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002040   ;  AB: SWI_AB
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
;2BC:              ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
;2CC:              ;  B3: Seconds2iTime
02D0: 0xA08D01BF   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA0584AEF   ;  B5: GetWeek(TDate*)
02D8: 0xA05A8633   ;  B6: GetProfile()
02DC: 0xA05A8693   ;  B7: SetProfile(char)
02E0: 0xA0FAFBDC   ;  B8: dwMODdw
02E4: 0xA08D4D1B   ;  B9: void KbdUnlock
02E8: 0xA0092F5D   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FAFBC4   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FAFCB4   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FAFD78   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA01A1CF8   ;  C6: unsigned short GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D83788   ;  C8: RamCap
0324: 0xA8D837BA   ;  C9: RamLS
0328: 0xA8EF80BE   ;  CA: RamNet
;32C:              ; ! CB: 
0330: 0xA8EB38FC   ;  CC: RamMissedCalls
;334:              ;  CD: RamMissedSMS
;338:              ;  CE: RamDateTime
033C: 0xA03A6874   ;  CF: RamAlarm

0340: 0xA8E2561C   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8F4E4A8   ;  D4: RamMissedMes
0354: 0xA8DF3DD8   ;  D5: RamIsLocked
;358:              ;  D6: RamNetOnline
035C: 0xA8E6870C   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8E687A8   ;  DA: RamIsShutdown
036C: 0xA8F57230   ;  DB: RamNotOnMainscreen
;370:              ;  DC: RamRandSeed
;0374: 0xAD2B3D58   ;  DD: RamCurrentTrack
0378: 0xA8E34374   ;  DE: RamIsSimPresent
037C: 0xA8DF3DB0   ;  DF: RamPressedKey

0380: 0xA8DA8D40   ;  E0: RamScreenBuffer
0384: 0xA8F02B2C   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8D80010   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000268   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

;3C0:              ; ! F0: Pic_AccuGraph
03C4: 0xA05BE811   ;  F1: BuildCanvas
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: 
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: AddrLibrary()

0400: 0xA0091EAB   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: GBS_AcceptMessage(void);
040C: 0xA009153B   ; 103: GBS_ClearMessage(void);
0410: 0xA00917B9   ; 104: GBS_PendMessage(GBS_MSG *);
0414: 0xA0092221   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E8E630   ; 106: CSM_root()
041C: 0xA0946A4F   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0946A61   ; 108: FindCSMbyID(int id)
0424: 0xA0946B2B   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA05BCCE9   ; 10F: freeUSSD()

0440: 0xA0585F05   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA05BCD25   ; 111: GetTypeUSSD()
0448: 0xA05BCD35   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FB0379   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FB03F5   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FB0425   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FB0475   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FB04F1   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FB0531   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FB0559   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FB05D5   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FAE771   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FAF551   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FAF9C4   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FAFA68   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA04FCB67   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA04FCB89   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA04FCBAD   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA04FCBE1   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA04FC3EF   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA093ECF1   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA093F7B5   ; 125: AllocWS(int len)
0498: 0xA04FCDD9   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA04FC9F7   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA04FCA71   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA04FC321   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA08D3B6D   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA0946C07   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA0946C0F   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA0946C17   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA0948121   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA0948145   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0948155   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0948173   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FAFB21   ; 132: void *memmove(void *dest,const void *source,int cnt)!!!!!!!
04CC: 0xA094CB8D   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA094CBA3   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA094F4FB   ; 135: IsGuiOnTop(int id)
04D8: 0xA094F61B   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA094F62B   ; 137: CreateGUI(void *gui)
04E0: 0xA094F639   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA094F673   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA094F683   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA094F693   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA094F6A1   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA094F6AF   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA094F6BF   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA094F753   ; 13F: DirectRedrawGUI(void)

0500: 0xA094F76B   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA094F75F   ; 141: PendedRedrawGUI(void)
0508: 0xA0A09B9B   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA00976FF   ; 146: __arm void LockSched(void);
051C: 0xA009777B   ; 147: __arm void UnlockSched(void);
0520: 0xA094EB75   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA094A44D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA094866D   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA09485D7   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA094A49B   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA094F509   ; 14D: GetTopGUI(void)
0538: 0xA0A21FE9   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A22035   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A0BAAF   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0A0C003   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA094E6BB   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091259   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: KillGBSproc(int cepid)
0554: 0xA013247D   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0131839   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA01332F1   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA013170D   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA01325BB   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0131E95   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA013223B   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0132EAB   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0132EED   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0131B31   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA0131DAB   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0132A43   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E37DC   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA122C05C   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A160BB   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A154F9   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A15809   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A16257   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A12E6D   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A1C16B   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A1C101   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A1C10D   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0568DD0   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA05695E0   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA09812C5   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA08EBE87   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)??????????
05BC: 0xA08EC7D5   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0926FA9   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)
05CC: 0xA0A589F5   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A58EED   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A58CF1   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A59221   ; 176: int closesocket(int socket)
05DC: 0xA0A59129   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A59313   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A59781   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A603F1   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A603FD   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EEFD5C   ; 17C: int socklasterr(void)
05F4: 0xA094F6CF   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA094F6DF   ; 17E: void RestartIDLETMR(void)
05FC: 0xA094F6EB   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A1C005   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A1BF5D   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A1BFA5   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A1962F   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A15843   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA096A15D   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA096B26D   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: int ScreenW(void)
0624: 0x00000140   ; 189: int ScreenH(void)
0628: 0x00000020   ; 18A: int HeaderH(void)
062C: 0x00000020   ; 18B: int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09FEC38   ; 18D: int available0(int sock)
0638: 0xA0D17255   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0952EB7   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0954621   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA094F7E1   ; 196: void RefreshGUI(void)
065C: 0xA0954681   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0954799   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA09545F3   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0953F93   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A1B9E9   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA04D44BC   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA04D4454   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012E0E1   ; 19F: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012E217   ; 1A0: int inflate (z_streamp strm, int flush)
0684: 0xA012F053   ; 1A1: int inflateEnd (z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *) 
069C: 0xA092C0B1   ; 1A7: char* Get_CC_NC();
06A0: 0xA0132341   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp  error_ptr,png_error_ptr error_fn, png_error_ptr  warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr  free_fn);
06A4: 0xA0133393   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr  read_data_fn);
06A8: 0xA0132A0B   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA01334AD   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0131D99   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32  flag);
06B4: 0xA01334AD   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA0134FB9   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA0133491   ; 1AF: void png_set_strip_16(png_structp png_ptr);

06C0: 0xA0134F4F   ; 1B0: void png_set_packing(png_structp png_ptr); 
06C4: 0xA01334E5   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA013176D   ; 1B2: int png_check_sig(png_bytep sig, int num);
06CC: 0xA0A0D9EB   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen);
06D0: 0xA0A0B97B   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush);
06D4: 0x00000002   ; 1B5: int isnewSGold(void);
06D8: 0xA0A5A1F5   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA0973EED   ; 1B7: unsigned int str2ip(const char *);
;6E0:              ; 1B8: void *EXT_TOP(void);
;6E4:              ; 1B9: void *PNG_TOP(void);
;6E8:              ; 1BA: void *LIB_TOP(void);
;6EC:              ; 1BB: void *DATA_N_SFB(void);
06F0: 0xA0F2ECCB   ; 1BC: void SHA1_Init(SHA_CTX *c);
06F4: 0xA0F2E9AF   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0F2EBAB   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0E74891   ; 1BF: RSA * RSA_new_method(RSA_METHOD *method);

0700: 0xA0E7491F   ; 1C0: void RSA_free (RSA *r);
0704: 0xA0E74AEB   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int  *siglen, RSA *rsa);
0708: 0xA0E71083   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA0950E2D   ; 1C3: void SetMenuItemCount(void *gui,int n);
0710: 0xA0950D95   ; 1C4: void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A31B48   ; 1C5: int GetFontYSIZE(int font); 
0718: 0xA0A1BF8D   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A1BF99   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A1640D   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA0A15493   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA0A15487   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA0A1547B   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA0A15465   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA0A1544D   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA0A15535   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
;073C: 0x   ; 1CF: __arm REGEXPLEXT *get_regextpnt_by_uid(int uid);
;0740: 0x   ; 1D0: __thumb int GetExtUid_ws(WSHDR * ext);
0744: 0xA0A1C12D   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0A1C139   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0A1BFD5   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA0A1BFE1   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA04E3AD0   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
;758:              ; 1D6: 
;75C:              ; 1D7: 
;760:              ; 1D8: 
;764:              ; 1D9: 
;768:              ; 1DA: 
;76C:              ; 1DB: 
;770:              ; 1DC: 
;774:              ; 1DD: 
;778:              ; 1DE: 
;77C:              ; 1DF: 

;780:              ; 1E0: 
;784:              ; 1E1: 
;788:              ; 1E2: 
;78C:              ; 1E3: 
;790:              ; 1E4: 
;794:              ; 1E5: 
;798:              ; 1E6: 
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: SendMP_cmd(cmd,substract);
;7E8:              ; 1FA: 
07EC: 0xA8D9F369   ; 1FB:char *RamMediaIsPlaying()
;7F0:              ; 1FC: 
;7F4:              ; 1FD: 
;7F8:              ; 1FE: 
07FC: 0xA06EE455   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

