;S68v47
;Эльфпак
;ElfPack
;(c) Rst7/CBSIE, BoBa
;(r) den11111
;(p) ~jhellico, klaud, inquis
;Version: 2.3
;PatchID: 7866
;Details: https://patches.kibab.com/patches/details.php5?id=7866
/*

*/
;ELFpack v2.3UAFIX (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 26.07.2007
;S68v47
+0074000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 00: SWI0
0004: 0xA0002070   ; 01: SWI1
0008: 0xA0002070   ; 02: SWI2
000C: 0xA0002070   ; 03: SWI3
0010: 0xA0002070   ; 04: SWI4
0014: 0xA023A305   ; 05: DecToHex
0018: 0xA016DDF4   ; 06: GetAkku
001C: 0xA006F061   ; 07: GetLP
0020: 0xA0179E84   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA01FC768   ; 09: SwitchPhoneOff
0028: 0xA021D978   ; 0A: fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA021DA38   ; 0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA021DB68   ; 0C: fwrite(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA021D8CC   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA021D8FC   ; 0E: fflush
003C: 0xA021D92C   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA021D570   ; 10: mkdir
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA021D3D0   ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA021D6C4   ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094084   ; 14: malloc(unsigned int size)
0054: 0xA0093ED0   ; 15: mfree(void *)
0058: 0xA0FBED81   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA0FC0751   ; 17: strcat(char *,const char *)
0060: 0xA0FC0771   ; 18: strchr(const char *,int)
0064: 0xA0FC0794   ; 19: strcmp(const char *,const char *)
0068: 0xA0FC0831   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA0FC08B1   ; 1B: strlen(char *)
0070: 0xA01B9FA1   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA01B9F55   ; 1D: wsInsertChar
0078: 0xA07FB3C1   ; 1E: GetPITaddr
;07C:              ; 1F: DrawMainScreen

;080:              ; 20: DrawScreenSaver
0084: 0xA07FB4EB   ; 21: GetImgHeight
0088: 0xA07FB4FB   ; 22: GetImgWidth
008C: 0xA0267D01   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
;090:              ; 24: DrawImage2
0094: 0xA0267263   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA087B289   ; 26: DrawImgBW
009C: 0xA0267489   ; 27: AddIconToIconbar
00A0: 0xA0FD2E90   ; 28: double fp_sint2fp(signed int i)
;0A4:              ; 29: getEEFullMaxID
00A8: 0xA01A848C   ; 2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0FD2D30   ; 2B: signed int fp_fp2sint(double f)
00B0: 0xA01A7B6C   ; 2C: getEEFullBlockSizeVersion(int block, *buf1, *buf2)
00B4: 0xA0FD20F0   ; 2D: double fp_add(double addend1, double addend2)
00B8: 0xA0FD3050   ; 2E: double fp_mul(double factor1, double factor2)
00BC: 0xA0FD2704   ; 2F: double fp_div(double divisor, double divident)
;0C0:              ; 30: WriteEELiteBlock
00C4: 0xA0FC09F9   ; 31: strrchr
00C8: 0xA024D5C8   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0243FA8   ; 33: PlaySound2
00D0: 0xA098182C   ; 34: PlaySoundLoop
;0D4:              ; 35: AlarmClockRing
;0D8:              ; 36: GetATCmdString
00DC: 0xA02473A0   ; 37: void Ringtones_SetState(unsigned char state
00E0: 0xA02F8CD3   ; 38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA02F88E5   ; 39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA02F6877   ; 3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FBFA35   ; 3B: MemChr
00F0: 0xA021DA78   ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ; 3D: editOrNewTXTModule
00F8: 0xA02F8371   ; 3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int 
00FC: 0xA07F6725   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA0256041   ; 40: GetVibraStatus
0104: 0xA079F0EB   ; 41: GetProvider
0108: 0xA0E97857   ; 42: IsScreenSaver
010C: 0xA07A7047   ; 43: IsUnlocked
;110:              ; 44: TempLigntOn
0114: 0xA006F241   ; 45: GetWavLen
;118:              ; 46: HasNewSMS
;11C:              ; 47: HasFlashSMS
;120:              ; 48: ReadNewSMS
;124:              ; 49: ReadFlashSMS
0128: 0xA0245DD8   ; 4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0908C68   ; 4B: StartMidlet
0130: 0xA082D7D5   ; 4C: GetMissedCallsCount
0134: 0xA00931E8   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA07FCF55   ; 4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA07FCF65   ; 4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA07FCFCF   ; 50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0B93043   ; 51: GetNetAccessMode
0148: 0xA8D07E18   ; 52: GetIlluminationDataTable
014C: 0xA0FBFA59   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA0298FA9   ; 54: StrToInt
;154:              ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
;15C:              ; 57: IsCallAfterTimerStillRunning
0160: 0xA0FBFECC   ; 58: ClearMemory
0164: 0xA0FBFF70   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA07A6911   ; 5A: KeypressOn(int key)
016C: 0xA07A6A23   ; 5B: KeypressOff(int key
0170: 0xA0291EE4   ; 5C: GetCPUClock()
0174: 0xA031A667   ; 5D: GetCPULoad()
0178: 0xA031A635   ; 5E: GetMMIMemUsed
017C: 0xA0094D58   ; 5F: int GetFreeRamAvail()

0180: 0xA0316231   ; 60: ShowMainMenu
0184: 0xA02A567B   ; 61: ShowNativeMenu
0188: 0xA0256009   ; 62: SetVibraStatus
018C: 0xA0268A81   ; 63: void MMI_CanvasBuffer_FlushV(int CanvasID
;190:              ; 64: TriggerUpdate
;194:              ; 65: EndCall
;198:              ; 66: EndCallBusy
;19C:              ; 67: IsDirectCallActive
;1A0:              ; 68: GetScreenSaverRAM
01A4: 0xA009A9EC   ; 69: LockSched(void)
01A8: 0xA009AAD8   ; 6A: UnlockSched(void)
01AC: 0xA021D448   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA021D4C8   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA021D390   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0B321A1   ; 6E: int IsCalling()
01BC: 0xA07D73AC   ; 6F: void RefreshGPRSTraffic()

01C0: 0xA07D73DC   ; 70: int *GetGPRSTrafficPointer()
;1C4:              ; 71: DrawRoundRect
;1C8:              ; 72: SetCurrentSecondOfCall
01CC: 0xA0B329A3   ; 73: GetTypeOfCall
01D0: 0xA02A083D   ; 74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA0268F99   ; 75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA0268F49   ; 76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ; 77: set2color_byPaletteAdr
01E0: 0xA07A4A8D   ; 78: GetTimeFormat
01E4: 0xA07A61E9   ; 79: DrawObject
01E8: 0xA07FAF69   ; 7A: UpdateDisplayByLayerPtr(LCD_Layer *)
;1EC:              ; 7B: GetProfileFilter
01F0: 0xA0171747   ; 7C: SetVibration(unsigned int power)
01F4: 0xA0B31B63   ; 7D: IsIncognitoCall
01F8: 0xA0B31201   ; 7E: Rand
01FC: 0xA02EE4D5   ; 7F: IsPlayerOn

0200: 0xA04CA575   ; 80: ShowCallList(int list, int zero)
0204: 0xA0FC02C4   ; 81: HexToDec
0208: 0xA02EE5F1   ; 82: GetCurrentTrackFilename
;20C:              ; 83: GetPathOfFoundFile
0210: 0xA021D73C   ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA023A65D   ; 85: StrCmpNoCase
;218:              ; 86: ReadEEPROMData
;21C:              ; 87: WriteEEPROMData
0220: 0xA01F13D8   ; 88: GetAccessoryType
0224: 0xA07A931C   ; 89: GetLangMesIntoWS
0228: 0xA021D320   ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA021DBD4   ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA026F001   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA02D0A4F   ; 8D: GetProfileName
0238: 0xA021D5D8   ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA021D65C   ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA021DAF0   ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA021D508   ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA08636F8   ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA01FC774   ; 93: RebootPhone
0250: 0xA026F19D   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA026F0DF   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA027E60B   ; 96: GetWavLenByContent
025C: 0xA006F261   ; 97: CreatePath
0260: 0xA006F211   ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ; 99: 
;268:              ; 9A: 
;26C:              ; 9B: 
;270:              ; 9C: 
0274: 0xA02D1BB3   ; 9D: GetMissedEventsPtr
0278: 0xA006F2B1   ; 9E: int GetMissedEventCount(unsigned int Event)
;27C:              ; 9F: DrawRect
0280: 0xA07EE049   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA01B9E93   ; A1: wstrcpy
;288:              ; A2: Unicode_GetCharByPosition
028C: 0xA021E0B8   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07EEB0D   ; A4: AllocWS_2(int len)
0294: 0xA01B964D   ; A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA07D7384   ; A6: void ResetGPRSTraffic()
029C: 0xA0B86EAD   ; A7: char IsGPRSEnabled()
02A0: 0xA0B33361   ; A8: char IsGPRSConnected()
02A4: 0xA07A782F   ; A9: void KbdLock()
02A8: 0xA088B695   ; AA: char *GetCurrentLocale()
02AC: 0xA0002070   ; AB: SWI_AB
;2B0:              ; AC: DrawText
;2B4:              ; AD: StrAnsi2Uni
;2B8:              ; AE: StrUni2Ansi
02BC: 0xA031A431   ; AF: Hex2Int

;2C0:              ; B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
;2C8:              ; B2: GetBuildCanvas
02CC: 0xA006F551   ; B3: Seconds2iTime
02D0: 0xA07A3603   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA02392C7   ; B5: GetWeek(TDate*)
02D8: 0xA025580F   ; B6: GetProfile()
02DC: 0xA025586F   ; B7: SetProfile(char)
02E0: 0xA0FC00E4   ; B8: dwMODdw
02E4: 0xA07A7313   ; B9: void KbdUnlock
02E8: 0xA0094090   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC00CC   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC01BC   ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FC0280   ; BD: int DivBy10(int divident)
02F8: 0xA0060C91   ; BE: RunScaner
02FC: 0xA0063001   ; BF: SpellTime

;300:              ; C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
;308:              ; C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
0314: 0xA02D1B5B   ; C5: char IsIdleUiOnTop()
0318: 0xA016A540   ; C6: char GetAkkuCapacity()
;31C:              ; C7: SWI_C7
0320: 0xA8D036D6   ; C8: RamCap
0324: 0xA8D036FA   ; C9: RamLS
0328: 0xA8E28BCA   ; CA: RamNet
032C: 0xA8D73CA0   ; CB: RamRingtoneStatus
0330: 0xA8DE365C   ; CC: RamMissedCalls
;334:              ; CD: RamMissedSMS
0338: 0xA8DA850C   ; CE: RamDateTime
;33C:              ; CF: RamAlarm

0340: 0xA8D64E7C   ; D0: RamAccPoint
;344:              ; D1: RamScreensaver
;348:              ; D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
0350: 0xA8DCD358   ; D4: RamMissedMes
0354: 0xA8D338D4   ; D5: RamIsLocked
0358: 0xA8DA68F0   ; D6: RamNetOnline
035C: 0xA8DA79CC   ; D7: RamScreenBrightness
;360:              ; D8: RamMenuAnywhere
;364:              ; D9: RamShutdownMode
0368: 0xA8DA7A68   ; DA: RamIsShutdown
036C: 0xA8E81A74   ; DB: RamMainscreenAccuIcon
0370: 0xA8DC6A58   ; DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA8D7302C   ; DE: RamIsSimPresent
037C: 0xA8D338AC   ; DF: RamPressedKey

0380: 0xA8D282C0   ; E0: RamScreenBuffer
0384: 0xA8E32B70   ; E1: unsigned int RamMPlayer_CtrlCode()
;388:              ; E2: RamKeyBuffer
;38C:              ; E3: RamProfileNum
0390: 0xA8D80010   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000260   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
;3AC:              ; EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B0   ; EF: Pic_Calendar

03C0: 0x00001200   ; F0: Pic_AccuGraph
03C4: 0xA02CF771   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
03D4: 0xA8D28214   ; F5: Ram_LCD_Overlay_Layer
03D8: 0xA8DA8010   ; F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ; F7: 
;3E0:              ; F8: Additional_PIT_address
;3E4:              ; F9: Additional_PIT_start
;3E8:              ; FA: Additional_PIT_end
;3EC:              ; FB: 
;3F0:              ; FC: PictureRelocationTable
;3F4:              ; FD: PictureRelocationBase
;3F8:              ; FE: NextPictureMagic
03FC: 0xA0074000   ; FF: AddrLibrary()

0400: 0xA0092A04   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA00918C0   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009200C   ; 102: GBS_AcceptMessage(void)
040C: 0xA0091D14   ; 103: GBS_ClearMessage(void)
0410: 0xA0091EF8   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092EB0   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB366C   ; 106: CSM_root()
041C: 0xA07F50D7   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA07F50E9   ; 108: FindCSMbyID(int id)
0424: 0xA07F51A5   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA0265F49   ; 10F: freeUSSD()

0440: 0xA023A70D   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA0265F85   ; 111: GetTypeUSSD()
0448: 0xA0265F95   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FC0881   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FC08FD   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC092D   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC097D   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC09F9   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FC0A39   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FC0A61   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC0ADD   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FBED2D   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FBFA59   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FBFECC   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FBFF70   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA01B9E93   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01B9EB5   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01B9ED9   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01B9F0D   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01B971B   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA07EE049   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA07EEB0D   ; 125: AllocWS(int len)
0498: 0xA01BA105   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA01B9D23   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01B9D9D   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01B964D   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA07A61E9   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA07F5281   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA07F5289   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA07F5291   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA07F6725   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA07F6749   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA07F6759   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA07F6777   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC0029   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07FAFBD   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA07FAFD3   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA07FD8BF   ; 135: IsGuiOnTop(int id)
04D8: 0xA07FD9E3   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA07FD9F3   ; 137: CreateGUI(void *gui)
04E0: 0xA07FDA01   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA07FDA3B   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA07FDA4B   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA07FDA5B   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA07FDA69   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA07FDA77   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA07FDA87   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA07FDB1B   ; 13F: DirectRedrawGUI(void)

0500: 0xA07FDB33   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA07FDB27   ; 141: PendedRedrawGUI(void)
0508: 0xA0878E33   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0093288   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B08C   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0098A74   ; 145: GBS_GetCurCepid(void)
0518: 0xA009A9EC   ; 146: LockSched_2(void)
051C: 0xA009AAD8   ; 147: UnlockSched_2(void)
0520: 0xA07FCF39   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA07F8A3D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA07F6C71   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA07F6BDB   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA07F8A87   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA07FD8CD   ; 14D: GetTopGUI(void)
0538: 0xA0890FF5   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0891041   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA087AD0B   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA087B25F   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA07FCAD7   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091778   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA00989EC   ; 154: KillGBSproc(int cepid)
0554: 0xA012EB99   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA012DF55   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA012FA0D   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA012DE29   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA012ECD7   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA012E5B1   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA012E957   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA012F5C7   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA012F609   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA012E24D   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA012E4C7   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA012F15F   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E1D0C   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC0CE8   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA08851D3   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0884611   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0884921   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA088536F   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0881F99   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA088B277   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA088B20D   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA088B219   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA021D7B4   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA021DFC4   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA047D8F4   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0449120   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0449F94   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA07DAEE5   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)
05CC: 0xA0B468D1   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0B46DC9   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0B46BCD   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0B470FD   ; 176: int closesocket(int socket)
05DC: 0xA0B47005   ; 177: int shutdown(int socket,int how)
05E0: 0xA0B471EF   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0B4765D   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0B4E2CD   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0B4E2D9   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E1FA54   ; 17C: int socklasterr(void)
05F4: 0xA07FDA97   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA07FDAA7   ; 17E: void RestartIDLETMR(void)
05FC: 0xA07FDAB3   ; 17F: void DisableIDLETMR(void)

0600: 0xA088B111   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA088B069   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA088B0B1   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA088AB01   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA088495B   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0092534   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0B130DD   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0B141ED   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009AF14   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA086F2E8   ; 18D: int available0(int sock)
0638: 0xA0B86E47   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0801237   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A0C4   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A228   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009A594   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009A5F0   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009A6F8   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA08029A1   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA07FDBA9   ; 196: void RefreshGUI(void)
065C: 0xA0802A01   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0802B19   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0802973   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0802313   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA088AAF5   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA0194154   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01940EC   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012A7FD   ; 19F: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012A933   ; 1A0: int inflate (z_streamp strm, int flush)
0684: 0xA012B76F   ; 1A1: int inflateEnd (z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA00932F8   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA07DFB39   ; 1A7: char* Get_CC_NC()
06A0: 0xA012EA5D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA012FAAF   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA012F127   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA012FBC9   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA012E4B5   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA012FBC9   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01316D5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA012FBAD   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA013166B   ; 1B0: void png_set_packing(png_structp png_ptr);
06C4: 0xA012FC01   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA012DE89   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA087CB7B   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pe
06D0: 0xA087ABD7   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush) 
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0B480D1   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0B1CE5D   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F3D5A7   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3D28B   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3D487   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0EC8E0D   ; 1BF: RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0EC8E9B   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0EC9067   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0EC55FF   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA07FF1C5   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA07FF12D   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA08A0810   ; 1C5: int GetFontYSIZE(int font) 
0718: 0xA088B099   ; 1C6: EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA088B0A5   ; 1C7: EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0885525   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA08845AB   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA088459F   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0884593   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA088457D   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0884565   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA088464D   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA026EE27   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA026ECDF   ; 1D0: GetExtUid_ws(WSHDR * ext)
0744: 0xA088B239   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA088B245   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA088B0E1   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA088B0ED   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01A1E50   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA012FBC9   ; 1D6: png_set_gray_1_2_4_to_8
075C: 0xA0131737   ; 1D7: png_set_invert_mono
0760: 0xA088B141   ; 1D8: EDIT_IsMarkModeActive
0764: 0xA088B159   ; 1D9: EDIT_GetMarkedText(void *gui,WSHDR *dest) 
0768: 0xA04582B9   ; 1DA: SendSMS
076C: 0xA8E781EC   ; 1DB: *IncommingPDU
0770: 0xA01B9817   ; 1DC: wstrchr
0774: 0xA01B9839   ; 1DD: wstrrchr
0778: 0xA088B201   ; 1DE: EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA088B2AF   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA0804693   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA07A62ED   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01BA3E9   ; 1E2: void ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA01BA4A1   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA07FBDDB   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA088B361   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA08016F1   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n) 
079C: 0xA0939D78   ; 1E7: GetLastJavaApplication
07A0: 0xA0876384   ; 1E8: int IsNoJava() 
;7A4:              ; 1E9: 
07A8: 0xA07FBA8F   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8DC6F1E   ; 1EB: char *RAM_IMSI()
07B0: 0xA07FBA93   ; 1EC: void FreeDynIcon(int picture) 
07B4: 0xA07FBBF3   ; 1ED: int IsDynIconBusy(int picture)              
;7B8:              ; 1EE: 
07BC: 0xA07FBAF5   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap) 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
07C8: 0xA01A19DC   ; 1F2: _config_IsCheckboxOff
07CC: 0xA00A8474   ; 1F3: GetSessionAge
07D0: 0xA8DC72E3   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FC0335   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA07FBC3F   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA02EE453   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA8D1F2FC   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA07F51DF   ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA087ABBB   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
07FC: 0xA031606B   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA087B385   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0881347   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA087CA2B   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0879A43   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0810: 0xA0879A43   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA087AB95   ; 205: SetProp2Square_v1
0818: 0xA0FBFDF1   ; 206: void srand(unsigned int seed)
081C: 0xA0880C3B   ; 207: DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA07A630B   ; 208: Get_WS_width(*ws, font)
824: 0xA07F511D    ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
828: 0xA088B195    ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
82C: 0xA088B1AD    ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
830: 0xA088B1C5    ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
834: 0xA088B1DD    ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA08848DB   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA08847C1   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)
0840: 0xA07FD8B9   ; 210: int GetCurGuiID(void)
;0844:             ; 211: GBS_Cmd_4209_RefreshScreensaver
;0848: 0xA0942D28   ; 212: __swi __arm int CardExplGetCurItem(void *csm);
;084C: 0x          ; 213: __swi __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA01B9F35   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA01B9FC5   ; 215:  __swi __arm void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA07EE0E3   ; 216:  __swi __arm void wstrcarprintf(WSHDR *,const char *format,...);
085C: 0xA04DFFC1   ; 217: __swi __arm int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA0805933   ; 218 __swi __arm void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA0805D5B   ; 219: __swi __arm void *AllocMLMenuItem(void *data);
0868: 0xA088B2CD   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA088B2D9   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA088B315   ; 21C: __swi __arm int EDIT_IsBusy(void *gui);
0874: 0xA07D93FD   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);
0878: 0xA07FDAF3   ; 21E: __thumb void FocusGUI(int id);
087C: 0xA07FDB03   ; 21F: __thumb void UnfocusGUI(void);
;880:              ; 220:
0884: 0xA0291EC4   ; 221: SetCpuClockLow(2)
0888: 0xA0291EAC   ; 222: SetCpuClockTempHi(2)
0894: 0xA02466F4   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA0247164   ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA0247204   ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA0247234   ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA0FC0D10   ; 229: __arm void longjmp(jmp_buf, int);
#pragma disable old_equal_ff
+0

;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
0x000745C4: 8C8607A0788607A0
;SWILIB_FUNC19C
0x00074670: B18607A0
;SWILIB_FUNC1B8_1BB
0x000746E0: F45BD7A8F85BD7A8B05BD7A8045CD7A8
;SWILIB_FUNC1E9
0x000747A4: F08B07A0
;CODE,INITTAB,DATA_C,CONFIG_DATA_ID
0x00078000: 11FF2FE1870200EB0100A0E3F081BDE8
0x00078010: 10402DE90040A0E1AB0400EB000050E3
0x00078020: 1080BD180400A0E114C09FE500C09CE5
0x00078030: 3CFF2FE1040050E108C09FE500C09CE5
0x00078040: 1CFF2FE1A49507A0A89507A00F402DE9
0x00078050: 950200EB0070A0E10040A0E30F80BDE8
0x00078060: 005080E20F402DE98F0200EB0060A0E1
0x00078070: 0F80BDE80010A0E30F402DE98A0200EB
0x00078080: 0050A0E10F80BDE80F402DE9860200EB
0x00078090: 0070A0E10050A0E30F80BDE81EFF2FE1
0x000780A0: 00109DE5200011E3192F8F020400000A
0x000780B0: C70050E3B200DE0014E08D0501E08EE2
0x000780C0: 51208FE250109FE5001091E5000051E3
0x000780D0: 48109F05803CC0E3400D53E30900008A
0x000780E0: 800C10E300402D090040FD0803C191E7
0x000780F0: 04C08D150300001A01007CE320209F05
0x00078100: 04008D0514208DE50100BDE800F069E1
0x00078110: 0F80FDE81CFF2FE160470000B05BD7A8
0x00078120: 004007A0608B07A004E02DE500200FE1
0x00078130: 040000EF00100FE1C01081E301F021E1
0x00078140: 0000A0E10000A0E10000A0E17AFF17EE
0x00078150: 0000A0E10000A0E10000A0E1FAFFFF1A
0x00078160: 0000A0E39A0F07EE0000A0E10000A0E1
0x00078170: 0000A0E10000A0E1150F07EE0000A0E1
0x00078180: 0000A0E10000A0E10000A0E102F021E1
0x00078190: 04F09DE4F04F2DE90C619FE50C819FE5
0x000781A0: 0040A0E108019FE504D04DE20050A0E3
0x000781B0: 067040E00D30A0E18020A0E3801CA0E3
0x000781C0: 0400A0E10A0000EF00A0A0E101007AE3
0x000781D0: 1300000A0D30A0E10720A0E10810A0E1
0x000781E0: 0B0000EF0090A0E10D00A0E101002DE9
0x000781F0: 04308DE20220A0E30010A0E30A00A0E1
0x00078200: 0F0000EF00B0A0E104108DE20A00A0E1
0x00078210: 0D0000EF0B0059E104D08DE207005901
0x00078220: 1700000A0720A0E10610A0E10800A0E1
0x00078230: 1E0100EF0D30A0E1602FA0E30210A0E3
0x00078240: C01F81E30400A0E10A0000EF00A0A0E1
0x00078250: 01007AE31100000A0D30A0E10720A0E1
0x00078260: 0810A0E10C0000EF070050E10550E011
0x00078270: 0D10A0E10A00A0E10D0000EF000055E3
0x00078280: 0400004A0010D4E558009FE5301041E2
0x00078290: 001080E5044080E50500A0E1F28FBDE8
0x000782A0: 0550E0E10500A0E1F28FBDE8309707A0
0x000782B0: B85AD7A8209807A001C08FE21CFF2FE1
0x000782C0: 10B5084C20001C30FFF764EF002807D5
0x000782D0: 2000FFF760EF002802D5034804210160
0x000782E0: 10BDC046B89507A0A85BD7A800402DE9
0x000782F0: 1D0100EF0080BDE87FB5FFB00025ED43
0x00078300: 0595642166A8FFF7F2EF7F9800246B46
0x00078310: 802211020ADF0190002801D5280043E1
0x00078320: 6B46342209A90BDF342805D001986946
0x00078330: 0DDF0120C04337E109989D49884204D0
0x00078340: 019869460DDF0220F4E709A8808D0B28
0x00078350: 02D30820C04327E1029410E028680128
0x00078360: 0AD1A8680599884200D2059069694018
0x00078370: 844201D2A86844180298401C02900298
0x00078380: 09A9898D884229DA08A801B411980399
0x00078390: 0AAD6D8D01AB00226943411802980FDF
0x000783A0: 1199039A0AAB5B8D01B05A4389188842
0x000783B0: 04D0019869460DDF0320BBE7029816A9
0x000783C0: 40010D1801986B46202229000BDF2028
0x000783D0: C4D0019869460DDF0420BBE70598251A
0x000783E0: 280014DF040004D1019869460DDF0D20
0x000783F0: A0E72900FFF77AEF002058E004980068
0x00078400: 012802D0022817D0B8E004980269002A
0x00078410: 4BD0806805996B46401A211801980BDF
0x00078420: 04990969884240D0019869460DDF2000
0x00078430: 15DF0A20C043B7E00498006914DF0390
0x00078440: 002806D1019869460DDF200015DF0620
0x00078450: 70E704980399026901986B460BDF0499
0x00078460: 0969884208D0019869460DDF039815DF
0x00078470: 200015DF07206DE703990020096866AB
0x00078480: 002906D10BE0192A02DA496892009950
0x00078490: 401C039AC10051180A68002AF3D17899
0x000784A0: 002000292FD1039815DF0298401C0290
0x000784B0: 059841420791029809A9898D884264DA
0x000784C0: 400116A908180490684601B4059801AB
0x000784D0: 4168029800220FDF0599496801B08842
0x000784E0: 8CD0019869460DDF200015DF052021E7
0x000784F0: 039DEB189A18059B5218116862581219
0x00078500: D21A6250401C789AC1009142CBD20499
0x00078510: 779B8968039D4A42C100AD186D18ED18
0x00078520: 6D682D062D0E0695FF2DEBD0FD2DDFD0
0x00078530: 079D069E6519002EE4D0022E02D0172E
0x00078540: 09D012E0039EF3189A18521811686A58
0x00078550: 12196A50D6E7039EF3189A18059B5218
0x00078560: 11686A581219D21AF3E7019869460DDF
0x00078570: 200015DF039815DF0C205BE701986946
0x00078580: 0DDF200015DF0B20D4E6019869460DDF
0x00078590: 00F00EFB079D0F9E829B819A80997F98
0x000785A0: A4196419A04700207FB004B070BDC046
0x000785B0: 7F454C4610B5A0B0694614007E22A3DF
0x000785C0: 0023002221006846FFF796FE002801D0
0x000785D0: 002000E0012020B010BD000000402DE9
0x000785E0: 14D04DE20D00A0E1530100EF000050E3
0x000785F0: 1200000A04309DE508009DE5010053E3
0x00078600: 0600001A0C209DE5000052E30B00000A
0x00078610: 10109DE532FF2FE114D08DE20080BDE8
0x00078620: 01002DE904209DE5AE10A0E3DE1C81E3
0x00078630: 0900A0E3420C80E3000100EF04D08DE2
0x00078640: 14D08DE20080BDE800402DE91C209FE5
0x00078650: 1C109FE50000A0E301002DE98030A0E3
0x00078660: 0A00A0E3440C80E3050100EF0180BDE8
0x00078670: DC8507A0F89607A000402DE9460100EF
0x00078680: 410100EF470100EF0080BDE800402DE9
0x00078690: 04002DE90030A0E10A00A0E3440C80E3
0x000786A0: 0120A0E10110A0E3000100EF0180BDE8
0x000786B0: 10B514008847200015DF10BD10402DE9
0x000786C0: 0040A0E10A00A0E3440C80E3540100EF
0x000786D0: 0C009FE5001090E50400A0E11040BDE8
0x000786E0: 46FEFFEA989507A030402DE9A8409FE5
0x000786F0: 48D04DE240DE4DE20410A0E149008DE2
0x00078700: C00F80E21A0000EF88129FE5D20F8DE2
0x00078710: 001091E5301081E24813CDE51B0000EF
0x00078720: 0050A0E1101084E2D20F8DE2170000EF
0x00078730: 0D20A0E1D21F8DE204008DE26B0000EF
0x00078740: 000050E30E00000AD20F8DE20010A0E3
0x00078750: 0010C5E7B9108DE2170000EF0030A0E3
0x00078760: 0020A0E30210A0E1D20F8DE2E1FEFFFA
0x00078770: 0D10A0E104008DE26C0000EF000050E3
0x00078780: F0FFFF1A0D10A0E104008DE26D0000EF
0x00078790: 48D08DE240DE8DE23080BDE8F09507A0
0x000787A0: 10B58BB06A460024E44301A984DFA042
0x000787B0: 01D1200000E002980BB010BDF0402DE9
0x000787C0: 44419FE544519FE578D04DE2006094E5
0x000787D0: 0510A0E105008DE21A0000EFB4119FE5
0x000787E0: 000056E3001091E5301081E20410CDE5
0x000787F0: 0300000A0000A0E3000084E50600A0E1
0x00078800: 150000EF04008DE2E4FFFFFA0060E0E3
0x00078810: 060050E13A00000A400C50E30300000A
0x00078820: 101085E20100A0E3480100EF190000EA
0x00078830: 0D30A0E18020A0E3801CA0E304008DE2
0x00078840: 0A0000EF0070A0E1060057E12C00000A
0x00078850: 400CA0E3140000EF0060A0E10D30A0E1
0x00078860: 402CA0E30610A0E10700A0E10B0000EF
0x00078870: 400C50E30D10A0E10700A0E10700000A
0x00078880: 0D0000EF281085E20100A0E3480100EF
0x00078890: 0600A0E1150000EF78D08DE2F080BDE8
0x000788A0: 0D0000EF0070A0E30700E0E160109FE5
0x000788B0: 072196E7000052E10721911700005211
0x000788C0: 07319617020053110500000A0720A0E1
0x000788D0: 3C1085E244008DE2160000EF44108DE2
0x000788E0: E8FFFFEA072196E7000052E107119107
0x000788F0: 07118607017087E2400D57E3EAFFFFBA
0x00078900: 006084E578D08DE2F080BDE8B05BD7A8
0x00078910: 089607A0004007A070402DE964509FE5
0x00078920: 64609FE50040A0E146FFFFEB61FEFFEB
0x00078930: A1FFFFEB080300EB0610A0E1010085E2
0x00078940: 1A0000EF1C1086E2210085E21A0000EF
0x00078950: 40009FE5000090E5300080E22000C5E5
0x00078960: 0000C5E5340086E28C0000EF1C009FE5
0x00078970: 710100EF18009FE5001090E50400A0E1
0x00078980: 9EFDFFEB7080BDE8B45BD7A85C9607A0
0x00078990: E88607A09C9507A0A85BD7A8A82801D1
0x000789A0: 12487047AA2801D111487047AF2801D1
0x000789B0: 10487047B82801D10F487047BA2801D1
0x000789C0: 0E487047BF2801D10D487047B22801D1
0x000789D0: 0C487047B32801D10B487047C02804DB
0x000789E0: FF2802DCD42189004018704701040000
0x000789F0: 04040000070400005104000054040000
0x00078A00: 57040000060400005604000030B50400
0x00078A10: 0D0004E0FFF7C2FF010028001CDF2078
0x00078A20: 641C0028F6D130BD30402DE90040A0E1
0x00078A30: 0250A0E1250EA0E10A0050E30600001A
0x00078A40: 0010A0E30400A0E1260100EF0410A0E1
0x00078A50: 0500A0E1ECFFFFFA3080BDE808109FE5
0x00078A60: 0400A0E1240100EF3080BDE8CC9607A0
0x00078A70: 30402DE90040A0E10F00A0E3250100EF
0x00078A80: 0050A0E1071F8FE2240100EF0020A0E3
0x00078A90: 0510A0E10400A0E1940000EF0500A0E1
0x00078AA0: 290100EF3080BDE87478740010402DE9
0x00078AB0: 84409FE5000094E5000050E30400001A
0x00078AC0: 0400A0E3140000EF0010A0E3001080E5
0x00078AD0: 000084E5040080E21080BDE8F0412DE9
0x00078AE0: 54409FE5460100EF005094E52800A0E3
0x00078AF0: 006095E5900607E02C0087E2140000EF
0x00078B00: 0080A0E1042087E20510A0E11E0100EF
0x00078B10: 010086E2000088E50500A0E1150000EF
0x00078B20: 008084E5470100EF0A00A0E3900601E0
0x00078B30: 010188E0040080E2F081BDE8F45BD7A8
0x00078B40: 054A00B5914203D0044A1268904700BD
0x00078B50: 3000FFF78EEF00BDD11D0000A09507A0
0x00078B60: 10402DE940409FE520D04DE20030A0E1
0x00078B70: 0020A0E10410A0E10D00A0E1160000EF
0x00078B80: 0D00A0E14A5304EB020000EF0230A0E3
0x00078B90: 0220A0E30C1084E2FF00A0E3FF0C80E3
0x00078BA0: 905304EB20D08DE21080BDE8D49607A0
0x00078BB0: 004B1847288107A000B5080014DF00BD
0x00078BC0: 00B5080015DF00BD30402DE904D04DE2
0x00078BD0: 0140A0E10250A0E15E0100EF0D30A0E1
0x00078BE0: 0520A0E10410A0E10B0000EF3180BDE8
0x00078BF0: F04F2DE928D04DE20150A0E10060A0E3
0x00078C00: 00608DE50C608DE514308DE28020A0E3
0x00078C10: 801CA0E30A0000EF0040A0E1010070E3
0x00078C20: 3201000A0080A0E30670A0E10690A0E1
0x00078C30: 14308DE20820A0E320108DE20B0000EF
0x00078C40: 080050E32001001A0810A0E320008DE2
0x00078C50: B20100EF000050E31B01000A20059FE5
0x00078C60: 01002DE91C059FE501002DE90000A0E3
0x00078C70: 01002DE90030A0E10020A0E10010A0E1
0x00078C80: 04059FE5A80100EF0C008DE5000050E3
0x00078C90: 0CD08DE20C01000A560100EF0C008DE5
0x00078CA0: 000050E30400001A0020A0E30210A0E1
0x00078CB0: 0D00A0E1570100EF030100EA00009DE5
0x00078CC0: 620100EF000050E30020A0130C108D12
0x00078CD0: F6FFFF1AB4249FE500009DE50410A0E1
0x00078CE0: A90100EF00009DE50810A0E3580100EF
0x00078CF0: 0C109DE500009DE5590100EF0000A0E3
0x00078D00: 01002DE901002DE901002DE91C008DE2
0x00078D10: 01002DE928008DE201002DE920109DE5
0x00078D20: 1C308DE214009DE518208DE25A0100EF
0x00078D30: 000055E314D08DE20500001A10009DE5
0x00078D40: 000050E348049F15FF50A00300009015
0x00078D50: 0150801218009DE5080050E3010000AA
0x00078D60: 00009DE5D60100EF00009DE50C109DE5
0x00078D70: 1020A0E3AC0100EF000050E30100000A
0x00078D80: 00009DE5AD0100EF18009DE5100050E3
0x00078D90: 0100001A00009DE5AF0100EF18009DE5
0x00078DA0: 080050E3010000AA00009DE5B00100EF
0x00078DB0: 10009DE5030050E30100001A00009DE5
0x00078DC0: AB0100EF10009DE5040050E300005013
0x00078DD0: 0100001A00009DE5B10100EF00009DE5
0x00078DE0: 0120A0E3FF10A0E3AE0100EF0C109DE5
0x00078DF0: 00009DE5AA0100EF00009DE50C109DE5
0x00078E00: 5F0100EF140000EF0080A0E10800A0E3
0x00078E10: 140000EF1C008DE50090A0E104009DE5
0x00078E20: FF0055E32F00001A070080E2A051A0E1
0x00078E30: 08009DE595000BE00B00A0E1140000EF
0x00078E40: 0070A0E10B10A0E11D0100EF08009DE5
0x00078E50: 07A0A0E100B0A0E3000050E31400001A
0x00078E60: 0100A0E3890000EA001188E00020D1E5
0x00078E70: 000052E30120D105000052030210D105
0x00078E80: 000051030400001AA0118AE00020D1E5
0x00078E90: 07C000E2332C82E10020C1E5010080E2
0x00078EA0: 04109DE5010050E1EEFFFF3A0AA085E0
0x00078EB0: 01B08BE208009DE500005BE1E7FFFF2A
0x00078EC0: 00009DE50020A0E30810A0E1600100EF
0x00078ED0: 04109DE50600A0E1000051E38030A0E3
0x00078EE0: EEFFFF1AF0FFFFEA08109DE5A4A29FE5
0x00078EF0: 910000E0015055E20400000A015055E2
0x00078F00: 2C00000A015055E25700000A600000EA
0x00078F10: 140000EF0070A0E108009DE50750A0E1
0x00078F20: 00B0A0E3000050E30200001A0500A0E3
0x00078F30: 560000EA01B08BE208009DE500005BE1
0x00078F40: F9FFFF2A00009DE50020A0E30810A0E1
0x00078F50: 600100EF04109DE50600A0E1000051E3
0x00078F60: 1CC0A0E30900001AF1FFFFEA0020D1E5
0x00078F70: 0130D1E50210D1E5E02002E2A3310CE0
0x00078F80: 022083E1211382E10110C5E4010080E2
0x00078F90: 04109DE5010050E1E5FFFF2A00309AE5
0x00078FA0: 001188E00320D1E5030052E1EEFFFF2A
0x00078FB0: C010A0E3F3FFFFEA8000A0E1140000EF
0x00078FC0: 0070A0E108009DE50750A0E100B0A0E3
0x00078FD0: 000050E30200001A0800A0E32B0000EA
0x00078FE0: 01B08BE208009DE500005BE1F9FFFF2A
0x00078FF0: 00009DE50020A0E30810A0E1600100EF
0x00079000: 04109DE50600A0E1000051E37ECEA0E3
0x00079010: 0B00001AF1FFFFEA0020D1E5F83CA0E3
0x00079020: 022403E00130D1E50210D1E583310CE0
0x00079030: 022083E1A111A0E1021081E1B210C5E0
0x00079040: 010080E204109DE5010050E1E3FFFF2A
0x00079050: 00309AE5001188E00320D1E5030052E1
0x00079060: ECFFFF2AE01CA0E3F3FFFFEA0001A0E1
0x00079070: 140000EF0070A0E108009DE50750A0E1
0x00079080: 00A0A0E3000050E32900001A0A00A0E3
0x00079090: B200C9E104009DE50000C9E508009DE5
0x000790A0: 0100C9E5047089E50C109DE500009DE5
0x000790B0: 5D0100EF0020A0E30C108DE20D00A0E1
0x000790C0: 570100EF000057E32500001A0800A0E1
0x000790D0: 150000EF0700A0E1150000EF0900A0E1
0x000790E0: 150000EF14108DE20400A0E10D0000EF
0x000790F0: 0000A0E328D08DE2F08FBDE8001188E0
0x00079100: 0220D1E5010080E20120C5E40120D1E5
0x00079110: 0120C5E40020D1E50120C5E40310D1E5
0x00079120: 0110C5E404109DE5010050E1F2FFFF3A
0x00079130: 01A08AE208009DE500005AE1D2FFFF2A
0x00079140: 00009DE50020A0E30810A0E1600100EF
0x00079150: 04109DE50600A0E1000051E3F0FFFF1A
0x00079160: F2FFFFEA0800A0E1150000EF14108DE2
0x00079170: 0400A0E10D0000EF1C009DE528D08DE2
0x00079180: F08FBDE8C18B07A0B98B07A0109707A0
0x00079190: C88B07A0445BD7A8E45AD7A80A78002A
0x000791A0: 0BD00A78412A02DB5B2A00DA2032491C
0x000791B0: 02700A78401C002AF3D1002101707047
0x000791C0: 8C309FE510002DE90F20A0E30A0051E3
0x000791D0: 0A00003A93C184E00AC0A0E3A441A0E1
0x000791E0: 9C0404E0044041E0022284E193418CE0
0x000791F0: ACC1A0E10C10A0E10A0051E3F4FFFF2A
0x00079200: 301081E20110C0E4020000EA301081E2
0x00079210: 0110C0E42222A0E10F1002E20A0051E3
0x00079220: F9FFFF3A2E10A0E30110C0E47010A0E3
0x00079230: 0110C0E46E10A0E30110C0E46710A0E3
0x00079240: 0110C0E40010A0E30010C0E51000BDE8
0x00079250: 1EFF2FE1CDCCCCCCF0402DE9F4529FE5
0x00079260: 0040A0E10560A0E1460100EF0070A0E3
0x00079270: 000000EA0670A0E1006096E5000056E3
0x00079280: 0E00000A040096E50410A0E1190000EF
0x00079290: 000050E3F6FFFF1A000057E30400000A
0x000792A0: 000096E5000087E5000095E5000086E5
0x000792B0: 006085E5470100EF080096E5F080BDE8
0x000792C0: 470100EF0000A0E3F080BDE8F04F2DE9
0x000792D0: 80429FE570A29FE540DF4DE20050A0E1
0x000792E0: 250EA0E10A0050E30E00001A0510A0E1
0x000792F0: 0D00A0E1A8FFFFFA0D00A0E1D5FFFFEB
0x00079300: 0050B0E10000000A530000EA0010A0E3
0x00079310: 0D00A0E135FEFFEB0050B0E15B00001A
0x00079320: 0C008AE24D0000EA460100EF080094E5
0x00079330: 000000EA000090E5000050E30800000A
0x00079340: 041090E5050051E1F9FFFF1A086090E5
0x00079350: 000056E3F6FFFF0A470100EF0600A0E1
0x00079360: 3E0000EA470100EF040094E5000050E3
0x00079370: 7300000A2000A0E34E0C80E3000055E1
0x00079380: 1D00002A8000A0E3C0619FE5031005E2
0x00079390: 8110A0E130B1A0E1040094E5AB90A0E1
0x000793A0: 258180E00070D8E507001BE11400000A
0x000793B0: 070019E11000000A0A10A0E101008DE2
0x000793C0: 75FFFFFA002096E50510A0E1302082E2
0x000793D0: 0020CDE579FFFFEB0D00A0E19DFFFFEB
0x000793E0: 0050B0E11C00001A0010A0E30D00A0E1
0x000793F0: FEFDFFEB0050A0E1240000EA0000A0E3
0x00079400: 160000EA460100EF0000D8E500008BE1
0x00079410: 0000C8E5470100EF0A10A0E101008DE2
0x00079420: 5DFFFFFA002096E50510A0E1302082E2
0x00079430: 0020CDE561FFFFEB0D00A0E185FFFFEB
0x00079440: 0050B0E10700000A460100EF0000D8E5
0x00079450: 000089E10000C8E5470100EF0500A0E1
0x00079460: 40DF8DE2F08FBDE80010A0E30D00A0E1
0x00079470: DEFDFFEB0050B0E1DFFFFF0A460100EF
0x00079480: 0000D8E5000089E10000C8E5470100EF
0x00079490: 0C00A0E3140000EF0060A0E10D00A0E1
0x000794A0: 1B0000EF010080E2140000EF040086E5
0x000794B0: 0D10A0E11A0000EF085086E5460100EF
0x000794C0: 000094E50050A0E30070A0E3000086E5
0x000794D0: 006084E50400A0E1004094E5000054E3
0x000794E0: 0100001A470100EF140000EA60109FE5
0x000794F0: 017087E2001091E5070051E1F4FFFF2A
0x00079500: 005080E5470100EF080094E5000050E3
0x00079510: 0300000A040090E5150000EF080094E5
0x00079520: 150000EF040094E5150000EF0400A0E1
0x00079530: 004094E5150000EF000054E3F1FFFF1A
0x00079540: 080096E540DF8DE2F08FBDE8189707A0
0x00079550: A85BD7A8145BD7A8F85BD7A830402DE9
0x00079560: 2C509FE58840A0E3040095E54C4D84E3
0x00079570: 000050E30200001A0400A0E1140000EF
0x00079580: 040085E5040095E50410A0E11D0100EF
0x00079590: 3080BDE8F85BD7A82F252DA017232DA0
0x000795A0: 2BCF7FA08C098AA0CBB37FA0F0000000
0x000795B0: B85AD7A8309707A0303A5C5A42696E5C
0x000795C0: 6574635C456C665061636B2E62636667
0x000795D0: 00000000343A5C5A42696E5C6574635C
0x000795E0: 456C665061636B2E6263666700000000
0x000795F0: 3A5C5A42696E5C4461656D6F6E735C00
0x00079600: 2A2E656C660000003A5C5A62696E5C73
0x00079610: 77692E626C696200496C6C6567616C20
0x00079620: 6C6962726172792073697A6521000000
0x00079630: 43616E27742072656164206C69627261
0x00079640: 7279210046756E6374696F6E20256420
0x00079650: 636F6E666C696374210000003A5C5A42
0x00079660: 696E5C696D675C656C665F736D616C6C
0x00079670: 2E706E67000000003A5C5A42696E5C69
0x00079680: 6D675C656C665F6269672E706E670000
0x00079690: B89607A055000000FF089D05009707A0
0x000796A0: 089707A0BC9607A0C49607A0FBC0FF7F
0x000796B0: B58507A000000000656C66004F70656E
0x000796C0: 00000000416C744F70656E007C25647C
0x000796D0: 00000000256428253033582900000000
0x000796E0: 01014E6F2066756E6374696F6E20696E
0x000796F0: 206C6962A100000048454C5045520000
0x00079700: B45BD7A800000000D45BD7A800000000
0x00079710: 312E322E350000003A5C5A42696E5C69
0x00079720: 6D675C00000001002C9707A0FF000000
0x00079730: 01000000416C7068612D6368616E2074
0x00079740: 68726573686F6C640000000000000000
0x00079750: 0000000000000000FF00000080000000
0x00079760: 01000000504E47206361636865207369
0x00079770: 7A650000000000000000000000000000
0x00079780: 0000000014000000C800000032000000
0x00079790: 0500000044656661756C74206269742D
0x000797A0: 64657074680000000000000000000000
0x000797B0: 00000000000000000300000002000000
0x000797C0: 38206269747300000000000000000000
0x000797D0: 00000000000000000000000000000000
0x000797E0: 31362062697473000000000000000000
0x000797F0: 00000000000000000000000000000000
0x00079800: 323420626974732B616C706861000000
0x00079810: 00000000000000000000000000000000
;PATCH_EXT2_JUMPERS
#pragma disable old_equal_ff
0x001C0CD8: 0A43747841455F50 0CF09FE50CF09FE5
0x001C0CE0: 535F46696E6446696C65496E576F726B 0CF09FE50CF09FE50CF09FE54C8007A0
0x001C0CF0: 4469725F436C6F7365282920456E7472 608007A0748007A0888007A0DC8A07A0
;PATCH_EXT2_R5R7
0x0026ED30: 0025284F 51F7D8EF
;PATCH_EXT2_CLUST2
0x0026ED50: 2048 3800
;PATCH_EXT2_R5R1
0x0026EE2E: D84D 51F7
0x0026EE30: 0021 58EF
;PATCH_EXT2_R4R7
0x0026EFC6: 0024714F 51F788EE
;PATCH_EXT2_CLUST1
0x0026EFF2: 6748 3800
;PATCH_EXT2_IMPL
0x0026F010: 5F4A043A11683C2909DA28204843131D 51F76AEEC046C046C046C046C046C046
0x0026F020: C01801311160 C046C046C046
;PATCH_EXT2_R6R5
0x0026F0E0: 2B4E051C 51F7FCED
;PATCH_ENABLE_ALTOPEN
0x0033D3BE: 04D1 0028
;PATCH_ONCREATE
0x003F75CC: 17232DA0 188907A0
;PATCH_ONCLOSE
0x003F75E0: 2F252DA0 BC8607A0
;PATCH_NO_BROWSE_TXT
0x00464E76: 0830 3030
;PATCH_SHOWMSG_BLF
0x00518810: 2BCF7FA0 418B07A0
;PATCH_ESI1
0x007A93E0: 181301FA 08F09FE5
;PATCH_ESI2
0x007A93F0: 7C25647C 048007A0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x007FB3C0: 10B5041CA5F0E2EA 00490847108007A0
;FSWI_PATCH2
0x010793B8: 63685F41 A08007A0
;FSWI_PATCH1
0x010794A4: 2C0000EA F4F01FE5

;------------------------- end -------------------------

