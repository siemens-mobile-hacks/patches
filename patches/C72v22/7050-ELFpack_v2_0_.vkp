;C72v22
;ELFpack v2.0+
;ELFpack v2.0+
;(c) Rst7/CBSIE, BoBa
;(p) inquis
;Version: 
;PatchID: 7050
;Details: https://patches.kibab.com/patches/details.php5?id=7050
/*
;Также библиотека для патчей
;
;+Загрузка всех .elf-файлов из каталога 0:\ZBin\Daemons
;
;+Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
; Обрабатывается при помощи ExtD.elf - необходим в каталоге 0:\ZBin\Daemons
; по файлу 0:\ZBin\etc\extension.cfg. Формат файла:
; >>>>---
; ;Это комментарий, он начинается с символа ;
; 
; ;Универсальные для тех, у кого не указано какое-либо поле
; 
; RUN=0:\ZBin\TED\TED.elf
; SMALL=0:\ZBin\img\UNK_SMALL.png
; BIG=0:\ZBin\img\UNK_LARGE.png
; ALTRUN=0:\ZBin\TED\TED.elf
; 
; ;первый, расширение txt очень желательно указывать, т.к. по нему открываются неизвестные файлы
; [txt]
; SMALL=0:\ZBin\img\TXT_SMALL.png
; BIG=0:\ZBin\img\TXT_LARGE.png
; 
; ;второй
; [bcfg]
; RUN=0:\ZBin\utilities\CfgEdit.elf
; SMALL=0:\ZBin\img\BCFG_SMALL.png
; BIG=0:\ZBin\img\BCFG_LARGE.png
; 
; ; и т.д.
; 
; ; если поле не указано, то оно берется из первых
; ---<<<<<
;
;+Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив
; ММС.zip с сохранением путей.
;
;+Расширение таблицы регистрации расширений файлов
;
;+Очередной перенос HELPER_PROC на cepid=4407 для более корректной работы
; с жабой
;
;+Расширение PIT при помощи .png файлов
; Обрабатываются файлы из каталога 0:\ZBin\img\ с именами %d.png
; для замены штатных картинок или из эльфов - указатель на строку
; с именем файла вместо ID (аналогично ESI)
;
;+Дописал функции которых нет в прошивке - UnRegExplorerExt,AddKeybMsgHook,AddKeybMsgHook_end,RemoveKeybMsgHook

*/
+0FD4000
#pragma enable old_equal_ff
;000:              ;   0: SWI0
;004:              ;   1: SWI1
;008:              ;   2: SWI2
;00C:              ;   3: SWI3
;010:              ;   4: SWI4
0014: 0xA082BF11   ;   5: DecToHex
0018: 0xA1147C14   ;   6: GetAkku
001C: 0xA15676F1   ;   7: GetLP
0020: 0xA1148AA8   ;   8: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1165AB8   ;   9: SwitchPhoneOff
0028: 0xA112FE40   ;   A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0FD9401   ;   B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0FD9451   ;   C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA112FD94   ;   D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA112FDC4   ;   E: fflush
003C: 0xA112FDF4   ;   F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA112FC24   ;  10: mkdir
0044: 0xA0FCF201   ;  11: OpenReadCloseFile
0048: 0xA11915D0   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA11910DC   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0820F9C   ;  14: malloc(unsigned int size)
0054: 0xA0821004   ;  15: mfree(void *)
0058: 0xA1622199   ;  16: sprintf(char *buf, const char *str, ...)
005C: 0xA170D801   ;  17: strcat(char *,const char *)
0060: 0xA170D821   ;  18: strchr(const char *,int)
0064: 0xA170D844   ;  19: strcmp(const char *,const char *)
0068: 0xA170D8E1   ;  1A: strcpy(char *dest,const char *source)
006C: 0xA170D961   ;  1B: strlen(char *)
0070: 0xA0C996D5   ;  1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0C99689   ;  1D: wsInsertChar
0078: 0xA0CC9B85   ;  1E: GetPITaddr
007C: 0xA08DEBA1   ;  1F: DrawMainScreen

0080: 0xA14F0B2D   ;  20: DrawScreenSaver
0084: 0xA0CC9CCB   ;  21: GetImgHeight
0088: 0xA0CC9CDB   ;  22: GetImgWidth
008C: 0xA08C5299   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0CC0535   ;  24: DrawImage2
0094: 0xA08C5273   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0CC0475   ;  26: DrawImgBW
009C: 0xA08C4BF5   ;  27: AddIconToIconbar
00A0: 0xA1149CCC   ;  28: getEELiteMaxID
00A4: 0xA112E854   ;  29: getEEFullMaxID
00A8: 0xA1149B88   ;  2A: GetEELiteBlockAddress
00AC: 0xA1149C70   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA112E498   ;  2C: getEEFullBlockSizeVersion
00B4: 0xA1149D00   ;  2D: StartWriteEELiteBlock
00B8: 0xA1149D7C   ;  2E: FinishWriteEELiteBlock
00BC: 0xA1149CD8   ;  2F: DeleteEELiteBlock

00C0: 0xA1149D38   ;  30: WriteEELiteBlock
00C4: 0xA170DAA9   ;  31: StrChrRev
00C8: 0xA097BF14   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0971DD4   ;  33: PlaySound2
00D0: 0xA095F39C   ;  34: PlaySoundLoop
00D4: 0xA0AC9253   ;  35: AlarmClockRing
00D8: 0xA0B8684D   ;  36: GetATCmdString
00DC: 0xA0BFBCE3   ;  37: OriginalATCGSN
00E0: 0xA0B861E9   ;  38: PostAtCommand
00E4: 0xA0B8791F   ;  39: SendATAnswerStr
00E8: 0xA0C56BB1   ;  3A: mfree_high
00EC: 0xA1622E75   ;  3B: MemChr
00F0: 0xA112FEC0   ;  3C: SetFileSize
00F4: 0xA0A7B6EB   ;  3D: editOrNewTXTModule
00F8: 0xA0B84989   ;  3E: LoadProcesses
00FC: 0xA0CC119D   ;  3F: SelectColor

0100: 0xA08F3067   ;  40: GetVibraStatus
0104: 0xA0BC4617   ;  41: GetProvider
0108: 0xA08E1F49   ;  42: IsScreenSaver
010C: 0xA0CC8D0F   ;  43: IsUnlocked(KMZ)
0110: 0xA0BEC819   ;  44: TempLigntOn
0114: 0xA099C5B4   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
0120: 0xA08DCF13   ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA097474C   ;  4a: PlayFile
012C: 0xA0CF2B34   ;  4B: StartMidlet
0130: 0xA0BC0929   ;  4C: GetMissedCallsCount
0134: 0xA0828278   ;  4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA112BF4F   ;  4E: ShowMsgInR1_3
013C: 0xA112BF5F   ;  4F: ShowMsgInR1_4

0140: 0xA112BFC7   ;  50: ShowMsgInR1_7
0144: 0xA129FF21   ;  51: GetNetAccessMode
0148: 0xA1149154   ;  52: GetIlluminationDataTable
014C: 0xA1622e99   ;  53: memcmp
0150: 0xA082BF4D   ;  54: StrToInt
0154: 0xA08F307D   ;  55: SwitchVibraOnOff
0158: 0xA0FCF421   ;  56: PlayVibra
015C: 0xA0828384   ;  57: IsCallAfterTimerStillRunning
0160: 0xA0837294   ;  58: ClearMemory
0164: 0xA1623364   ;  59:  memcpy
0168: 0xA0CC8573   ;  5A:  KeypressOn
016C: 0xA0CC86A1   ;  5B:  KeypressOff
0170: 0xA091AA6D   ;  5C: GetCPUClock()
0174: 0xA091AAA7   ;  5D: GetCPULoad()
0178: 0xA091AA75   ;  5E: GetMMIMemUsed
017C: 0xA091AA7F   ;  5F: void GetNonPermMemAvail()

0180: 0xA08F324B   ;  60: ShowMainMenu
0184: 0xA08F7723   ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus;
018C: 0xA08DB143   ;  63: MS_Wallpaper_Flush
0190: 0xA11A9DD7   ;  64: TriggerUpdate
0194: 0xA0BC2085   ;  65: EndCall
0198: 0xA0B90897   ;  66: EndCallBusy
019C: 0xA08C4645   ;  67: IsDirectCallActive
01A0: 0xA08C1F2F   ;  68: GetScreenSaverRAM
01A4: 0xA0829480   ;  69: LockSched
01A8: 0xA0829508   ;  6A: UnlockSched
01AC: 0xA112FB78   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA112FBB4   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA112FB00   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA1253FCB   ;  6E: IsCalling
01BC: 0xA08DB9EB   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA08DBA09   ;  70: int * GetGPRSTrafficPointer()
01C4: 0xA0CBEECB   ;  71: DrawFrame
01C8: 0xA0BBCAE3   ;  72: SetCurrentSecondOfCall
01CC: 0xA12547E3   ;  73: GetTypeOfCall
01D0: 0xA08F3807   ;  74: GetFunctionPointer
01D4: 0xA0CC5E09   ;  75: StoreXYWHtoRECT
01D8: 0xA0D00325   ;  76: SetWindowText
01DC: 0xA0CFDB03   ;  77: set2color_byPaletteAdr
01E0: 0xA0B9E8F1   ;  78: GetTimeFormat
01E4: 0xA0CC515F   ;  79: DrawObject
01E8: 0xA0CFDB99   ;  7A: ClearWindowBuffer
01EC: 0xA08D1DDD   ;  7B: GetProfileFilter
01F0: 0xA1151E20   ;  7C: SetVibration(unsigned int power)
01F4: 0xA12539E5   ;  7D: IsIncognitoCall
01F8: 0xA127451D   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn;

0200: 0xA0AC9AB1   ;  80: ShowCallList(int list, int zero)
0204: 0xA16235F4   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename;
020C: 0xA09630BC   ;  83: GetPathOfFoundFile
0210: 0xA112FCF4   ;  84: int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D7D   ;  85: StrCmpNoCase
0218: 0xA112E3C0   ;  86: ReadEEPROMData
021C: 0xA112E504   ;  87: WriteEEPROMData
;220:              ;  88: GetAccessoryType;
;224:              ;  89: GetLangMesIntoWS;
0228: 0xA112FA90   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA1130054   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0957024   ;  8C: RegExplorerExt(REGEXPLEXT const *)
;234:              ;  8D: ;
0238: 0xA112FC54   ;  8E: int fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA112FC8C   ;  8F: int rmdir(const char * cDirectory, unsigned int *ErrorNumber)

0240: 0xA112FF30   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA112FBF4   ;  91: int isdir(const char * cDirectory, unsigned int *ErrorNumber)
0248: 0xA0CB85AC   ;  92: __arm void *calloc(size_t nelem, size_t elsize)
024C: 0xA1165AC4   ;  93: RebootPhone
0250: 0xA09570E8   ;  94:  __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: ;
;258:              ;  96: ;
;25C:              ;  97: ;
;260:              ;  98: ;
0264: 0xA0974880   ;  99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA11B1048   ;  9A: ;__arm int ChangeVolume(unsigned char Volume)
026C: 0xA86B7D90   ;  9B: Audio params addr
;270:              ;  9C: ;
;274:              ;  9D: ;
;278:              ;  9E: ;
027C: 0xA0CBED97   ;  9F: DrawRect

0280: 0xA0C98C37   ;  A0: wsprintf
0284: 0xA0825E5D   ;  A1: wstrcpy
0288: 0xA0C991C7   ;  A2: Unicode_GetCharByPosition
028C: 0xA112F2E0   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0C99447   ;  A4: wsAlloc
0294: 0xA0C99483   ;  A5: wsFree
0298: 0xA08DB9B1   ;  A6: void ResetGPRSTraffic();
029C: 0xA08DB7FD   ;  A7: char IsGPRSEnabled();
02A0: 0xA127684D   ;  A8: IsGPRSConnected
02A4: 0xA0CC9333   ;  A9: KbdLock
02A8: 0xA0FCF001   ;  AA:  OpenWriteCloseFile
02AC: 0xA0002070   ;  AB:  SWI_AB
02B0: 0xA0FCF1B1   ;  AC:  DrawText
02B4: 0xA0FCF0A1   ;  AD:  StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE:  StrUni2Ansi
02BC: 0xA0FCF051   ;  AF:  Hex2Int

02C0: 0xA0FCF351   ;  B0:  DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1:  DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2:  GetBuildCanvas
02CC: 0xA0FCF301   ;  B3:  Seconds2iTime
02D0: 0xA0B9DA73   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257D3   ;  B5: GetWeek(TDate*)
02D8: 0xA08D17A1   ;  B6: GetProfile()
02DC: 0xA08D166F   ;  B7: SetProfile(char)
02E0: 0xA16234D8   ;  B8: dwMODdw
02E4: 0xA0CC8F97   ;  B9: KbdUnlock
02E8: 0xA0820FA8   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA16234C0   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0837360   ;  BC: __arm int divide(int divisor, int dividend)
02F4: 0xA16235AC   ;  BD: __arm  int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE:  RunScaner
02FC: 0xA0FC3001   ;  BF:  SpellTime

0300: 0xA0FC7601   ;  C0:  MiniGPS
0304: 0xA0FC0C51   ;  C1:  RunDispatcher
0308: 0xA0FC12A1   ;  C2:  GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3:  ProcessFiles
0310: 0xA0FC0C01   ;  C4:  GetBuffer
;314:              ;  C5:  PIT_Manager_Core;
;318:              ;  C6: ;
;31C:              ;  C7:  CallLibFunByNumber;
0320: 0xA8465EE4   ;  C8:  RamCap
0324: 0xA8465EE6   ;  C9:  RamLS
0328: 0xA84728F4   ;  CA:  RamNet
032C: 0xA84728FA   ;  CB:  RamNetRX
0330: 0xA839744C   ;  cc:  RamMissedCalls
0334: 0xA8397440   ;  cd:  RamMissedSMS
0338: 0xA8446CC0   ;  ce:  RamDateTime
033C: 0xA847DE54   ;  CF:  RamAlarm
0340: 0xA84AC680   ;  d0:  RamAccPoint
0344: 0xA8442A3C   ;  d1:  RamScreensaver
0348: 0xA8446CE8   ;  d2:  RamAutoTime
034C: 0xA8442A44   ;  d3:  RamStby ?
0350: 0xA8397430   ;  d4:  RamMissedMes
0354: 0xA8458504   ;  D5:  RamIsLocked
0358: 0xA8445664   ;  d6:  RamNetOnline
035C: 0xA848896A   ;  d7:  RamScreenBrightness
0360: 0xA8446A6D   ;  D8:  RamMenuAnywhere
;364:              ;  D9:  RamShutdownMode;
0368: 0xA84AC6F0   ;  DA:  RamIsShutdown
036C: 0xA8442A70   ;  db:  RamMainscreenAccuIcon
;370:              ;  DC:  RamRandSeed;
;374:              ;  DD:  RamCurrentTrack
;378:              ;  DE:  RamIsSimPresent
037C: 0xa8458414   ; DF:  RamPressedKey

0380: 0xA844FFB8   ;  E0:  RamScreenBuffer
;384:              ;  E1:  ;
;388:              ;  E2:  ;
038C: 0xAB80A847   ;  E3:  RamProfileNum
0390: 0xA8215000   ;  E4:  FreeRAM
;394:              ;  E5:  LP_MonthsShort
;398:              ;  E6:  Pic_Big0
;39C:              ;  E7:  Pic_Little0
;3A0:              ;  E8:  Pic_Extra
;3A4:              ;  E9:  Pic_Profiles
;3A8:              ;  EA:  Pic_Vibra
;3AC:              ;  EB:  Pic_Call
;3B0:              ;  EC:  Pic_AdvNet
;3B4:              ;  ED:  LP_MonthsLong
;3B8:              ;  EE:  LP_Weekdays
;3BC:              ;  EF:  Pic_Calendar

;3C0:              ;  F0:  Pic_AccuGraph
03C4: 0xA08DE9B1   ;  F1:  BuildCanvas
;3C8:              ;  F2:  ;
;3CC:              ;  F3:  ;
;3D0:              ;  F4:  ;
;3D4:              ;  F5:  ;
;3D8:              ;  F6:  ;
;3DC:              ;  F7:  ;
03E0: 0xA0FD0050   ;  F8:  Additional_PIT_address
;3E4:              ;  F9:  Additional_PIT_start
;3E8:              ;  FA:  Additional_PIT_end
;3EC:              ;  FB:  ;
03F0: 0xA0FC0A00   ;  FC:  PictureRelocationTable
;3F4:              ;  FD:  PictureRelocationBase
03F8: 0x00001E1E   ;  FE:  NextPictureMagic
03FC: 0xA0FD4000   ;  FF: AddrLibrary()

0400: 0xA0827AE8   ; 100:  GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826A84   ; 101:  GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0827184   ; 102:  GBS_AcceptMessage(void)
040C: 0xA0826EAC   ; 103:  GBS_ClearMessage(void)
0410: 0xA082707C   ; 104:  GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F58   ; 105:  CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8440EB8   ; 106:  CSM_root
041C: 0xA0C9B6F1   ; 107:  CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0C9B703   ; 108:  CSM_RAM * FindCSMbyID (int id)
0424: 0xA0C9B7C7   ; 109:  __thumb void DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id);
;42C:              ; 10B: GetMinAdrScan();
;430:              ; 10C: GetMaxAdrScan();
;434:              ; 10D: GetCI();
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration);
043C: 0xA08DFFED   ; 10F:  __thumb void freeUSSD()

0440: 0xA0825E5D   ; 110:  __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA08E0029   ; 111: GetTypeUSSD()
0448: 0xA08E0039   ; 112:  __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA170D931   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA170D9AD   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA170D9DD   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA170DA2D   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA170DAA9   ; 117: strrchr_2(const char *s,int c)
0460: 0xA170DAC1   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA170DB3D   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA170DBB9   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1622145   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA1622E99   ; 11C:  __thumb int  memcmp (void *m1,void *m2,int n)
0474: 0xA162331C   ; 11D:  __arm void  zeromem (void *dest,int n)
0478: 0xA1623364   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0C99567   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0C99589   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0C995AD   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0C99641   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0C98E93   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0C98C37   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0C99447   ; 125:  __thumb WSHDR * AllocWS (int len)
0498: 0xA0C9983B   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0C993DF   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0C993FF   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0C98D79   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA0CC515F   ; 12A: DrawObject_2(DRWOBJ *)
;04AC: 0xA0002070   ; 12B: AddKeybMsgHook(void *proc)
;04B0: 0xA0FFF06F   ; 12C: AddKeybMsgHook_end(void *proc)
;04B4: 0xA0FFF09F   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA0CC119D   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA0CC11C1   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0CC11D1   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0CC11EF   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA162341C   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0CC5E09   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA0CC5E1F   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0C9E83B   ; 135: IsGuiOnTop(int id)
04D8: 0xA0C9E9A9   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA0C9E9CB   ; 137: CreateGUI(void *gui)
04E0: 0xA0C9E9E9   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA0C9EA65   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0C9EA87   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0C9EAA9   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA0C9EAC7   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA0C9EAE5   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0C9EB07   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0C9EC53   ; 13F: DirectRedrawGUI(void)

0500: 0xA0C9EC6D   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA0C9ED4D   ; 141: PendedRedrawGUI(void)
0508: 0xA0CBE769   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828314   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA08299EC   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243C0   ; 145: GBS_GetCurCepid(void)
0518: 0xA0829480   ; 146: LockSched_2(void)
051C: 0xA0829508   ; 147: UnlockSched_2(void)
0520: 0xA112BF31   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA0D00325   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0CFDB99   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0CFDB03   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0D00375   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0C9E859   ; 14D: GetTopGUI(void)
0538: 0xA0CCB5D3   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0CCB5FD   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0CBEECB   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0CC044B   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA112BAE9   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826948   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824384   ; 154: KillGBSproc(int cepid)
0554: 0xA1600861   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA15FFC35   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA1601699   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA15FFB09   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA160099F   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA1600285   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1600627   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA160128F   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA16012D1   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA15FFF25   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA160019B   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA1600E27   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: png_init_io(png_structp png_ptr, int fp);
0588: 0xA170DDE8   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0C9C99D   ; 163:  __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_)
0590: 0xA0C9BE79   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0C9C187   ; 165:  __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0C9CB35   ; 166:  __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0CC6125   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA1166127   ; 168:  __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA11660CB   ; 169:  __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA11660D5   ; 16A:  __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA112FD2C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA112F1C0   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0C4F43B   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0BCDE9B   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0BCE691   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0B8DBB1   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...);
;5C8:              ; 172:  __arm void REDRAW(void);
05CC: 0xA125F671   ; 173:  __thumb int socket(int af,int type,int protocol)
05D0: 0xA125F943   ; 174:  __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA125F7F5   ; 175:  __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA125FABD   ; 176:  __thumb int closesocket(int socket)
05DC: 0xA125FA39   ; 177:  __thumb int shutdown(int socket,int how)
05E0: 0xA125FB67   ; 178:  __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA125FE43   ; 179:  __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA12820D9   ; 17A:  __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA12820E5   ; 17B:  __thumb unsigned int htonl(unsigned int)
05F0: 0xA8512660   ; 17C:  __arm int socklasterr(void)
05F4: 0xA0C9EB29   ; 17D:  __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0C9EB4B   ; 17E:  __thumb void RestartIDLETMR(void)
05FC: 0xA0C9EB65   ; 17F:  __thumb void DisableIDLETMR(void)

0600: 0xA1165FF9   ; 180:  __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA1165F59   ; 181:  __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA1165F95   ; 182:  __thumb int EDIT_GetFocus(void *gui)
060C: 0xA1165FB3   ; 183:  __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA0C9C1BF   ; 184:  __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0827680   ; 185:  __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA125D22D   ; 186:  __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA125DC5D   ; 187:  __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000082   ; 188:  __adr int ScreenW(void);
0624: 0x00000082   ; 189:  __adr int ScreenH(void);
0628: 0x00000016   ; 18A:  __adr int HeaderH(void);
062C: 0x00000016   ; 18B:  __adr int SoftkeyH(void);
0630: 0xA0829898   ; 18C:  __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA0D818F8   ; 18D:  __arm int available0(int sock)
0638: 0xA12770F9   ; 18E:  __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA0CA1697   ; 18F:  __thumb int GetCurMenuItem(void *gui)

0640: 0xA0828F48   ; 190:  __arm void MutexCreate(MUTEX *mtx)
0644: 0xA0829074   ; 191:  __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA08291F4   ; 192:  __arm void MutexLock(MUTEX *mtx)
064C: 0xA082924C   ; 193:  __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA08292A8   ; 194:  __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA0CA2B59   ; 195:  __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0C9ECFB   ; 196:  __thumb void RefreshGUI(void)
065C: 0xA0CA2BAB   ; 197:  __thumb void *AllocMenuItem(void *gui)
0660: 0xA0CA2CB9   ; 198:  __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0CA2B2B   ; 199:  __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA0CA247D   ; 19A:  __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA1165FA9   ; 19B:  __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C:  __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA114FD40   ; 19D:  __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA114FD08   ; 19E:  __arm void StartCpuUsageCount(void);
067C: 0xA08755C9   ; 19F:  __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA08756FF   ; 1A0:  __thumb int inflate(z_streamp strm, int flush)
0684: 0xA087653B   ; 1A1:  __thumb int inflateEnd(z_streamp strm)
0688: 0xA08CB549   ; 1A2:  __swi __arm int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0CEA6CC   ; 1A3:  __swi __arm int GetCurrentGPRSProfile(void)
0690: 0xA0CEA670   ; 1A4:  __arm int GetDisconnectTime(void)
0694: 0xA08CB573   ; 1A5:  __swi __arm void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0828384   ; 1A6:  __swi __arm int IsTimerProc(GBSTMR *)
069C: 0xA0B91A97   ; 1A7: char* Get_NC_CC(); 
06A0: 0xA1600725   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA1601737   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA1600DEF   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA160185F   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA1600189   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA160187B   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA16025D1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA1601835   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA1602567   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA1601889   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA15FFB69   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0CC1B03   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0CBED97   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
06D4: 0x00000000   ; 1B5: __adr int isnewSGold(void);
06D8: 0xA1260363   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA1265515   ; 1B7: __thumb unsigned int str2ip(const char *);
;6E0:              ; 1B8: 
;6E4:              ; 1B9: 
;6E8:              ; 1BA: 
;6EC:              ; 1BB: 
06F0: 0xA15EA07B   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA15E9D5F   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA15E9F5B   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA15ABF1D   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA15ABFAB   ; 1C0: void RSA_free (RSA *r)
0704: 0xA15AC177   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA14B07CF   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0c9fcb7   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA0c9fc2f   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0cc99bf   ; 1C5: __thumb int GetFontYSIZE(int font);
0718: 0xA1165F8B   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA1165F95   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0C9CCED   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0C9BE13   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0C9BE07   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0C9BDFB   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0C9BDE5   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0C9BDCD   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0C9BEB5   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
;73C:              ; 1CF: 

;740:              ; 1D0: 
;744:              ; 1D1: 
;748:              ; 1D2: 
;74C:              ; 1D3: 
;750:              ; 1D4: 
;754:              ; 1D5: 
;758:              ; 1D6: 
;75C:              ; 1D7: 
;760:              ; 1D8: 
;764:              ; 1D9: 
;768:              ; 1DA: 
;76C:              ; 1DB: 
;770:              ; 1DC: 
;774:              ; 1DD: 
;778:              ; 1DE: 
;77C:              ; 1DF: 

0780: 0xA0956754   ; 1E0: REGEXPLEXT_ARM_NEW *GetEXPLEXTByRegN(int id)
0784: 0xA0956D6C   ; 1E1: int GetFileTypeRegNFromFullFileName(WSHDR * fullname)
;788:              ; 1E2: 
;78C:              ; 1E3: 
;790:              ; 1E4: 
;794:              ; 1E5: 
;798:              ; 1E6: 
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: 
;7E8:              ; 1FA: 
;7EC:              ; 1FB: 
;7F0:              ; 1FC: 
;7F4:              ; 1FD: 
;7F8:              ; 1FE: 
;7FC:              ; 1FF: 

0800: 0xA0FC7301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

;FSWI_PATCH1
0x000929B0: 1A0000EA DCF09FE5
;FSWI_PATCH3,FSWI_PATCH2
0x00092A93: A100000000 000480FDA0
;PATCH_ONCREATE,PATCH_ONCLOSE
0x0093F380: C5378CA0FF398CA0 A888FDA0EC87FDA0
;PATCH_GET_REGEXT1
0x00956774: 81C282E0 87061AEB
;PATCH_GET_REGEXT2
0x00956788: 810282E0 87061AEB
;PATCH_GET_EXT
0x00956964: 857288E0 06061AEB
;REG_FILE
0x00956F8C: F0452DE9 04F01FE5
0x00956F90: 20608DE2 4482FDA0
;PATCH_REGEXPL
0x00957074: C4FFFFEB 53041AEB
;PATCH_PROPERTY2
0x0099F108: 070092E8 0CE418EB
;PATCH_BIG_ICON
0x0099FAF8: 010080E2 B0E118EB
;PATCH_PROPERTY1
0x009DE650: 0400A0E1 B6E617EB
;PATCH_NO_BROWSE_TXT
0x00BFFF06: 211C 16E0
;PATCH_KEYB_MSG,PATCH_KEYB_MSGJ
0x00CC844C: F8B5061C 004A1047
0x00CC8450: 0D1C0024 6581FDA0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x00CC9B84: 10B5041CFFF7F5FF 004908470095FDA0
;SWILIB_FUNC095
#pragma enable old_equal_ff
0x00FD4254: 3083FDA0
;;SWILIB_FUNC12B_12D
0x00FD44AC: D883FDA0
0x00FD44B0: 3C84FDA08C84FDA0
;SWILIB_FUNC171,SWILIB_FUNC172
0x00FD45C4: B091FDA08C91FDA0
;SWILIB_FUNC19C
0x00FD4670: D591FDA0
;SWILIB_FUNC1B8_1BB
0x00FD46E0: B4F743A8B8F743A8ACF743A8BCF743A8
;FSWI_CODE
0x00FD8000: 1EFF2FE100109DE5200011E3122F8F02
0x00FD8010: 0400000AC70050E3B200DE0014E08D05
0x00FD8020: 01E08EE235208FE234109FE5803CC0E3
0x00FD8030: 400D53E30500008A800C10E300402D09
0x00FD8040: 0040FD0803C191E704C08D1514208D05
0x00FD8050: 0100BDE800F069E10F80FDE81CFF2FE1
0x00FD8060: 604700000040FDA0
;CODE,DATA_C
0x00FD8100: 11FF2FE1203EA0E10A0053E31040BD08
0x00FD8110: 0702000AEC3E9FE50140A0E10210A0E1
0x00FD8120: 04209FE5020050E113FF2FE110270000
0x00FD8130: 0400A0E10140A0E3184080E51EFF2FE1
0x00FD8140: 180095E5000050E3070092E81EFF2F01
0x00FD8150: 2F0200EB0000A0E3180085E58DDF8DE2
0x00FD8160: F080BDE8F8B5061C0D1C00F0B5F90028
0x00FD8170: 00D0002500240027014A126810470000
0x00FD8180: 1490FDA048709FE5007097E52480A0E3
0x00FD8190: 987527E01EFF2FE134C09FE500C09CE5
0x00FD81A0: 2420A0E392C12CE01EFF2FE120009FE5
0x00FD81B0: 000090E52420A0E3920120E01EFF2FE1
0x00FD81C0: 0810A0E1410000EA105094E510508DE5
0x00FD81D0: 1B0000EAB4F743A804E02DE500200FE1
0x00FD81E0: 000000EF00100FE1C01081E301F021E1
0x00FD81F0: 0000A0E10000A0E10000A0E17AFF17EE
0x00FD8200: 0000A0E10000A0E10000A0E1FAFFFF1A
0x00FD8210: 0000A0E39A0F07EE0000A0E10000A0E1
0x00FD8220: 0000A0E10000A0E1150F07EE0000A0E1
0x00FD8230: 0000A0E10000A0E10000A0E102F021E1
0x00FD8240: 04F09DE4F74F2DE930809DE534909DE5
0x00FD8250: 38A09DE53CB09DE540409DE50370A0E1
0x00FD8260: CC0100EB0050A0E1460100EF0060A0E3
0x00FD8270: 006085E5047085E504009DE5080085E5
0x00FD8280: 0C80C5E508009DE5BE00C5E11090C5E5
0x00FD8290: 00009DE5140085E518A085E51CB085E5
0x00FD82A0: 0800A0E3140000EF001097E5212EA0E1
0x00FD82B0: 0A0052E30010940501108112001080E5
0x00FD82C0: 046080E5200085E5470100EFF78FBDE8
0x00FD82D0: F8209FE5F8309FE530002DE9002092E5
0x00FD82E0: 003093E5204EA0E10A0054E30100000A
0x00FD82F0: 010080E20B0000EA00C0A0E3000000EA
0x00FD8300: 01C08CE202005CE1F8FFFF0A2450A0E3
0x00FD8310: 953C24E0085094E5010055E1F7FFFF1A
0x00FD8320: 200094E5000090E53000BDE81EFF2FE1
0x00FD8330: FF412DE994509FE50040A0E190009FE5
0x00FD8340: 0060A0E3007090E5000000EA016086E2
0x00FD8350: 000095E5000056E1FF81BD082400A0E3
0x00FD8360: 907628E0040094E5081098E5010050E1
0x00FD8370: F5FFFF1A140098E51020A0E30D10A0E1
0x00FD8380: A30000EF001094E50D00A0E1190000EF
0x00FD8390: 000050E3ECFFFF1A140098E5290100EF
0x00FD83A0: 200098E5150000EF000095E52410A0E3
0x00FD83B0: 010040E2000085E5060040E0910002E0
0x00FD83C0: 241088E20800A0E11E0100EFFF81BDE8
0x00FD83D0: A8F743A8B4F743A870402DE90040B0E1
0x00FD83E0: 0100001A0000A0E37080BDE80C519FE5
0x00FD83F0: 0C00A0E3140000EF0060B0E1F8FFFF0A
0x00FD8400: 460100EF158000EF0010A0E3001086E5
0x00FD8410: 044086E5080086E5000000EA0050A0E1
0x00FD8420: 000095E5000050E3FBFFFF1A006085E5
0x00FD8430: 470100EF0100A0E37080BDE8F0402DE9
0x00FD8440: 0040B0E10500000AB0509FE50C00A0E3
0x00FD8450: 006095E5140000EF0070B0E10100001A
0x00FD8460: 0000A0E3F080BDE8460100EF158000EF
0x00FD8470: 006087E5044087E5080087E5007085E5
0x00FD8480: 470100EF0100A0E3F080BDE830402DE9
0x00FD8490: 68409FE50450A0E1000000EA0540A0E1
0x00FD84A0: 005095E5000055E33080BD08041095E5
0x00FD84B0: 000051E1F8FFFF1A460100EF000095E5
0x00FD84C0: 000084E5470100EF081095E50500A0E1
0x00FD84D0: 0AFFFFEB3080BDE870B5094E04000D00
0x00FD84E0: 3668002E02D07268100001D1002070BD
0x00FD84F0: 2100280090470028F2D0012070BD0000
0x00FD8500: B0F743A800402DE91D0100EF0080BDE8
0x00FD8510: 7FB5FFB00025ED430595642166A8FFF7
0x00FD8520: F2EF7F9800246B46802211020ADF0190
0x00FD8530: 002801D528003FE16B46342209A90BDF
0x00FD8540: 342805D0019869460DDF0120C04333E1
0x00FD8550: 09989B49884204D0019869460DDF0220
0x00FD8560: F4E709A8808D0B2802D30820C04323E1
0x00FD8570: 029410E0286801280AD1A86805998842
0x00FD8580: 00D2059069694018844201D2A8684418
0x00FD8590: 0298401C0290029809A9898D884229DA
0x00FD85A0: 08A801B4119803990AAD6D8D01AB0022
0x00FD85B0: 6943411802980FDF1199039A0AAB5B8D
0x00FD85C0: 01B05A438918884204D0019869460DDF
0x00FD85D0: 0320BBE7029816A940010D1801986B46
0x00FD85E0: 202229000BDF2028C4D0019869460DDF
0x00FD85F0: 0420BBE70598251A280014DF040004D1
0x00FD8600: 019869460DDF0D20A0E72900FFF77AEF
0x00FD8610: 002054E003980068012802D0022817D0
0x00FD8620: B4E003980269002A47D0806805996B46
0x00FD8630: 401A211801980BDF0399096988423CD0
0x00FD8640: 019869460DDF200015DF0A20C043B3E0
0x00FD8650: 0398006914DF0490002806D101986946
0x00FD8660: 0DDF200015DF062070E7039804990269
0x00FD8670: 01986B460BDF03990969884208D00198
0x00FD8680: 69460DDF049815DF200015DF07206DE7
0x00FD8690: 002066AB05E0192A02DA496892009950
0x00FD86A0: 401C049AC10051180A68002AF3D17899
0x00FD86B0: 002000292FD1049815DF0298401C0290
0x00FD86C0: 059841420791029809A9898D884264DA
0x00FD86D0: 400116A908180390684601B4049801AB
0x00FD86E0: 4168029800220FDF0499496801B08842
0x00FD86F0: 90D0019869460DDF200015DF052025E7
0x00FD8700: 049DEB189A18059B5218116862581219
0x00FD8710: D21A6250401C789AC1009142CBD20399
0x00FD8720: 779B8968049D4A42C100AD186D18ED18
0x00FD8730: 6D682D062D0E0695FF2DEBD0FD2DDFD0
0x00FD8740: 079D069E6519002EE4D0022E02D0172E
0x00FD8750: 09D012E0049EF3189A18521811686A58
0x00FD8760: 12196A50D6E7049EF3189A18059B5218
0x00FD8770: 11686A581219D21AF3E7019869460DDF
0x00FD8780: 200015DF049815DF0C205FE701986946
0x00FD8790: 0DDF200015DF0B20D8E6019869460DDF
0x00FD87A0: 00F05EF9079D0F9E829B819A80997F98
0x00FD87B0: A4196419A04700207FB004B070BDC046
0x00FD87C0: 7F454C4610B5A0B0694614007E22A3DF
0x00FD87D0: 0023002221006846FFF79AFE002801D0
0x00FD87E0: 002000E0012020B010BD000010402DE9
0x00FD87F0: 0040A0E10700A0E3440C80E3540100EF
0x00FD8800: 0C009FE5001090E50400A0E11040BDE8
0x00FD8810: 3AFEFFEA0090FDA010402DE9AFDF4DE2
0x00FD8820: 6F0F8DE20140A0E11A0000EF70109FE5
0x00FD8830: 6F0F8DE2170000EF0D20A0E16F1F8DE2
0x00FD8840: 04008DE26B0000EF000050E30F00000A
0x00FD8850: 0410A0E16F0F8DE21A0000EFAD108DE2
0x00FD8860: 6F0F8DE2170000EF0030A0E30020A0E3
0x00FD8870: 0210A0E16F0F8DE224FFFFFA0D10A0E1
0x00FD8880: 04008DE26C0000EF000050E3EFFFFF1A
0x00FD8890: 0D10A0E104008DE26D0000EFAFDF8DE2
0x00FD88A0: 1080BDE8688AFDA030402DE930509FE5
0x00FD88B0: 0040A0E1280200EB140085E28C0000EF
0x00FD88C0: 20009FE50520A0E10010A0E3710100EF
0x00FD88D0: 14009FE5001090E50400A0E13040BDE8
0x00FD88E0: 06FEFFEA708AFDA01888FDA00490FDA0
0x00FD88F0: 80280BDB0649081880380078802805DB
0x00FD8900: 044AFF21C94340001018405A7047C046
0x00FD8910: E88AFDA0688BFDA030B504000D0004E0
0x00FD8920: FFF7E6FF010028001CDF2078641C0028
0x00FD8930: F6D130BD30402DE90040A0E10150A0E1
0x00FD8940: 0010A0E30500A0E1260100EF0510A0E1
0x00FD8950: 0400A0E1EFFFFFFA3080BDE830402DE9
0x00FD8960: 0040A0E10F00A0E3250100EF0050A0E1
0x00FD8970: 071F8FE2240100EF0020A0E30510A0E1
0x00FD8980: 0400A0E1940000EF0500A0E1290100EF
0x00FD8990: 3080BDE874787400F0472DE968409FE5
0x00FD89A0: 68609FE5460100EF005094E5007096E5
0x00FD89B0: 018085E22400A0E390080AE00A00A0E1
0x00FD89C0: 140000EF0090A0E10A10A0E11D0100EF
0x00FD89D0: 000057E30600000A2400A0E3900502E0
0x00FD89E0: 0710A0E10900A0E11E0100EF0700A0E1
0x00FD89F0: 150000EF008084E5009086E5470100EF
0x00FD8A00: 850185E0000189E0F087BDE8A8F743A8
0x00FD8A10: B4F743A870402DE90040A0E10150A0E1
0x00FD8A20: FF00A0E3250100EF0060A0E10410A0E1
0x00FD8A30: 1F0100EF5C10A0E30600A0E11C0000EF
0x00FD8A40: 0510A0E10600A0E1210100EF0600A0E1
0x00FD8A50: C1FFFFEB0600A0E1290100EF7080BDE8
0x00FD8A60: 004B1847D881FDA02A2E656C66000000
0x00FD8A70: 303A5C5A42696E5C4461656D6F6E735C
0x00FD8A80: 00000000D48AFDA055000000FF077805
0x00FD8A90: D88AFDA0E08AFDA0C587FDA000000000
0x00FD8AA0: 303A5C5A42696E5C696D675C656C665F
0x00FD8AB0: 736D616C6C2E706E67000000303A5C5A
0x00FD8AC0: 42696E5C696D675C656C665F6269672E
0x00FD8AD0: 706E6700656C6600A08AFDA000000000
0x00FD8AE0: BC8AFDA0000000005F5F275F223AC5D8
0x00FD8AF0: 5F255F3C5F5F5F5F5F27272222072D2D
0x00FD8B00: 5F545F3E5F5F5F5FFFF6F75FFD83B315
0x00FD8B10: F063F23CBF2D52F4F82B4969A3E714FA
0x00FD8B20: F1FCF33E5F5F5FF58081828384858687
0x00FD8B30: 88898A8B8C8D8E8F9091929394959697
0x00FD8B40: 98999A9B9C9D9E9FA0A1A2A3A4A5A6A7
0x00FD8B50: A8A9AAABACADAEAFE0E1E2E3E4E5E6E7
0x00FD8B60: E8E9EAEBECEDEEEF1004110412041304
0x00FD8B70: 1404150416041704180419041A041B04
0x00FD8B80: 1C041D041E041F042004210422042304
0x00FD8B90: 2404250426042704280429042A042B04
0x00FD8BA0: 2C042D042E042F043004310432043304
0x00FD8BB0: 3404350436043704380439043A043B04
0x00FD8BC0: 3C043D043E043F042D002D002D00A600
0x00FD8BD0: 2B00A600A600AC00AC00A600A600AC00
0x00FD8BE0: 2D002D002D00AC004C002B0054002B00
0x00FD8BF0: 2D002B00A600A6004C003304A6005400
0x00FD8C00: A6003D002B00A600A600540054004C00
0x00FD8C10: 4C002D0033042B002B002D002D002D00
0x00FD8C20: 2D00A600A6002D004004410442044304
0x00FD8C30: 4404450446044704480449044A044B04
0x00FD8C40: 4C044D044E044F040104510404045404
0x00FD8C50: 070457040E045E04B0002220B7007600
0x00FD8C60: 1621A400A600A000312E322E35000000
0x00FD8C70: 303A5C5A42696E5C696D675C00000000
0x00FD8C80: 2E706E6700000000
;RET_ADRS
0x00FD9000: FF398CA0C5378CA0317856A1779BCCA0
0x00FD9010: 8D9BCCA05784CCA0
;HELPER_PROC,HELPER_PROC_DATA
0x00FD9100: 0F402DE90D00A0E1530100EF000050E3
0x00FD9110: 0F80BD08F230DDE104009DE5010053E3
0x00FD9120: 0500001A08209DE5000052E30F80BD08
0x00FD9130: 0C109DE532FF2FE10F80BDE801002DE9
0x00FD9140: F420DDE1FC1FA0E30900A0E3420C80E3
0x00FD9150: 000100EF04D08DE20F80BDE800402DE9
0x00FD9160: 1C209FE51C109FE50000A0E301002DE9
0x00FD9170: 8030A0E30700A0E3440C80E3050100EF
0x00FD9180: 0180BDE80091FDA0E091FDA000402DE9
0x00FD9190: 460100EF410100EF9010A0E30900A0E3
0x00FD91A0: 420C80E3000100EF470100EF0080BDE8
0x00FD91B0: 00402DE904002DE90030A0E10700A0E3
0x00FD91C0: 440C80E30120A0E10110A0E3000100EF
0x00FD91D0: 0180BDE810B514008847200015DF10BD
0x00FD91E0: 48454C5045520000
;PIT_PNG_EXTENSION
0x00FD9500: 10402DE90040A0E11E0100EB000050E3
0x00FD9510: 1080BD180400A0E114C51FE53CFF2FE1
0x00FD9520: 040050E11CC51FE51CFF2FE100B50800
0x00FD9530: 14DF00BD00B5080015DF00BD31402DE9
0x00FD9540: 0140A0E10250A0E15E0100EF000090E5
0x00FD9550: 0D30A0E10520A0E10410A0E10B0000EF
0x00FD9560: 3180BDE8F0412DE928D04DE20040A0E3
0x00FD9570: 00408DE504408DE50C308DE28020A0E3
0x00FD9580: 801CA0E30A0000EF08008DE5010070E3
0x00FD9590: 0100001A0000A0E3C30000EA0C00A0E3
0x00FD95A0: 140000EF0050A0E1004085E5044085E5
0x00FD95B0: 084085E508009DE50C308DE20820A0E3
0x00FD95C0: 20108DE20B0000EF080050E31B00001A
0x00FD95D0: 0810A0E320008DE2B20100EF000050E3
0x00FD95E0: 1600000AC8029FE501002DE9C4029FE5
0x00FD95F0: 01002DE90000A0E301002DE90030A0E1
0x00FD9600: 0020A0E10010A0E1AC029FE5A80100EF
0x00FD9610: 0C008DE5000050E30CD08DE20700000A
0x00FD9620: 560100EF04008DE5000050E30F00001A
0x00FD9630: 0020A0E30210A0E10D00A0E1570100EF
0x00FD9640: 000095E5150000EF040095E5150000EF
0x00FD9650: 080095E5150000EF0500A0E1150000EF
0x00FD9660: 08009DE50C108DE20D0000EFC8FFFFEA
0x00FD9670: 00009DE5620100EF000050E30020A013
0x00FD9680: 04108D12EBFFFF1A30229FE500009DE5
0x00FD9690: 08108DE2A90100EF00009DE50810A0E3
0x00FD96A0: 580100EF04109DE500009DE5590100EF
0x00FD96B0: 0000A0E301002DE901002DE901002DE9
0x00FD96C0: 24008DE201002DE92C008DE201002DE9
0x00FD96D0: 18109DE528308DE214009DE524208DE2
0x00FD96E0: 5A0100EF30009DE514D08DE2100050E3
0x00FD96F0: 0100001A00009DE5AF0100EF1C009DE5
0x00FD9700: 080050E3010000AA00009DE5B00100EF
0x00FD9710: 18009DE5030050E30100001A00009DE5
0x00FD9720: AB0100EF18009DE5000050E304005013
0x00FD9730: 0100001A00009DE5B10100EF00009DE5
0x00FD9740: 04109DE51020A0E3AC0100EF000050E3
0x00FD9750: 0100000A00009DE5AD0100EF00009DE5
0x00FD9760: 0120A0E3FF10A0E3AE0100EF04109DE5
0x00FD9770: 00009DE50080A0E3AA0100EF00009DE5
0x00FD9780: 04109DE55F0100EF140000EF000085E5
0x00FD9790: 0800A0E3140000EF0060A0E1086085E5
0x00FD97A0: 10009DE514109DE5910000E08000A0E1
0x00FD97B0: 140000EF040085E50070A0E1000000EA
0x00FD97C0: 018088E214009DE5000058E11B00002A
0x00FD97D0: 001095E500009DE50020A0E3600100EF
0x00FD97E0: 0400A0E17ECEA0E30A0000EA0020D1E5
0x00FD97F0: F83CA0E3022403E00130D1E50210D1E5
0x00FD9800: 83310CE0022083E1A111A0E1021081E1
0x00FD9810: B210C7E0010080E210109DE5010050E1
0x00FD9820: E6FFFF2A001095E5001181E00320D1E5
0x00FD9830: 000052E3ECFFFF1AE01CA0E3F3FFFFEA
0x00FD9840: 080095E50810A0E3B210C0E1080095E5
0x00FD9850: 10109DE50010C0E5080095E514109DE5
0x00FD9860: 0110C0E5080095E5041095E5041080E5
0x00FD9870: 04109DE500009DE55D0100EF0020A0E3
0x00FD9880: 04108DE20D00A0E1570100EF000095E5
0x00FD9890: 150000EF0500A0E1150000EF08009DE5
0x00FD98A0: 0C108DE20D0000EF0600A0E128D08DE2
0x00FD98B0: F081BDE83595FDA02D95FDA0688CFDA0
0x00FD98C0: 3C95FDA007E0412A02DB5B2A00DA2032
0x00FD98D0: 491C0270401C0A78002AF4D100210170
0x00FD98E0: 704700003030A0E3010000EA010040E0
0x00FD98F0: 013083E2010050E1FBFFFF2A0030C2E5
0x00FD9900: 1EFF2FE110402DE90040A0E10100A0E1
0x00FD9910: 0A0050E31600003A640050E31000003A
0x00FD9920: FA0F50E30A00003A1010A0E39C1D81E3
0x00FD9930: 010050E10200003A0420A0E1E8FFFFEB
0x00FD9940: 014084E20420A0E1FA1FA0E3E4FFFFEB
0x00FD9950: 014084E20420A0E16410A0E3E0FFFFEB
0x00FD9960: 014084E20420A0E10A10A0E3DCFFFFEB
0x00FD9970: 014084E2300080E20100C4E40000A0E3
0x00FD9980: 0000C4E51080BDE8F0432DE940DF4DE2
0x00FD9990: 0040A0E1240EA0E10A0050E30300001A
0x00FD99A0: 0410A0E10D00A0E1C5FFFFFA080000EA
0x00FD99B0: 44519FE50D00A0E10510A0E1C0FFFFFA
0x00FD99C0: 0410A0E1CEFFFFEB101085E20D00A0E1
0x00FD99D0: 170000EF24519FE5460100EF0560A0E1
0x00FD99E0: 0070A0E30080A0E3000000EA0680A0E1
0x00FD99F0: 006096E5000056E30D00000A040096E5
0x00FD9A00: 0D10A0E1190000EF000050E3F6FFFF1A
0x00FD9A10: 000058E3000096150000881500009515
0x00FD9A20: 0000861500608515470100EF080096E5
0x00FD9A30: 2F0000EA470100EF0D00A0E1C8FEFFEB
0x00FD9A40: 0060A0E10C00A0E3140000EF0040A0E1
0x00FD9A50: 0D00A0E11B0000EF010080E2140000EF
0x00FD9A60: 040084E50D10A0E11A0000EF086084E5
0x00FD9A70: 460100EF000095E50090A0E3000084E5
0x00FD9A80: 004085E50560A0E10680A0E1006096E5
0x00FD9A90: 000056E30100001A470100EF130000EA
0x00FD9AA0: 019089E2330059E3F6FFFF3A007088E5
0x00FD9AB0: 470100EF080096E5000050E30300000A
0x00FD9AC0: 040090E5150000EF080096E5150000EF
0x00FD9AD0: 040096E50680A0E1150000EF006096E5
0x00FD9AE0: 0800A0E1150000EF000056E3F0FFFF1A
0x00FD9AF0: 080094E540DF8DE2F083BDE8708CFDA0
0x00FD9B00: B8F743A8
;PATCH_ESI
#pragma disable old_equal_ff
0x01567828: 0C1C111C0E4A9042 004B18470481FDA0




;FREAD32,FWRITE32
#pragma enable old_equal_ff
;FREAD
0x00FD9400: FBB51500002403E00199AD1B08180190
0x00FD9410: 002D0FD00948854201DB461E00E02E00
0x00FD9420: 0098074F029B01993F683200B8472418
0x00FD9430: B042E9D0200003B0F0BDC04601400000
0x00FD9440: F094FDA0
;FWRITE
0x00FD9450: FBB51500002403E00199AD1B08180190
0x00FD9460: 002D0FD00948854201DB461E00E02E00
0x00FD9470: 0098074F029B01993F683200B8472418
0x00FD9480: B042E9D0200003B0F0BDC04601400000
0x00FD9490: F494FDA0
;RET_ADRS
0x00FD94F0: 0xA112FE80,0xA112FF68
#pragma disable old_equal_ff

;------------------------- end -------------------------

