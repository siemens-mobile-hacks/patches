;S75v47
;Эльфпак
;ELFPack
;(c) Rst7/CBSIE, BoBa
;(p) Kibab
;Version: 2.2
;! доступна новая версия патча, https://patches.kibab.com/patches/details.php5?id=7723
;PatchID: 7254
;Details: https://patches.kibab.com/patches/details.php5?id=7254
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=s75v47&f=ELFPack_2_2.zip

/*
Отличия от предыдущей версии:
1. Код замены графики оптимизирован по скорости
2. Библиотеку можно подгружать из файла на диске
3. Нет глюков с регистрацией картинок в медиаплеере
4. При отсутствии функций в Библиотеке в (S)Exit пишется номер нужной функции

 I. ELFPack 2.2 prerequisites: (что нужно сделать перед установкой)
1. Отменить старый ELFLoader
2. Отменить Мастер-Патч v14
3. Отменить SWI-хук
4. Отменить Библиотеку Функций
5. Отменить ВСЕ ПАТЧИ, связанные с Мастером!!!
6. Включить телефон

Если аппарат включился и нормально работает, приступайте к установке.
ВНИМАНИЕ! ВЫПОЛНЕНИЕ ВЫШЕУКАЗАННЫХ ШАГОВ АБСОЛЮТНО НЕОБХОДИМО!

II. Установка
1. Разархивировать в корень MMC-карты архив ELFPack_2_2.zip с сохранением путей. Таким образом будет создана структура папок. Старые BCFG-файлы лучше удалить.
2. Установить патч ELFPack.vkp
3. Попробовать включить телефон.

Если аппарат включился и нормально запустились эльфы - значит, всё ОК.

III. Что теперь будет с Мастер-Патчем?
Ответ на этот вопрос следует задавать не тут. Обратитесь в ветку http://forum.siemens-club.org/viewtopic.php?TopicID=56798&page=23

ОБЯЗАТЕЛЬНО ЧИТАЙТЕ ФАЙЛЫ README В КАТАЛОГЕ ZBIN\ETC!!!
*/
/*
ELFpack v2.2 (C)2007 by Rst7/CBSIE, BoBa
Release 06.04.2007
S75sw47
Также библиотека для патчей. Версия библиотеки 070406. Для дальнейшего обновления библиотеки используйте blib-файлы,
либо применяйте патч Библиотеки Функций, не обращая внимания на ошибки при применении.

чтобы успешно использовать эльфов необходимо и достаточно установить ELFpack

Инструкция: ставим ELFPack, льем на телефон эльфа, идем кардэксплорером до него тыкаемся и наслаждаемся...

Загрузка всех .elf-файлов из каталога 4:\ZBin\Daemons
Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
Обрабатывается при помощи ExtD.elf - необходим в каталоге 4:\ZBin\Daemons
по файлу 4:\ZBin\etc\extension.cfg. Формат файла описан в etc\ext_format.txt:

Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив
ММС.zip с сохранением путей.

Расширение таблицы регистрации расширений файлов

Расширение PIT при помощи .png файлов
Обрабатываются файлы из каталога 4:\ZBin\img\ с именами %d.png
для замены штатных картинок или из эльфов - указатель на строку с именем файла вместо ID (аналогично ESI).
Картинки кешируются для ускорения последующего доступа к ним. чтобы посмотреть, какие картинки находятся в кеше,
а какие нет, используйте утилиту PngExtStat (в каталоге utilities).
Замена штатных картинок прошивки производится записью оных в каталог 4:\ZBin\img и последующей перезагрузкой.

Загрузка библиотеки функций из файла 4:\ZBin\swi.blib
Файл должен иметь размер 16384 байт (16 КБ), при загрузке файла используемая библиотека будет пополнена  функциями из blib.
При отсутствии требуемой эльфами функции в библиотеке телефон выключается, в (S)Exit пишется номер отсутствующей функции.

В состав эльфпака вошёл обновлённый X-Task 2.0. Теперь он сворачивает эльфы при входящем звонке, больше не будет
досадных завершений в самый неподходящий момент.

Также теперь демон GprsD поддерживает работу с Явой и родным браузером телефона. Инструкцию по настройке
и заполнению новых полей можно найти в файле etc\GPRSD_Readme.txt

В папке ZBin\NatICQ - клиент нативной аси. Там же картинки статусов и звуки. Картинки смайлов уже размещены в ZBin\img.
В папке ZBin\SieJC - Jabber-клиент SieJC. Картинки статусов прилагаются.
В папке ZBin\EMailClient - Почтовый клиент. Картинки прилагаются. Состоит из двух частей - собственно клиента
и приложения для скачивания почты с сервера (MailDaemon). В дальнейшем оно действительно будет демоном.
*/
+0074000
#pragma enable old_equal_ff
0000: 0xA0090590   ;   0: void loopback0()
0004: 0xA0090590   ;   1: void loopback1()
0008: 0xA0090590   ;   2: void loopback2()
000C: 0xA0090590   ;   3: void loopback3()
0010: 0xA0090590   ;   4: void loopback4()
0014: 0xA026FA51   ;   5: DecToHex
0018: 0xA01ABEC8   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B642C   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0234760   ;   9: SwitchPhoneOff
0028: 0xA025307C   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA025313C   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA025326C   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0252FD0   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0253000   ;   E: fflush
003C: 0xA0253030   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0252C74   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0252AD4   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0252DC8   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FC2D51   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FC47BD   ;  17: char *strcat (char *,const char *)
0060: 0xA0FC47DD   ;  18: char *strchr (const char *,int)
0064: 0xA0FC4800   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FC489D   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FC491D   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F77C9   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F777D   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA09756B9   ;  1E: IMGHDR *GetPITaddr(int num)
;07C:              ;  1F: DrawMainScreen

;080:              ;  20: DrawScreenSaver
0084: 0xA09757E3   ;  21: int GetImgHeight(int picture)
0088: 0xA09757F3   ;  22: int GetImgWidth(int picture)
008C: 0xA029D7F1   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
;090:              ;  24: DrawImage2
0094: 0xA029CCEB   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A01E01   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029CF11   ;  27: AddIconToIconbar
;0A0:              ;  28: getEELiteMaxID
;0A4:              ;  29: getEEFullMaxID
00A8: 0xA01E5CB4   ;  2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ;  2B: getEELiteBlockSizeVersion
;0B0:              ;  2C: getEEFullBlockSizeVersion
;0B4:              ;  2D: StartWriteEELiteBlock
;0B8:              ;  2E: FinishWriteEELiteBlock
;0BC:              ;  2F: DeleteEELiteBlock

;0C0:              ;  30: WriteEELiteBlock
00C4: 0xA0FC4A65   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0282CA0   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0279680   ;  33: PlaySound2
00D0: 0xA0B3732C   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: GetATCmdString
00DC: 0xA09A49AD   ;  37: OriginalATCGSN
;0E0:              ;  38: PostAtCommand
00E4: 0xA08EA835   ;  39: SendATAnswerStr
;0E8:              ;  3A: mfree_high
00EC: 0xA0FC3AB9   ;  3B: MemChr
00F0: 0xA025317C   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
;0F8:              ;  3E: LoadProcesses
00FC: 0xA0970A1D   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028B719   ;  40: GetVibraStatus
0104: 0xA08FC087   ;  41: GetProvider
;108:              ;  42: IsScreenSaver
010C: 0xA0903FE3   ;  43: int IsUnlocked(void)
;110:              ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA027B4B0   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0AA7CEC   ;  4B: StartMidlet
0130: 0xA09B434D   ;  4C: GetMissedCallsCount
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA097724D   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA097725D   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA09772C7   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D521CB   ;  51: GetNetAccessMode
0148: 0xA8D07CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA0FC3ADD   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C1851   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FC3F38   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FC3FDC   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
;168:              ;  5A: KeypressOn
;16C:              ;  5B: KeypressOff
0170: 0xA01D1300   ;  5C: unsigned char GetCPUClock()
0174: 0xA03323DF   ;  5D: unsigned char GetCPULoad()
;178:              ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA032DFA1   ;  60: ShowMainMenu
0184: 0xA02CDF23   ;  61: ShowNativeMenu
0188: 0xA028B6E1   ;  62: SetVibraStatus
;18C:              ;  63: MS_Wallpaper_Flush
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0252B4C   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0252BCC   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0252A94   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D0BD6D   ;  6E: int IsCalling()
01BC: 0xA0951608   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0951638   ;  70: int *GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0D0C56F   ;  73: int GetTypeOfCall(int type)
;1D0:              ;  74: GetFunctionPointer
01D4: 0xA09752B5   ;  75: void StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
;1D8:              ;  76: SetWindowText
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA0901A29   ;  78: GetTimeFormat
01E4: 0xA0903185   ;  79: void DrawObject_2(DRWOBJ *)
;1E8:              ;  7A: ClearWindowBuffer
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B0CC7   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D0B72F   ;  7D: IsIncognitoCall
01F8: 0xA0D0ADCD   ;  7E: Rand
01FC: 0xA052D18D   ;  7F: IsPlayerOn

0200: 0xA05E8B2D   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FC4330   ;  81: HexToDec
0208: 0xA052D26F   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0252E40   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
0220: 0xA022F664   ;  88: GetAccessoryType
0224: 0xA09062B8   ;  89: GetLangMesIntoWS
0228: 0xA0252A24   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA02532D8   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04D40F1   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0301E13   ;  8D: GetProfileName
0238: 0xA0252CDC   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252D60   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02531F4   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0252C0C   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09EA270   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA023476C   ;  93: RebootPhone
0250: 0xA04D428D   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04D41CF   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02A6CAB   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
;270:              ;  9C: CloseScreensaver
0274: 0xA02FE4A3   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA09682A5   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F76BB   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA02537BC   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0968D69   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6E75   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA09515E0   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D46035   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D0CF2D   ;  A8: char IsGPRSConnected()
02A4: 0xA09047CB   ;  A9: void KbdLock()
02A8: 0xA0A1220D   ;  AA: char *GetCurrentLocale()
02AC: 0xA0090590   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
;2BC:              ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
;2CC:              ;  B3: Seconds2iTime
02D0: 0xA090059F   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026EA13   ;  B5: char GetWeek(TDate *)
02D8: 0xA028AEE7   ;  B6: char GetProfile()
02DC: 0xA028AF47   ;  B7: char SetProfile(char)
02E0: 0xA0FC4150   ;  B8: int sdiv(int denom,int number)
02E4: 0xA09042AF   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC4138   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC4228   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FC42EC   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA01A8614   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D036D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D036FA   ;  C9: RamLS
0328: 0xA8E2ED02   ;  CA: RAMNET *RamNet()
032C: 0xA8D78BE4   ;  CB: RamRingtoneStatus
0330: 0xA8DE9710   ;  CC: RamMissedCalls
;334:              ;  CD: RamMissedSMS
0338: 0xA8D2977C   ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

0340: 0xA8D6A354   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8DD3378   ;  D4: RamMissedMes
0354: 0xA8D34F1C   ;  D5: RamIsLocked
0358: 0xA8DACBB8   ;  D6: RamNetOnline
035C: 0xA8DADC94   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
;368:              ;  DA: RamIsShutdown
036C: 0xA8E920A4   ;  DB: RamMainscreenAccuIcon
;370:              ;  DC: RamRandSeed
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8D77F70   ;  DE: RamIsSimPresent
037C: 0xA8D34EF4   ;  DF: RamPressedKey

0380: 0xA8D29908   ;  E0: char *RamScreenBuffer()
0384: 0xA8E3EA94   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0300B95   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: 
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB9934   ; 106: CSMROOT *CSM_root()
041C: 0xA096F3CF   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA096F3E1   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA096F49D   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029BE0D   ; 10F: void freeUSSD()

0440: 0xA026FE29   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029BE49   ; 111: char GetTypeUSSD()
0448: 0xA029BE59   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FC48ED   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FC4969   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC4999   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC49E9   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC4A65   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FC4A7D   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FC4AA5   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC4B21   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC2CFD   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FC3ADD   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FC3F38   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FC3FDC   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F76BB   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F76DD   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F7701   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F7735   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F6F43   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA09682A5   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA0968D69   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F792D   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F754B   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F75C5   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6E75   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0903185   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA096F579   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA096F581   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA096F589   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0970A1D   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0970A41   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0970A51   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0970A6F   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC4095   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA09752B5   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA09752CB   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0977BB7   ; 135: int IsGuiOnTop(int id)
04D8: 0xA0977CDB   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA0977CEB   ; 137: int CreateGUI(void *gui)
04E0: 0xA0977CF9   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA0977D33   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0977D43   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0977D53   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA0977D61   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA0977D6F   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0977D7F   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0977E13   ; 13F: void DirectRedrawGUI(void)

0500: 0xA0977E2B   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA0977E1F   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FF9AB   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA0977231   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA0972D35   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0970F69   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0970ED3   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA0972D7F   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA0977BC5   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A17B6D   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A17BB9   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A01883   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA0A01DD7   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0976DCF   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int zero2,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136969   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D25   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377DD   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135BF9   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AA7   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0136381   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136727   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0137397   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373D9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA013601D   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0136297   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F2F   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2308   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC4D54   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A0BD4B   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A0B189   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0B499   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A0BEE7   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A08B11   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A11DEF   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A11D85   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A11D91   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0252EB8   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA02536C8   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05641F8   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0504AAC   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0505920   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0955141   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A49005   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A494FD   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A49301   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A49831   ; 176: int closesocket(int socket)
05DC: 0xA0A49739   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A49923   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A49D91   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A50A01   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A50A0D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E25B8C   ; 17C: int *socklasterr(void)
05F4: 0xA0977D8F   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0977D9F   ; 17E: void RestartIDLETMR(void)
05FC: 0xA0977DAB   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A11C89   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A11BE1   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A11C29   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A11679   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A0B4D3   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0990FA5   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA09920B5   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F5E60   ; 18D: int available0(int sock)
0638: 0xA0D45FCF   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA097B52F   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097CC99   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0977EA1   ; 196: void RefreshGUI(void)
065C: 0xA097CCF9   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA097CE11   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097CC6B   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA097C60B   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A1166D   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D1B30   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D1AD4   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325CD   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0132703   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013353F   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0959D95   ; 1A7: char *Get_CC_NC()
06A0: 0xA013682D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013787F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136EF7   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0137999   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0136285   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0137999   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394A5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA013797D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA013943B   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379D1   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C59   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A036F3   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA0A0174F   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
;6D4:              ; 1B5: 
06D8: 0xA0A4A805   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA099AD25   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F4469F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F44383   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F4457F   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E90A3D   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E90ACB   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E90C97   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E8D22F   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA09794BD   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0979425   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A27388   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A11C11   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A11C1D   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0A0C09D   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A0B123   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A0B117   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A0B10B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A0B0F5   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A0B0DD   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A0B1C5   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA0BAB33C   ; 1CF: REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA04D3DCF   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A11DB1   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A11DBD   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A11C59   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A11C65   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DF678   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0137999   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139507   ; 1D7: void png_set_invert_mono(png_structp png_ptr)


0760: 0xA0A11CB9 ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A11CD1 ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA05396B1   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8E87CFC   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F703F   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F7061   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A11D79   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA0A11E27   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);

0780: 0xA097E963   ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA0903289   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F7C11   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F7CC9   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA09760D3   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A11ED9   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA097B9E9   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
07AC: 0xA8DCD1E6   ; 1EB: char *RAM_IMSI() 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
;7BC:              ; 1EF: 

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DF204   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: GetSessionAge 
;7D0:              ; 1F4: 
;7D4:              ; 1F5:
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D059AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D208F0   ; 1FB: char *RamMediaIsPlaying()
;7F0:              ; 1FC:
07F4: 0xA899FAFC   ; 1FD: RamCurrentArtist
07F8: 0xA8D07F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA032DDDB   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0;ElfLoader+ESI+RunElfsByExtention+FSWI

;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
0x000745C4: 288507A0148507A0
;SWILIB_FUNC19C
0x00074670: 4D8507A0
;SWILIB_FUNC1B8_1BB
0x000746E0: F4ABD7A8F8ABD7A8F0ABD7A800ACD7A8
;CODE,DATA_C
0x00078000: 11FF2FE1010200EB0100A0E3F081BDE8
0x00078010: 10402DE90040A0E1C00300EB000050E3
0x00078020: 1080BD180400A0E114C09FE500C09CE5
0x00078030: 3CFF2FE1040050E108C09FE500C09CE5
0x00078040: 1CFF2FE1589107A05C9107A00F402DE9
0x00078050: 060200EB0070A0E10040A0E30F80BDE8
0x00078060: 005080E20F402DE9000200EB0060A0E1
0x00078070: 0F80BDE80010A0E30F402DE9FB0100EB
0x00078080: 0050A0E10F80BDE80F402DE9F70100EB
0x00078090: 0070A0E10050A0E30F80BDE81EFF2FE1
0x000780A0: 00109DE5200011E3192F8F020400000A
0x000780B0: C70050E3B200DE0014E08D0501E08EE2
0x000780C0: 51208FE250109FE5001091E5000051E3
0x000780D0: 48109F05803CC0E3400D53E30900008A
0x000780E0: 800C10E300402D090040FD0803C191E7
0x000780F0: 04C08D150300001A01007CE320209F05
0x00078100: 04008D0514208DE50100BDE800F069E1
0x00078110: 0F80FDE81CFF2FE160470000F0ABD7A8
0x00078120: 004007A0248907A004E02DE500200FE1
0x00078130: 040000EF00100FE1C01081E301F021E1
0x00078140: 0000A0E10000A0E10000A0E17AFF17EE
0x00078150: 0000A0E10000A0E10000A0E1FAFFFF1A
0x00078160: 0000A0E39A0F07EE0000A0E10000A0E1
0x00078170: 0000A0E10000A0E1150F07EE0000A0E1
0x00078180: 0000A0E10000A0E10000A0E102F021E1
0x00078190: 04F09DE400402DE91D0100EF0080BDE8
0x000781A0: 7FB5FFB00025ED430595642166A8FFF7
0x000781B0: F2EF7F9800246B46802211020ADF0190
0x000781C0: 002801D528003EE16B46342209A90BDF
0x000781D0: 342805D0019869460DDF0120C04332E1
0x000781E0: 09989A49884204D0019869460DDF0220
0x000781F0: F4E709A8808D0B2802D30820C04322E1
0x00078200: 049416AD083511E0306801280AD12868
0x00078210: 0599884200D20590E9684018844201D2
0x00078220: 2868441804982035401C0490049809A9
0x00078230: 898D884227DA08A801B4119805990AAE
0x00078240: 768D01AB00227143411802980FDF1199
0x00078250: 059A0AAB5B8D01B05A438918884204D0
0x00078260: 019869460DDF0320B8E701982E00083E
0x00078270: 6B46202231000BDF2028C5D001986946
0x00078280: 0DDF0420BAE70598251A280014DF0400
0x00078290: 04D1019869460DDF0D209FE72900FFF7
0x000782A0: 7AEF0020049016A8083053E028680128
0x000782B0: 02D0022817D0B0E002988268002A44D0
0x000782C0: 006805996B46401A211801980BDF0299
0x000782D0: 8968884239D0019869460DDF200015DF
0x000782E0: 0A20C043AFE00298806814DF03900028
0x000782F0: 06D1019869460DDF200015DF06206DE7
0x00078300: 02980399826801986B460BDF02998968
0x00078310: 884208D0019869460DDF039815DF2000
0x00078320: 15DF07206AE7039866AA05E0192902DA
0x00078330: 436889005350083001680029F6D17899
0x00078340: 002000292ED1039815DF0498401C0490
0x00078350: 029820300290059841420791049809A9
0x00078360: 898D884260DA029D684601B4083D6968
0x00078370: 01AB029800220FDF696801B0884295D0
0x00078380: 019869460DDF200015DF052026E7039D
0x00078390: EB189A18059B5218116862581219D21A
0x000783A0: 6250401C789AC1009142CCD20299779B
0x000783B0: 0968039D4A42C100AD186D18ED186D68
0x000783C0: 2D062D0E0695FF2DEBD0FD2DDFD0079D
0x000783D0: 069E6519002EE4D0022E02D0172E09D0
0x000783E0: 12E0039EF3189A18521811686A581219
0x000783F0: 6A50D6E7039EF3189A18059B52181168
0x00078400: 6A581219D21AF3E7019869460DDF2000
0x00078410: 15DF039815DF0C2063E7019869460DDF
0x00078420: 200015DF0B20D9E6019869460DDF00F0
0x00078430: 9FFA079D0F9E829B819A80997F98A419
0x00078440: 6419A04700207FB004B070BD7F454C46
0x00078450: 10B5A0B0694614007E22A3DF00230022
0x00078460: 21006846FFF79CFE002801D0002000E0
0x00078470: 012020B010BD000000402DE914D04DE2
0x00078480: 0D00A0E1530100EF000050E31200000A
0x00078490: 04309DE508009DE5010053E30600001A
0x000784A0: 0C209DE5000052E30B00000A10109DE5
0x000784B0: 32FF2FE114D08DE20080BDE801002DE9
0x000784C0: 04209DE5AE10A0E3DE1C81E30900A0E3
0x000784D0: 420C80E3000100EF04D08DE214D08DE2
0x000784E0: 0080BDE800402DE91C209FE51C109FE5
0x000784F0: 0000A0E301002DE98030A0E30A00A0E3
0x00078500: 440C80E3050100EF0180BDE8788407A0
0x00078510: 5C9207A000402DE9460100EF410100EF
0x00078520: 470100EF0080BDE800402DE904002DE9
0x00078530: 0030A0E10A00A0E3440C80E30120A0E1
0x00078540: 0110A0E3000100EF0180BDE810B51400
0x00078550: 8847200015DF10BD10402DE90040A0E1
0x00078560: 0A00A0E3440C80E3540100EF0C009FE5
0x00078570: 001090E50400A0E11040BDE89FFEFFEA
0x00078580: 4C9107A010402DE948D04DE240DE4DE2
0x00078590: 0140A0E1D20F8DE21A0000EF74109FE5
0x000785A0: D20F8DE2170000EF0D20A0E1D21F8DE2
0x000785B0: 04008DE26B0000EF000050E30F00000A
0x000785C0: 0410A0E1D20F8DE21A0000EFB9108DE2
0x000785D0: D20F8DE2170000EF0030A0E30020A0E3
0x000785E0: 0210A0E1D20F8DE2ECFEFFFA0D10A0E1
0x000785F0: 04008DE26C0000EF000050E3EFFFFF1A
0x00078600: 0D10A0E104008DE26D0000EF48D08DE2
0x00078610: 40DE8DE21080BDE8609107A010B58BB0
0x00078620: 6A460024E44301A984DFA04201D12000
0x00078630: 00E002980BB010BDF0402DE92C419FE5
0x00078640: 38D04DE2007094E5000057E30300000A
0x00078650: 0000A0E3000084E50700A0E1150000EF
0x00078660: 0C519FE50070E0E3440085E2EAFFFFFA
0x00078670: 070050E13B00000A400C50E30300000A
0x00078680: 0510A0E10100A0E3480100EF190000EA
0x00078690: 0D30A0E18020A0E3801CA0E3440085E2
0x000786A0: 0A0000EF0060A0E1070056E12D00000A
0x000786B0: 400CA0E3140000EF0070A0E10D30A0E1
0x000786C0: 402CA0E30710A0E10600A0E10B0000EF
0x000786D0: 400C50E30D10A0E10600A0E10700000A
0x000786E0: 0D0000EF181085E20100A0E3480100EF
0x000786F0: 0700A0E1150000EF38D08DE2F080BDE8
0x00078700: 0D0000EF6C109FE50060A0E30700A0E1
0x00078710: 0620E0E1003090E5020053E10900000A
0x00078720: 00C091E502005CE10C0053110700000A
0x00078730: 0620A0E12C1085E204008DE2160000EF
0x00078740: 04108DE2E7FFFFEA003091E5003080E5
0x00078750: 016086E2041081E2040080E2400D56E3
0x00078760: EBFFFFBA007084E538D08DE2F080BDE8
0x00078770: F0ABD7A8689107A0004007A030402DE9
0x00078780: 38509FE50040A0E155FFFFEBA9FFFFEB
0x00078790: 600200EB140085E28C0000EF20009FE5
0x000787A0: 0520A0E10010A0E3710100EF14009FE5
0x000787B0: 001090E50400A0E13040BDE80FFEFFEA
0x000787C0: C09107A0848507A0509107A080280BDB
0x000787D0: 0649081880380078802805DB044AFF21
0x000787E0: C94340001018405A7047C046749207A0
0x000787F0: F49207A030B504000D0004E0FFF7E6FF
0x00078800: 010028001CDF2078641C0028F6D130BD
0x00078810: 30402DE90010A0E30040A0E10250A0E1
0x00078820: 260100EF0410A0E10500A0E1F0FFFFFA
0x00078830: 3080BDE830402DE90040A0E10F00A0E3
0x00078840: 250100EF0050A0E1071F8FE2240100EF
0x00078850: 0020A0E30510A0E10400A0E1940000EF
0x00078860: 0500A0E1290100EF3080BDE874787400
0x00078870: 10402DE984409FE5000094E5000050E3
0x00078880: 0400001A0400A0E3140000EF0010A0E3
0x00078890: 001080E5000084E5040080E21080BDE8
0x000788A0: F0412DE954409FE5460100EF005094E5
0x000788B0: 2800A0E3006095E5900607E02C0087E2
0x000788C0: 140000EF0080A0E1042087E20510A0E1
0x000788D0: 1E0100EF010086E2000088E50500A0E1
0x000788E0: 150000EF008084E5470100EF0A00A0E3
0x000788F0: 900601E0010188E0040080E2F081BDE8
0x00078900: F4ABD7A8054A00B5914203D0044A1268
0x00078910: 904700BD3000FFF78EEF00BDD11D0000
0x00078920: 549107A000402DE920D04DE20020A0E1
0x00078930: 0C1F8FE20D00A0E1160000EF0D00A0E1
0x00078940: D05805EB020000EF1C109FE50230A0E3
0x00078950: 0220A0E3FF00A0E3FF0C80E3165905EB
0x00078960: 20D08DE20080BDE825640000449207A0
0x00078970: 004B1847288107A000B5080014DF00BD
0x00078980: 00B5080015DF00BD30402DE904D04DE2
0x00078990: 0140A0E10250A0E15E0100EF000090E5
0x000789A0: 0D30A0E10520A0E10410A0E10B0000EF
0x000789B0: 3180BDE8F0432DE928D04DE20040A0E3
0x000789C0: 00408DE504408DE518308DE28020A0E3
0x000789D0: 801CA0E30A0000EF14008DE5010070E3
0x000789E0: 3300000A0C00A0E3140000EF0050A0E1
0x000789F0: 004085E5044085E5084085E514009DE5
0x00078A00: 18308DE20820A0E320108DE20B0000EF
0x00078A10: 080050E31B00001A0810A0E320008DE2
0x00078A20: B20100EF000050E31600000AB0039FE5
0x00078A30: 01002DE9AC039FE501002DE90000A0E3
0x00078A40: 01002DE90030A0E10020A0E10010A0E1
0x00078A50: 94039FE5A80100EF0C008DE5000050E3
0x00078A60: 0CD08DE20700000A560100EF04008DE5
0x00078A70: 000050E31100001A0020A0E30210A0E1
0x00078A80: 0D00A0E1570100EF000095E5150000EF
0x00078A90: 040095E5150000EF080095E5150000EF
0x00078AA0: 0500A0E1150000EF14009DE518108DE2
0x00078AB0: 0D0000EF0000A0E328D08DE2F083BDE8
0x00078AC0: 00009DE5620100EF000050E30020A013
0x00078AD0: 04108D12E9FFFF1A10239FE500009DE5
0x00078AE0: 14108DE2A90100EF00009DE50810A0E3
0x00078AF0: 580100EF04109DE500009DE5590100EF
0x00078B00: 0000A0E301002DE901002DE901002DE9
0x00078B10: 1C008DE201002DE92C008DE201002DE9
0x00078B20: 18109DE520308DE214009DE51C208DE2
0x00078B30: 5A0100EF30009DE514D08DE2080050E3
0x00078B40: 010000AA00009DE5D60100EF00009DE5
0x00078B50: 04109DE51020A0E3AC0100EF000050E3
0x00078B60: 0100000A00009DE5AD0100EF1C009DE5
0x00078B70: 100050E30100001A00009DE5AF0100EF
0x00078B80: 1C009DE5080050E3010000AA00009DE5
0x00078B90: B00100EF10009DE5030050E30100001A
0x00078BA0: 00009DE5AB0100EF10009DE5040050E3
0x00078BB0: 0100001A00009DE5B10100EF10009DE5
0x00078BC0: 000050E30300000A00009DE50120A0E3
0x00078BD0: FF10A0E3AE0100EF10009DE5000050E3
0x00078BE0: 0100001A00009DE5D70100EF04109DE5
0x00078BF0: 00009DE5AA0100EF00009DE504109DE5
0x00078C00: 5F0100EF140000EF000085E50800A0E3
0x00078C10: 140000EF0060A0E1086085E510009DE5
0x00078C20: 000050E308009DE52A00000A0C109DE5
0x00078C30: 0080A0E3910000E07E9EA0E38000A0E1
0x00078C40: 140000EF040085E50070A0E1000000EA
0x00078C50: 018088E20C009DE5000058E11A00002A
0x00078C60: 001095E500009DE50020A0E3600100EF
0x00078C70: 0400A0E10A0000EA0020D1E5F83CA0E3
0x00078C80: 022403E00130D1E50210D1E5833109E0
0x00078C90: 022083E1A111A0E1021081E1B210C7E0
0x00078CA0: 010080E208109DE5010050E1E7FFFF2A
0x00078CB0: 001095E5001181E00320D1E5000052E3
0x00078CC0: ECFFFF1AE01CA0E3F3FFFFEA080095E5
0x00078CD0: 0810A0E3270000EAA081A0E1070010E3
0x00078CE0: 0C009DE501808812980009E00900A0E1
0x00078CF0: 140000EF040085E50070A0E10910A0E1
0x00078D00: 1D0100EF0090A0E30E0000EA001095E5
0x00078D10: 0110D0E7000051E30400000AA01187E0
0x00078D20: 0020D1E507C000E2332C82E10020C1E5
0x00078D30: 010080E208109DE5010050E1F2FFFF3A
0x00078D40: 077088E0019089E20C009DE5000059E1
0x00078D50: 0600002A001095E500009DE50020A0E3
0x00078D60: 600100EF0400A0E18030A0E3F0FFFFEA
0x00078D70: 080095E50110A0E3B210C0E1080095E5
0x00078D80: 08109DE50010C0E5080095E50C109DE5
0x00078D90: 0110C0E5080095E5041095E5041080E5
0x00078DA0: 04109DE500009DE55D0100EF0020A0E3
0x00078DB0: 04108DE20D00A0E1570100EF000095E5
0x00078DC0: 150000EF0500A0E1150000EF14009DE5
0x00078DD0: 18108DE20D0000EF0600A0E128D08DE2
0x00078DE0: F083BDE8818907A0798907A0F49307A0
0x00078DF0: 888907A007E0412A02DB5B2A00DA2032
0x00078E00: 491C0270401C0A78002AF4D100210170
0x00078E10: 704700008C309FE510002DE90F20A0E3
0x00078E20: 0A0051E30A00003A93C184E00AC0A0E3
0x00078E30: A441A0E19C0404E0044041E0022284E1
0x00078E40: 93418CE0ACC1A0E10C10A0E10A0051E3
0x00078E50: F4FFFF2A301081E20110C0E4020000EA
0x00078E60: 301081E20110C0E42222A0E10F1002E2
0x00078E70: 0A0051E3F9FFFF3A2E10A0E30110C0E4
0x00078E80: 7010A0E30110C0E46E10A0E30110C0E4
0x00078E90: 6710A0E30110C0E40010A0E30010C0E5
0x00078EA0: 1000BDE81EFF2FE1CDCCCCCCF0402DE9
0x00078EB0: 5C529FE50040A0E10560A0E1460100EF
0x00078EC0: 0070A0E3000000EA0670A0E1006096E5
0x00078ED0: 000056E30E00000A040096E50410A0E1
0x00078EE0: 190000EF000050E3F6FFFF1A000057E3
0x00078EF0: 0400000A000096E5000087E5000095E5
0x00078F00: 000086E5006085E5470100EF080096E5
0x00078F10: F080BDE8470100EF0000A0E3F080BDE8
0x00078F20: F0472DE9E8419FE540DF4DE20050A0E1
0x00078F30: 250EA0E10A0050E30700001A0510A0E1
0x00078F40: 0D00A0E1AAFFFFFA0D00A0E1D6FFFFEB
0x00078F50: 0050B0E11B00000A330000EA040094E5
0x00078F60: 000050E36700000A400B55E31900002A
0x00078F70: 8000A0E394A19FE5031005E28110A0E1
0x00078F80: 3091A0E1040094E5A960A0E1257180E0
0x00078F90: 0080D7E5080019E11000000A080016E1
0x00078FA0: 0C00000A0A10A0E10D00A0E190FFFFFA
0x00078FB0: 0510A0E196FFFFEB0D00A0E1BAFFFFEB
0x00078FC0: 0050B0E11800001A0D00A0E178FEFFEB
0x00078FD0: 0050A0E1200000EA0000A0E3130000EA
0x00078FE0: 460100EF0000D7E5000089E10000C7E5
0x00078FF0: 470100EF0A10A0E10D00A0E17CFFFFFA
0x00079000: 0510A0E182FFFFEB0D00A0E1A6FFFFEB
0x00079010: 0050B0E10700000A460100EF0000D7E5
0x00079020: 000086E10000C7E5470100EF0500A0E1
0x00079030: 40DF8DE2F087BDE80D00A0E15CFEFFEB
0x00079040: 0050B0E1E3FFFF0A460100EF0000D7E5
0x00079050: 000086E10000C7E5470100EF0C00A0E3
0x00079060: 140000EF0060A0E10D00A0E11B0000EF
0x00079070: 010080E2140000EF040086E50D10A0E1
0x00079080: 1A0000EF085086E5460100EF000094E5
0x00079090: 0080A0E3000086E5006084E50400A0E1
0x000790A0: 004094E5000054E30100001A470100EF
0x000790B0: 130000EA018088E2330058E3F6FFFF3A
0x000790C0: 0010A0E3001080E5470100EF080094E5
0x000790D0: 000050E30300000A040090E5150000EF
0x000790E0: 080094E5150000EF040094E5150000EF
0x000790F0: 0400A0E1004094E5150000EF000054E3
0x00079100: F1FFFF1A080096E540DF8DE2F087BDE8
0x00079110: FC9307A0F8ABD7A810402DE924409FE5
0x00079120: 040094E5000050E30200001A400CA0E3
0x00079130: 140000EF040084E5040094E5401CA0E3
0x00079140: 1D0100EF1080BDE8F8ABD7A8FBED2FA0
0x00079150: E5EB2FA0237297A00475A2A0C35697A0
0x00079160: 2A2E656C66000000496C6C6567616C20
0x00079170: 6C6962726172792073697A6521000000
0x00079180: 43616E27742072656164206C69627261
0x00079190: 7279210046756E6374696F6E20256420
0x000791A0: 636F6E666C69637421000000343A5C5A
0x000791B0: 62696E5C7377692E626C696200000000
0x000791C0: 343A5C5A42696E5C4461656D6F6E735C
0x000791D0: 00000000309207A055000000FF089D05
0x000791E0: 649207A06C9207A0349207A03C9207A0
0x000791F0: FBC0FF7F518407A000000000343A5C5A
0x00079200: 42696E5C696D675C656C665F736D616C
0x00079210: 6C2E706E67000000343A5C5A42696E5C
0x00079220: 696D675C656C665F6269672E706E6700
0x00079230: 656C66004F70656E00000000416C744F
0x00079240: 70656E0001014E6F2066756E6374696F
0x00079250: 6E20696E206C6962A100000048454C50
0x00079260: 45520000FC9107A000000000189207A0
0x00079270: 000000005F5F275F223AC5D85F255F3C
0x00079280: 5F5F5F5F5F27272222072D2D5F545F3E
0x00079290: 5F5F5F5FFFF6F75FFD83B315F063F23C
0x000792A0: BF2D52F4F82B4969A3E714FAF1FCF33E
0x000792B0: 5F5F5FF5808182838485868788898A8B
0x000792C0: 8C8D8E8F909192939495969798999A9B
0x000792D0: 9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAAB
0x000792E0: ACADAEAFE0E1E2E3E4E5E6E7E8E9EAEB
0x000792F0: ECEDEEEF100411041204130414041504
0x00079300: 16041704180419041A041B041C041D04
0x00079310: 1E041F04200421042204230424042504
0x00079320: 26042704280429042A042B042C042D04
0x00079330: 2E042F04300431043204330434043504
0x00079340: 36043704380439043A043B043C043D04
0x00079350: 3E043F042D002D002D00A6002B00A600
0x00079360: A600AC00AC00A600A600AC002D002D00
0x00079370: 2D00AC004C002B0054002B002D002B00
0x00079380: A600A6004C003304A6005400A6003D00
0x00079390: 2B00A600A600540054004C004C002D00
0x000793A0: 33042B002B002D002D002D002D00A600
0x000793B0: A6002D00400441044204430444044504
0x000793C0: 46044704480449044A044B044C044D04
0x000793D0: 4E044F04010451040404540407045704
0x000793E0: 0E045E04B0002220B70076001621A400
0x000793F0: A600A000312E322E35000000343A5C5A
0x00079400: 42696E5C696D675C00000000
;PATCH_ONCREATE
#pragma disable old_equal_ff
0x0042DF10: E5EB2FA0 7C8707A0
;PATCH_ONCLOSE
0x0042DF24: FBED2FA0 588507A0
;PATCH_EXT2_JUMPERS
0x004CE9A4: 0A43747841455F50535F4669 0CF09FE50CF09FE50CF09FE5
0x004CE9B0: 6E6446696C65496E576F726B4469725F 0CF09FE50CF09FE54C8007A0608007A0
0x004CE9C0: 436C6F7365282920456E7472 748007A0888007A0A08807A0
;PATCH_EXT2_R5R7
0x004D3E20: 0025284F FAF7C6ED
;PATCH_EXT2_CLUST2
0x004D3E40: 2048 3800
;PATCH_EXT2_R5R1
0x004D3F1E: D84D FAF7
0x004D3F20: 0021 46ED
;PATCH_EXT2_R4R7
0x004D40B6: 0024714F FAF776EC
;PATCH_EXT2_CLUST1
0x004D40E2: 6748 3800
;PATCH_EXT2_IMPL
0x004D4100: 5F4A043A11683C2909DA28204843131D FAF758ECC046C046C046C046C046C046
0x004D4110: C01801311160 C046C046C046
;PATCH_EXT2_R6R5
0x004D41D0: 2B4E051C FAF7EAEB
;PATCH_NO_BROWSE_TXT
0x0054B726: 0830 3030
;PATCH_ENABLE_ALTOPEN
0x0059FDCE: 04D1 0028
;PATCH_SHOWMSG_BLF
0x0065D9C8: 237297A0 058907A0
;PATCH_ESI1
0x0090637C: C88701FA 08F09FE5
;PATCH_ESI2
0x0090638C: 7C25647C 048007A0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x009756B8: 10B5041CB1F022EF 00490847108007A0
;FSWI_PATCH2
0x013A4784: 63685F41 A08007A0
;FSWI_PATCH1
0x013A4870: 2C0000EA F4F01FE5
;------------------------- end -------------------------

