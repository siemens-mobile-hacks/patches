;S65v58
;ElfPack
;ElfPack
;(c) Rst7/CBSIE, BoBa
;(r) Alex))
;(p) SiDeX, Merzotnuk
;Version: 061027
;PatchID: 6074
;Details: https://patches.kibab.com/patches/details.php5?id=6074
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=s65v58&f=ElfPack_by_SiDeX.zip

/*
Набор включает в себя всё для загрузки и выполнения эльфов.
В комплект входит обновлённая библиотека. Теперь работают эльфы TED и MediaDial.
Желательно ставить на чистый фф. Работает даже без Мастер патча.

ЗЫ: Если после запуска TED делает "пик" - тогда не ленимся и в  Develop.Setup->Configuration отключаем пункт (S)Exit.

Как поставить 14-й мастер патч:
 - качаем приложенный архив. в нём - вторая часть библиотеки. ставим))
 - далее делаем так как написано в инструкции к мастеру. вот только НЕ ставим патч "6048 - Большая библиотека функций v14".
*/
; +Загрузка всех .elf-файлов из каталога 0:\ZBin\Daemons
; +Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
;  по файлу 0:\ZBin\etc\extension.cfg. Формат файла:
;  ...
;  расширение_без_точки:полный_путь_и_имя_elf_файла<CR><LF>
;  ...
;  Последняя строка в файле - универсальное расширение, рекоммендуется прописать
;  туда строку "*:0:\ZBin\TED\Ted.elf"
;
; +Добавлена библиотека функций
; +Добавлен SWI-Hook
; +Возможна работа без мастер патча

;BigFunctionLibrary v03.10.2006
+0FD4000
#pragma enable old_equal_ff 
;000: 0x            ; f000: SWI_0
;004: 0x            ; f001: SWI_1
;008: 0x            ; f002: SWI_2
;00C: 0x            ; f003: SWI_3
;010: 0x            ; f004: SWI_4
018: 0xA123FF08     ; f006: __arm int GetAkku(int param1,int param2);
020: 0xA1240D9C     ; f008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
028: 0xA122ECB0     ; f00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
02C: 0xA0FD9401     ; f00B: __arm int fread32(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
030: 0xA0FD9451     ; f00C: __arm unsigned int fwrite32(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
034: 0xA122EC04     ; f00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
03C: 0xA122EC64     ; f00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);
040: 0xA128B2A4     ; f010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
048: 0xA128B798     ; f012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
04C: 0xA128B2A4     ; f013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
050: 0xA0820F98     ; f014: __arm void *malloc(unsigned int size);
054: 0xA0821000     ; f015: __arm void mfree(void *);
058: 0xA1669A99     ; f016: __thumb int sprintf(char *buf, char *str, ...);
05C: 0xA166AD21     ; f017: __thumb char * strcat (char *,const char *);
060: 0xA166AD41     ; f018: __thumb char * strchr (const char *,int);
064: 0xA166AD64     ; f019: __arm int  strcmp (const char *,const char *);
068: 0xA166AE01     ; f01A: __thumb char * strcpy (char *dest,const char *source);
06C: 0xA166AE81     ; f01B: __thumb unsigned int strlen(char *);
070: 0xA0C30EF5     ; f01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);
08C: 0xA1699231     ; f023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
094: 0xA169920B     ; f025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
0C8: 0xA0968D20     ; f032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
10C: 0xA1158B87     ; f043: __thumb int IsUnlocked(void);
134: 0xA0828294     ; f04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
170: 0xA129A4C8     ; f05C: __arm unsigned char GetCPUClock();
174: 0xA08F911F     ; f05D: __thumb unsigned char GetCPULoad();
17C: 0xA082100C     ; f05F: __arm int GetFreeRamAvail();
1AC: 0xA122E9E8     ; f06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
1B0: 0xA122EA24     ; f06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
1B4: 0xA122E970     ; f06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
1BC: 0xA169D2EF     ; f06F: __thumb void RefreshGPRSTraffic();
1C0: 0xA169D30D     ; f070: __thumb int *GetGPRSTrafficPointer();
1F0: 0xA1249178     ; f07C: __arm unsigned int SetVibration(unsigned int power);
200: 0xA0AA76D5     ; f080: __thumb void int ShowCallList(int list, int zero);
210: 0xA122EB64     ; f084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
228: 0xA122E900     ; f08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
22C: 0xA122EEC4     ; f08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
230: 0xA093C464     ; f08N: __arm void RegExplorerExt(REGEXPLEXT *);
238: 0xA122EAC4     ; f08E: int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);
23C: 0xA122EAFC     ; f08F: int rmdir(char *cDirectory, unsigned int *ErrorNumber);
240: 0xA122EDA0     ; f090: int truncate (int FileHandler, int length, int *errornumber);
244: 0xA122EA64     ; f091: int isdir(char *cDirectory, unsigned int *ErrorNumber);
28C: 0xA122E150     ; f0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
;
;0298: 0x     ; f166: __arm void ResetGPRSTraffic();
;029C: 0x     ; f167: char IsGPRSEnabled();
;02A0: 0x     ; f168: char IsGPRSConnected();
;02AC: 0x     ; 0AB: SWI_AB
;
2D0: 0xA0C36BBB     ; f0B4: __thumb void GetDateTime(TDate *, TTime *);
2D4: 0xA08257CF     ; f0B5: __thumb char GetWeek(TDate*);
2D8: 0xA08C9B0D     ; f0B6: __thumb char GetProfile();
2DC: 0xA08C99DB     ; f0B7: __thumb char SetProfile(char);
2E8: 0xA166AAE8     ; f0B8: __arm void *memset(void *s, int c, int n);
2EC: 0xA082100C     ; f0B9: __arm void *realloc(void *ptr, int size);
2F0: 0xA0837018     ; f0BA: __arm int divide(int divisor, int dividend);
2F4: 0xA166ABD4     ; f0BB: __arm  int DivBy10(int divident);
;
320: 0xA86C2678     ; 80C8: __arm unsigned short *RamCap();
328: 0xA86CEF84     ; 80CA: __arm RAMNET * RamNet();
400: 0xA0827B04     ; f100: GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
404: 0xA0826AA0     ; f101: GBS_ReciveMessage(GBS_MSG *);
408: 0xA08271A0     ; f102: GBS_AcceptMessage(void);
40C: 0xA0826EC8     ; f103: GBS_ClearMessage(void);
410: 0xA0827098     ; f104: GBS_PendMessage(GBS_MSG *);
414: 0xA0827F74     ; f105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero);
418: 0xA868A948     ; 8106: CSMROOT *CSM_root();
41C: 0xA113FFCB     ; f107: CreateCSM(const CSM_DESC*,void *,int);
420: 0xA113FFDD     ; f108: CSM_RAM * FindCSMbyID (int id);
424: 0xA1140087     ; f109: __thumb void DoIDLE(void);
;
428: 0x00000000     ; f10A: __unknown void *GetConfig(unsigned int id);                            //BoBaPack
42C: 0x00000000     ; r10B: __unknown void *GetMinAdrScan();                                       //BoBaPack
430: 0x00000000     ; r10C: __unknown void *GetMaxAdrScan();                                       //BoBaPack
434: 0x00000000     ; r10D: __unknown unsigned short *GetCI();                                     //BoBaPack
438: 0x00000000     ; f10E: __unknown void Vibration(unsigned int power, unsigned int duration);   //BoBaPack
;
43C: 0xA16A1415     ; f10F: __thumb void freeUSSD();
440: 0xA0825E59     ; f110: __thumb char *wstrcopy(char *dst, char *src);
444: 0xA16A1451     ; f111: __thumb char GetTypeUSSD();
448: 0xA16A1461     ; f112: __thumb unsigned int SetUSSD(StructUSSDStr *);
44C: 0xA166AE51     ; f113: __thumb char * strpbrk (const char *s1,const char *s2);
450: 0xA166AECD     ; f114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
454: 0xA166AEFD     ; f115: __thumb int  strncmp (const char *s1,const char *s2,int n);
458: 0xA166AF4D     ; f116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
45C: 0xA166AFC9     ; f117: __thumb char * strrchr (const char *s,int c);
460: 0xA166AFE1     ; f118: __thumb char * strstr (const char *s1,const char *s2);
464: 0xA166B05D     ; f119: __thumb int  strtol (const char *nptr,char **endptr,int base);
468: 0xA166B0D9     ; f11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
46C: 0xA1669A45     ; f11B: __thumb int snprintf (char *,int n,const char *format,...);
470: 0xA166A4C1     ; f11C: __thumb int  memcmp (void *m1,void *m2,int n);
474: 0xA166A944     ; f11D: __arm void  zeromem (void *dest,int n);
478: 0xA166A98C     ; f11E: __arm void * memcpy (void *dest,const void *source,int cnt);
47C: 0xA0C30D87     ; f11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
480: 0xA0C30DA9     ; f120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
484: 0xA0C30DCD     ; f121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
488: 0xA0C30E61     ; f122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
48C: 0xA0C306CB     ; f123: __thumb int  wstrlen (WSHDR *wshdr);
490: 0xA0C3046F     ; f124: __thumb int wsprintf (WSHDR *,const char *format,...);
;
494: 0xA0C30C67     ; f125: __thumb WSHDR * AllocWS (int len);
498: 0xA0C3105B     ; f126: __thumb void  CutWSTR (void *WSHDR,int len);
49C: 0xA0C30BFF     ; f127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
4A0: 0xA0C30C1F     ; f128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
4A4: 0xA0C305B1     ; f129: __thumb void  FreeWS (WSHDR *wshdr);
4A8: 0xA11551C1     ; f12A: __thumb void  DrawObject (DRWOBJ *);
;
;04AC: 0x     ; 12B: __thumb void  AddKeybMsgHook (void *proc);
;04B0: 0x     ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);
;04B4: 0x     ; 12D: __unknown void  RemoveKeybMsgHook (void *proc);
;
4B8: 0xA1151819     ; f12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
4BC: 0xA115183D     ; f12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);
4C0: 0xA115184D     ; f130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);
4C4: 0xA115186B     ; f131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
;04C8: 0x     ; 132: __unknown void  deleted(); 
4CC: 0xA1155DED     ; f133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
4D0: 0xA1155E03     ; f134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
;
4D4: 0xA114466F     ; f135: __thumb int  IsGuiOnTop (int id);
4D8: 0xA1144751     ; f136: __thumb int  CreateGUI_ID (void *gui,int id);
4DC: 0xA1144761     ; f137: __thumb int  CreateGUI (void *gui);
4E0: 0xA114476F     ; f138: __thumb int  CreateGUI_30or2 (void *gui);
4E4: 0xA11447A9     ; f139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
4E8: 0xA11447B9     ; f13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
;
4EC: 0xA11447C9     ; f13B: __thumb void  GeneralFuncF1 (int cmd);
4F0: 0xA11447D7     ; f13C: __thumb void  GeneralFuncF0 (int cmd);
4F4: 0xA11447E5     ; f13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
4F8: 0xA11447F5     ; f13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);
4FC: 0xA1144887     ; f13F: __thumb void DirectRedrawGUI (void);
500: 0xA1144893     ; f140: __thumb void  DirectRedrawGUI_ID (int id);
504: 0xA1144923     ; f141: __thumb void PendedRedrawGUI (void);
508: 0xA114EE11     ; f142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
50C: 0xA0828330     ; f143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
510: 0xA0829A08     ; f144: __arm void  GBS_StopTimer (GBSTMR *tmr);
514: 0xA08243BC     ; f145: __arm int GBS_GetCurCepid (void);
518: 0xA082949C     ; f146: __arm void LockSched(void);
51C: 0xA0829524     ; f147: __arm void UnlockSched(void);
520: 0xA1143E51     ; f148: __thumb int ShowMSG(int flag, int lgp_id);
524: 0xA117369D     ; f149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
528: 0xA1170F11     ; f14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
52C: 0xA1170E7B     ; f14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
530: 0xA11736ED     ; f14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
534: 0xA114467D     ; f14D: __thumb GUI *GetTopGUI(void);
538: 0xA115C133     ; f14E: __thumb void *FindItemByID(GUI *gui,int id);
53C: 0xA115C15D     ; f14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
540: 0xA114F54B     ; f150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
544: 0xA1150ACB     ; f151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
548: 0xA1143A09     ; f152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
54C: 0xA0826964     ; f153: __arm int GBS_RecActDstMessage(GBS_MSG *);
550: 0xA0824380     ; f154: __arm void KillGBSproc(int cepid);
;
554: 0x00000000     ; f155: __arm png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
558: 0x00000000     ; f156: __arm png_infop png_create_info_struct(png_structp png_ptr);
55C: 0x00000000     ; f157: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
560: 0x00000000     ; f158: __arm void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
564: 0x00000000     ; f159: __arm void png_read_info(png_structp png_ptr, png_infop info_ptr);
568: 0x00000000     ; f15A: __arm png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
56C: 0x00000000     ; f15B: __arm png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
570: 0x00000000     ; f15C: __arm void png_read_image(png_structp png_ptr, png_bytepp image);
574: 0x00000000     ; f15D: __arm void png_read_end(png_structp png_ptr, png_infop info_ptr);
578: 0x00000000     ; f15E: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
57C: 0x00000000     ; f15F: __arm png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
580: 0x00000000     ; f160: __arm png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
584: 0x00000000     ; f161: __arm png_init_io(png_structp png_ptr, int fp);
;
588: 0xA166B344     ; f162: __arm setjmp(jmp_buf jmpbuf);
58C: 0xA119CDCB     ; f163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
590: 0xA11405B9     ; f164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
594: 0xA11408C7     ; f165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
598: 0xA1141275     ; f166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
59C: 0xA11560E3     ; f167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
5A0: 0xA11796F1     ; f168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
5A4: 0xA1179695     ; f169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
5A8: 0xA117969F     ; f16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
5AC: 0xA122EB9C     ; f16B: __arm int unlink(const char *cFileName,unsigned int *errornumber);
5B0: 0xA122E030     ; f16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
5B4: 0xA0BF583F     ; f16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
5B8: 0xA0B92FBF     ; f16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
5BC: 0xA0B937B5     ; f16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
5C0: 0xA0B4B81D     ; f170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;
5C4: 0xA0FD91A0     ; f171: __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int)
5C8: 0xA0FD917C     ; f172: __arm void REDRAW(void);
;
5CC: 0x00000000     ; f173: __thumb int socket(int af,int type,int protocol);
5D0: 0x00000000     ; f174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
5D4: 0x00000000     ; f175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
5D8: 0x00000000     ; f176: __thumb int closesocket(int socket);
5DC: 0x00000000     ; f177: __thumb int shutdown(int socket,int how);
5E0: 0x00000000     ; f178: __thumb int recv(int socket,void *buf,int len,int flag);
5E4: 0x00000000     ; f179: __thumb int send(int socket,const void *buf,int len,int flag);
5E8: 0x00000000     ; f17A: __thumb unsigned __int16 htons(unsigned __int16);
5EC: 0x00000000     ; f17B: __thumb unsigned int htonl(unsigned int);
5F0: 0x00000000     ; r17C: __arm int socklasterr(void);
#pragma disable old_equal_ff
+0

;Splices
00927C0: 1A0000EA DCF09FE5
00928A3: A100000000 000080FDA0

;SWI_HOOK
#pragma enable old_equal_ff
0FD8000: C70050E30500001AB000DEE100109DE5
0FD8010: 200011E302E08E1204E08E0214E08DE5
0FD8020: 0219C0E3010A51E30E00002A40C09FE5
0FD8030: 01C19CE7A007B0E104C08D150900001A
0FD8040: 01007CE30700000A00009DE5200010E3
0FD8050: 01E08E1221108F1218108F0214108DE5
0FD8060: 00402DE90040FDE80100BDE800F069E1
0FD8070: 0F80FDE80040FDA01CFF2FE16047
#pragma disable old_equal_ff

;ElfLoader+ESI+RunElfsByExtention
;PATCH_PROPERTY_WINDOW 
0x00981D50: 0370A0E10260A0E10150A0E1 04E08FE204F01FE53481FDA0 
;PATCH_TXT_EXT 
0x00BB95A4: A591BBA0 3589FDA0 
;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
;CODE,DATA_C
0x00FD8100: 203EA0E10A0053E30B0053130100001A 
0x00FD8110: 480100FA1080BDE8EC3E9FE50140A0E1 
0x00FD8120: 0210A0E104209FE5020050E113FF2FE1 
0x00FD8130: 102700000E402DE9F8209DE5A00452E3 
0x00FD8140: E901003BE080BDE804E02DE500200FE1 
0x00FD8150: 000000EF00100FE1C01081E301F021E1 
0x00FD8160: 0000A0E10000A0E10000A0E17AFF17EE 
0x00FD8170: 0000A0E10000A0E10000A0E1FAFFFF1A 
0x00FD8180: 0000A0E39A0F07EE0000A0E10000A0E1 
0x00FD8190: 0000A0E10000A0E1150F07EE0000A0E1 
0x00FD81A0: 0000A0E10000A0E10000A0E102F021E1 
0x00FD81B0: 04F09DE400402DE91D0100EF0080BDE8 
0x00FD81C0: FFB5F9B00020C043019000246B468022 
0x00FD81D0: 8021090279980ADF0700002802D50020 
0x00FD81E0: C04372E16B46342203A938000BDF3428 
0x00FD81F0: 05D0694638000DDF0120C04365E10398 
0x00FD8200: B349884205D0694638000DDF0220C043 
0x00FD8210: 5BE103A8808D0B2802D30820C04354E1 
0x00FD8220: 00262CE02020704329A90858012825D1 
0x00FD8230: 2020704329A9081880680199884205D2 
0x00FD8240: 2020704329A908188068019020207043 
0x00FD8250: 29A9081880682021714329AA51184969 
0x00FD8260: 401884420AD22020704329A908188068 
0x00FD8270: 2021714329AA511849694418761C03A8 
0x00FD8280: 808D864228DA02A801B401AB00220B98 
0x00FD8290: 04A9498D7143411838000FDF01B00A99 
0x00FD82A0: 03AA528D72438918884205D069463800 
0x00FD82B0: 0DDF0320C04308E16B46202220207043 
0x00FD82C0: 29A9091838000BDF2028ABD069463800 
0x00FD82D0: 0DDF0420C043F8E00198201A14DF0500 
0x00FD82E0: 002805D1694638000DDF0D20C043ECE0 
0x00FD82F0: 0198211A2800FFF75EEF002678E02020 
0x00FD8300: 704329A90858012802D0022826D0C4E0 
0x00FD8310: 2020704329A908180069002867D06B46 
0x00FD8320: 2020704329A9081802692020704329A9 
0x00FD8330: 081880680199401A291838000BDF2021 
0x00FD8340: 714329AA51180969884250D069463800 
0x00FD8350: 0DDF280015DF0A20C043B6E020207043 
0x00FD8360: 29A90818006914DF0400002807D16946 
0x00FD8370: 38000DDF280015DF0620C043A5E06B46 
0x00FD8380: 2020704329A908180269210038000BDF 
0x00FD8390: 2021714329AA51180969884209D06946 
0x00FD83A0: 38000DDF200015DF280015DF0720C043 
0x00FD83B0: 8BE0002110E008204843205819280ADA 
0x00FD83C0: 0820484320580422504310AA08234B43 
0x00FD83D0: E3185B681350491C0820484320580028 
0x00FD83E0: E9D10021229800283CD1200015DF761C 
0x00FD83F0: 03A8808D864258DA684601B401AB0022 
0x00FD8400: 202070432AA90818416838000FDF01B0 
0x00FD8410: 2021714329AA51184968884200D16EE7 
0x00FD8420: 694638000DDF280015DF0520C0434CE0 
0x00FD8430: 0198434208204843219AA21810582A18 
0x00FD8440: 08B494460298434208204843229AA218 
0x00FD8450: 10582818C05842190298101A624608BC 
0x00FD8460: D050491C08204843229A9042BDD20820 
0x00FD8470: 4843219AA218101840680006000EFD28 
0x00FD8480: D6D0FF28EDD0694638000DDF280015DF 
0x00FD8490: 200015DF0C20C04317E0694638000DDF 
0x00FD84A0: 280015DF0B20C0430FE0694638000DDF 
0x00FD84B0: 00F05CFA7C9B7B9A7A997998019E7442 
0x00FD84C0: 099EAD192C19A04700207DB0F0BDC046 
0x00FD84D0: 7F454C4600B5A0B07E226946A3DF0023 
0x00FD84E0: 002200216846FFF76BFE20B000BD0000 
0x00FD84F0: 10402DE90040B0E13100A0E3430C80E3 
0x00FD8500: 540100EF0400B0E10C109FE5001091E5 
0x00FD8510: 31FF2FE10000A0E11080BDE80090FDA0 
0x00FD8520: 10402DE99EDF4DE20140B0E10410B0E1 
0x00FD8530: 04008DE21A0000EF74109FE504008DE2 
0x00FD8540: 170000EF0D20B0E104108DE2410F8DE2 
0x00FD8550: 6B0000EF000050E31000000A0410B0E1 
0x00FD8560: 04008DE21A0000EFAD108DE2401F81E2 
0x00FD8570: 04008DE2170000EF0030A0E30020A0E3 
0x00FD8580: 0010A0E304008DE20CFFFFFA0D10B0E1 
0x00FD8590: 410F8DE26C0000EF000050E3EEFFFF1A 
0x00FD85A0: 0D10B0E1410F8DE26D0000EF9EDF8DE2 
0x00FD85B0: 1080BDE87489FDA010402DE90040B0E1 
0x00FD85C0: E00200EB28009FE58C0000EF24209FE5 
0x00FD85D0: 0010A0E320009FE5710100EF0400B0E1 
0x00FD85E0: 18109FE5001091E531FF2FE10000A0E1 
0x00FD85F0: 1080BDE8608BFDA07C89FDA02085FDA0 
0x00FD8600: 0490FDA000B5202801D25F200FE08028 
0x00FD8610: 0BD30749081880380078FF21C9430222 
0x00FD8620: 5043044A1018405A01E00004000C00BD 
0x00FD8630: D089FDA0508AFDA030B504000D002000 
0x00FD8640: 000F0A280BD106E00006000EFFF7DAFF 
0x00FD8650: 010028001CDF2078641C0028F4D130BD 
0x00FD8660: 00B5612802DB7B2800DA203800BD0000 
0x00FD8670: F0472DE961DF4DE20040A0E30050A0E3 
0x00FD8680: 7E20A0E3411F8DE2A30000EF410F8DE2 
0x00FD8690: 1B0000EF0060B0E1000056E30100001A 
0x00FD86A0: 0000A0E3890000EA800056E30100003A 
0x00FD86B0: 0000A0E3850000EA410F8DE2007096E0 
0x00FD86C0: 000000EA017057E2010057E52E0050E3 
0x00FD86D0: 0300000A016056E2000056E3F8FFFF1A 
0x00FD86E0: 7C7F8FE20D30B0E10020A0E30010A0E3 
0x00FD86F0: E4019FE50A0000EF0080B0E1010078E3 
0x00FD8700: 6E00000A0D30B0E18020A0E304108DE2 
0x00FD8710: 0800B0E10B0000EF0060B0E18090A0E3 
0x00FD8720: 800056E30A00002A04008DE20010A0E3 
0x00FD8730: 0010C6E7130000EA0040A0E3090056E1 
0x00FD8740: 1200001A8020A0E384108DE204008DE2 
0x00FD8750: 1E0100EF0D30B0E18020A0E384108DE2 
0x00FD8760: 0800B0E10B0000EF0060B0E1800056E3 
0x00FD8770: 0400002A04008DE2000096E00010A0E3 
0x00FD8780: 8010C0E5409FA0E30060A0E3EAFFFFEA 
0x00FD8790: 04008DE20000D6E7016096E2000050E3 
0x00FD87A0: 0600001A000055E32300001A2C119FE5 
0x00FD87B0: 0100A0E3480100EF0000A0E3430000EA 
0x00FD87C0: 0410B0E1FE1041E2FF1C41E2010051E3 
0x00FD87D0: 0E00008A012F8FE20120D2E702F18FE0 
0x00FD87E0: 050000003A0050E30200001A04108DE2 
0x00FD87F0: 015096E0014054E20D0050E30100000A 
0x00FD8800: 0A0050E3CCFFFF1A0040A0E3CAFFFFEA 
0x00FD8810: 0D0050E3C7FFFF0A0A0050E3C5FFFF0A 
0x00FD8820: 3A0050E30900001A0710D4E7000051E3 
0x00FD8830: 0600001A04008DE2005096E00D10B0E1 
0x00FD8840: 0800B0E10D0000EF0060A0E30B0000EA 
0x00FD8850: 82FFFFFA00A0B0E10700D4E77FFFFFFA 
0x00FD8860: 00005AE10100001A014094E2B2FFFFEA 
0x00FD8870: FF40A0E3FF4C84E3AFFFFFEA016096E2 
0x00FD8880: 0500D6E7200050E3FBFFFF2A0000A0E3 
0x00FD8890: 0500C6E70030A0E30020A0E3411F8DE2 
0x00FD88A0: 0500B0E145FEFFFA000050E30600000A 
0x00FD88B0: 2C109FE50100A0E3480100EF020000EA 
0x00FD88C0: 20109FE50100A0E3480100EF0000A0E3 
0x00FD88D0: 61DF8DE2F087BDE8000000007C8BFDA0 
0x00FD88E0: 9489FDA0A489FDA0B489FDA070402DE9 
0x00FD88F0: 0040B0E10150B0E1FF00A0E3250100EF 
0x00FD8900: 0060B0E10530B0E10420B0E11C109FE5 
0x00FD8910: 0600B0E1240100EF0600B0E153FFFFEB 
0x00FD8920: 0600B0E1290100EF0000A0E37080BDE8 
0x00FD8930: C889FDA030B582B004000D0005226946 
0x00FD8940: 2800A3DF07A1684619DF002805D02900 
0x00FD8950: 2000054A1268904702E02000FFF788EE 
0x00FD8960: 02B030BD747874000890FDA0004B1847 
0x00FD8970: 4881FDA02A2E656C66000000303A5C5A 
0x00FD8980: 42696E5C4461656D6F6E735C00000000 
0x00FD8990: 656C66004E6F7468696E6720746F2072 
0x00FD89A0: 756E210043616E27742072756E20454C 
0x00FD89B0: 46210000456C66732E657874206E6F74 
0x00FD89C0: 20666F756E64210025775C2577000000 
0x00FD89D0: 5F5F275F223AC5D85F255F3C5F5F5F5F 
0x00FD89E0: 5F27272222072D2D5F545F3E5F5F5F5F 
0x00FD89F0: FFF6F75FFD83B315F063F23CBF2D52F4 
0x00FD8A00: F82B4969A3E714FAF1FCF33E5F5F5FF5 
0x00FD8A10: 808182838485868788898A8B8C8D8E8F 
0x00FD8A20: 909192939495969798999A9B9C9D9E9F 
0x00FD8A30: A0A1A2A3A4A5A6A7A8A9AAABACADAEAF 
0x00FD8A40: E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF 
0x00FD8A50: 10041104120413041404150416041704 
0x00FD8A60: 180419041A041B041C041D041E041F04 
0x00FD8A70: 20042104220423042404250426042704 
0x00FD8A80: 280429042A042B042C042D042E042F04 
0x00FD8A90: 30043104320433043404350436043704 
0x00FD8AA0: 380439043A043B043C043D043E043F04 
0x00FD8AB0: 2D002D002D00A6002B00A600A600AC00 
0x00FD8AC0: AC00A600A600AC002D002D002D00AC00 
0x00FD8AD0: 4C002B0054002B002D002B00A600A600 
0x00FD8AE0: 4C003304A6005400A6003D002B00A600 
0x00FD8AF0: A600540054004C004C002D0033042B00 
0x00FD8B00: 2B002D002D002D002D00A600A6002D00 
0x00FD8B10: 40044104420443044404450446044704 
0x00FD8B20: 480449044A044B044C044D044E044F04 
0x00FD8B30: 0104510404045404070457040E045E04 
0x00FD8B40: B0002220B70076001621A400A600A000 
0x00FD8B50: B701000000000000B801000000000000 
0x00FD8B60: 9089FDA055000000FF077805508BFDA0 
0x00FD8B70: 588BFDA0D584FDA000000000303A5C5A 
0x00FD8B80: 42696E5C6574635C657874656E73696F 
0x00FD8B90: 6E2E636667000000 
;RET_ADRS
0x00FD9000: 637969A1BB7769A1A591BBA0A15E40A1
;HELPER_PROC,HELPER_PROC_DATA 
0x00FD9100: 00402DE910D04DE20D00B0E1530100EF 
0x00FD9110: 000050E30900000AF200DDE1010050E3 
0x00FD9120: 0600001A08009DE5000050E30300000A 
0x00FD9130: 0C109DE504009DE508209DE532FF2FE1 
0x00FD9140: 10D08DE20080BDE800402DE90000A0E3 
0x00FD9150: 01002DE98030A0E314209FE514109FE5 
0x00FD9160: 3100A0E3430C80E3050100EF04D08DE2 
0x00FD9170: 0080BDE80091FDA0C891FDA000402DE9 
0x00FD9180: 460100EF410100EF9010A0E30900A0E3 
0x00FD9190: 420C80E3000100EF470100EF0080BDE8 
0x00FD91A0: 00402DE904002DE90030B0E10120B0E1 
0x00FD91B0: 0110A0E33100A0E3430C80E3000100EF 
0x00FD91C0: 04D08DE20080BDE848454C5045520000 
#pragma disable old_equal_ff

;PATCH_ESI
0x01405E98: 0C1C111C0E4A9042 004B18470081FDA0
;PATCH_ONCREATE
0x016B7868: BB7769A1 B885FDA0
;PATCH_ONCLOSE
0x016B786C: 637969A1 F084FDA0

;FREAD32,FWRITE32
#pragma enable old_equal_ff
;FREAD32
0x00FD9400: FBB51500002403E00199AD1B08180190
0x00FD9410: 002D0FD00948854201DB461E00E02E00
0x00FD9420: 0098074F029B01993F683200B8472418
0x00FD9430: B042E9D0200003B0F0BDC04601400000
0x00FD9440: F094FDA0
;FWRITE32
0x00FD9450: FBB51500002403E00199AD1B08180190
0x00FD9460: 002D0FD00948854201DB461E00E02E00
0x00FD9470: 0098074F029B01993F683200B8472418
0x00FD9480: B042E9D0200003B0F0BDC04601400000
0x00FD9490: F494FDA0
;RET_ADRS
;0x00FD94F0: 0xA122ECF0,0xA122EDD8 ; fread fwrite
0x00FD94F0: F0EC22A1D8ED22A1
#pragma disable old_equal_ff

;------------------------- end -------------------------

