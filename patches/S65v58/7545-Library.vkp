;S65v58
;Библиотека Функций
;Functon Library
;(c) avkiev
;Version: 070508
;PatchID: 7545
;Details: https://patches.kibab.com/patches/details.php5?id=7545
/*
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
Требуется для многих патчей, написанных с использованием концепции "Мастер-Патч + Библиотека функций" (c) 1nvisible, avkiev
*/

+0FD4000
#pragma enable  old_equal_ff
0000: 0xA0002070   ;   0: __arm void loopback0()
0004: 0xA0002070   ;   1: __arm void loopback1()
0008: 0xA0002070   ;   2: __arm void loopback2()
000C: 0xA0002070   ;   3: __arm void loopback3()
0010: 0xA0002070   ;   4: __arm void loopback4()
0014: 0xA082BE21   ;   5: DecToHex
0018: 0xA123FF08   ;   6: __arm int GetAkku(int param1,int param2)
001C: 0xA1405D5D   ;   7: GetLP
0020: 0xA1240D9C   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1263C38   ;   9: __arm void SwitchPhoneOff(void)
0028: 0xA122ECB0   ;   A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ;   B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ;   C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA122EC04   ;   D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA122EC34   ;   E: fflush
003C: 0xA122EC64   ;   F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA122EA94   ;  10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0FCF201   ;  11: OpenReadCloseFile
0048: 0xA122E9B0   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA122EB2C   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0820F98   ;  14: __arm void *malloc(unsigned int size)
0054: 0xA0821000   ;  15: __arm void mfree(void *)
0058: 0xA1669A99   ;  16: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA166AD21   ;  17: __thumb char * strcat (char *,const char *)
0060: 0xA166AD41   ;  18: __thumb char * strchr (const char *,int)
0064: 0xA166AD64   ;  19: __arm int  strcmp (const char *,const char *)
0068: 0xA166AE01   ;  1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA166AE81   ;  1B: __thumb unsigned int strlen(char *)
0070: 0xA0C30EF5   ;  1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA0C30EA9   ;  1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
;078:              ;  1E: __thumb IMGHDR *GetPITaddr(int num)
007C: 0xA16A00A3   ;  1F: DrawMainScreen

0080: 0xA16A2B65   ;  20: DrawScreenSaver
0084: 0xA1159AF5   ;  21: __thumb int GetImgHeight(int picture)
0088: 0xA1159B05   ;  22: __thumb int GetImgWidth(int picture)
008C: 0xA1699231   ;  23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA1150BB5   ;  24: DrawImage2
0094: 0xA169920B   ;  25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA1150AF5   ;  26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA1698B8D   ;  27: AddIconToIconbar
00A0: 0xA1241E04   ;  28: getEELiteMaxID
00A4: 0xA122D6D0   ;  29: getEEFullMaxID
00A8: 0xA1241CA0   ;  2A: __arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA1241DA8   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA122D314   ;  2C: getEEFullBlockSizeVersion
00B4: 0xA1241E38   ;  2D: StartWriteEELiteBlock
00B8: 0xA1241EB4   ;  2E: FinishWriteEELiteBlock
00BC: 0xA1241E10   ;  2F: DeleteEELiteBlock

00C0: 0xA1241E70   ;  30: WriteEELiteBlock
00C4: 0xA166AFC9   ;  31: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA0968D20   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA095EF04   ;  33: PlaySound2
00D0: 0xA0946400   ;  34: PlaySoundLoop
00D4: 0xA0BB359F   ;  35: __arm void AlarmClockRing()
00D8: 0xA0B365E5   ;  36: GetATCmdString
00DC: 0xA0BB51BF   ;  37: OriginalATCGSN
00E0: 0xA0B35F81   ;  38: PostAtCommand
00E4: 0xA0B376BB   ;  39: SendATAnswerStr
00E8: 0xA0BD8851   ;  3A: mfree_high
00EC: 0xA166A49D   ;  3B: MemChr
00F0: 0xA122ED30   ;  3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA0A47F21   ;  3D: editOrNewTXTModule
00F8: 0xA0B356E9   ;  3E: LoadProcesses
00FC: 0xA1151819   ;  3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA08DA3DF   ;  40: GetVibraStatus
0104: 0xA0B9026B   ;  41: GetProvider
0108: 0xA16A3271   ;  42: IsScreenSaver
010C: 0xA1158B87   ;  43: __arm int IsUnlocked(void)
;110:              ;  44: TempLigntOn
0114: 0xA09818F8   ;  45: GetWavLen
;118:              ;  46: __thumb int HasNewSMS()
011C: 0xA16A195D   ;  47: __thumb int HasFlashSMS()
0120: 0xA0A49FB7   ;  48: __thumb int ReadNewSMS(void)
0124: 0xA169E64F   ;  49: __thumb int ReadFlashSMS(void)
0128: 0xA096137C   ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA0C7E9F4   ;  4B: __arm void StartMidlet(char *midlet)
0130: 0xA0B8DE75   ;  4C: __thumb GetMissedCallsCount
0134: 0xA0828294   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA1143E6F   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA1143E7F   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))
013C: 0xA1143EDD   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA1143F27   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA136D5B5   ;  51: GetNetAccessMode
0148: 0xA1241448   ;  52: __arm char *GetIlluminationDataTable()
014C: 0xA166A4C1   ;  53: ;__thumb int  memcmp_2(void *m1,void *m2,int n)
0150: 0xA082BE5D   ;  54: StrToInt
0154: 0xA08DA3F5   ;  55: __thumb int SwitchVibraOnOff(void)
0158: 0xA0FCF451   ;  56: PlayVibra
015C: 0xA08283A0   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA166A944   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA166A98C   ;  59: ;__arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA11584B3   ;  5A: __thumb void KeypressOn(int key)
016C: 0xA1158571   ;  5B: __thumb KeypressOff
0170: 0xA129A4C8   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA08F911F   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA08F90ED   ;  5E: __thumb GetMMIMemUsed
017C: 0xA082100C   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA08DA5D1   ;  60: __thumb void ShowMainMenu()
0184: 0xA08DF43B   ;  61: __thumb void ShowNativeMenu()
;188:              ;  62: SetVibraStatus
018C: 0xA169CA33   ;  63: __thumb MS_Wallpaper_Flush
0190: 0xA11447C9   ;  64: __thumb TriggerUpdate
0194: 0xA0B8F0C1   ;  65: __thumb void EndCall()
0198: 0xA0B4E4DF   ;  66: __thumb void EndCallBusy()
019C: 0xA16985D9   ;  67: __thumb int IsDirectCallActive()
01A0: 0xA16960A7   ;  68: __thumb GetScreenSaverRAM
01A4: 0xA082949C   ;  69: __arm void LockSched_2(void)
01A8: 0xA0829524   ;  6A: __arm void UnlockSched_2(void)
01AC: 0xA122E9E8   ;  6B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA122EA24   ;  6C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA122E970   ;  6D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA132F26B   ;  6E: __thumb int IsCalling(void)
01BC: 0xA169D2EF   ;  6F: __thumb void RefreshGPRSTraffic()

01C0: 0xA169D30D   ;  70: __thumb int *GetGPRSTrafficPointer()
01C4: 0xA114F54B   ;  71: __thumb DrawRoundRect
01C8: 0xA0B8A02F   ;  72: __thumb SetCurrentSecondOfCall
01CC: 0xA132FA83   ;  73: int GetTypeOfCall(int type)
01D0: 0xA08DAB57   ;  74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA1155DED   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA117369D   ;  76: __thumb SetWindowText
01DC: 0xA1170E7B   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA0C37A37   ;  78: GetTimeFormat
01E4: 0xA11551C1   ;  79: __thumb void  DrawObject_2(DRWOBJ *)
01E8: 0xA1170F11   ;  7A: __thumb ClearWindowBuffer
01EC: 0xA08C9E49   ;  7B: __thumb GetProfileFilter
01F0: 0xA1249178   ;  7C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA132EC85   ;  7D: IsIncognitoCall
01F8: 0xA1344F79   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn

0200: 0xA0AA76D5   ;  80: __thumb void int ShowCallList(int list, int zero)
0204: 0xA166AC1C   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename
020C: 0xA094A914   ;  83: __arm GetPathOfFoundFile
0210: 0xA122EB64   ;  84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D79   ;  85: __thumb StrCmpNoCase
0218: 0xA122D23C   ;  86: __arm ReadEEPROMData
021C: 0xA122D380   ;  87: __arm WriteEEPROMData
;220:              ;  88: GetAccessoryType
;224:              ;  89: GetLangMesIntoWS
0228: 0xA122E900   ;  8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA122EEC4   ;  8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA093C464   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *)
;234:              ;  8D: GetProfileName
0238: 0xA122EAC4   ;  8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA122EAFC   ;  8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA122EDA0   ;  90: __arm int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA122EA64   ;  91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0C46604   ;  92: __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA1263C44   ;  93: __arm void RebootPhone()
0250: 0xA093C528   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: __arm int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ;  96: GetWavLenByContent
;25C:              ;  97: CreatePath
;260:              ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA09614A4   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA124986C   ;  9A: __arm int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
;270:              ;  9C: CloseScreensaver
0274: 0xA0BF748D   ;  9D: GetMissedEventsPtr
;278:              ;  9E: int GetMissedEventCount(unsigned int Event)
027C: 0xA114F417   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA0C3046F   ;  A0: __thumb int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA0C30D87   ;  A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA0C309F3   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA122E150   ;  A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0C30C67   ;  A4: __thumb WSHDR * AllocWS_2(int len)
0294: 0xA0C305B1   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA169D2B5   ;  A6: __thumb void ResetGPRSTraffic()
029C: 0xA169D101   ;  A7: __thumb char IsGPRSEnabled()
02A0: 0xA13472A9   ;  A8: __thumb char IsGPRSConnected()
02A4: 0xA1159191   ;  A9: __thumb void KbdLock()
02A8: 0xA0FCF001   ;  AA: __thumb OpenWriteCloseFile()
02AC: 0xA0002070   ;  AB: __arm void loopback171()
02B0: 0xA0FCF1B1   ;  AC: API DrawText
02B4: 0xA0FCF0A1   ;  AD: API StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: API StrUni2Ansi
02BC: 0xA0FCF051   ;  AF: API Hex2Int

02C0: 0xA0FCF351   ;  B0: API DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1: API DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: API GetBuildCanvas
02CC: 0xA0FCF301   ;  B3: API Seconds2iTime
02D0: 0xA0C36BBB   ;  B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF   ;  B5: __thumb char GetWeek(TDate*)
02D8: 0xA0BC4FC5   ;  B6: __thumb char GetProfile()
02DC: 0xA08C99DB   ;  B7: __thumb char SetProfile(char)
02E0: 0xA166AB00   ;  B8: __arm int sdiv(int denom,int number)
02E4: 0xA1158E07   ;  B9: __thumb void KbdUnlock()
02E8: 0xA0820FA4   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA166AAE8   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0837018   ;  BC: __arm int udiv(int divisor, int dividend)
02F4: 0xA166ABD8   ;  BD: __arm int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE: RunScaner
02FC: 0xA0FC3001   ;  BF: SpellTime

0300: 0xA0FC7601   ;  C0: MiniGPS
0304: 0xA0FC0C51   ;  C1: RunDispatcher
0308: 0xA0FC12A1   ;  C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3: ProcessFiles
0310: 0xA0FC0C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA123E398   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: CallLibFunByNumber()
0320: 0xA86C2678   ;  C8: __arm unsigned short *RamCap()
0324: 0xA86C267A   ;  C9: RamLS
0328: 0xA86CEF84   ;  CA: __arm RAMNET * RamNet()
;32C:              ;  CB: RamRingtoneStatus
;330:              ;  CC: RamMissedCalls
;334:              ;  CD: RamMissedSMS
;338:              ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

;340:              ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
;34C:              ;  D3: RamStby
;350:              ;  D4: RamMissedMes
;354:              ;  D5: RamIsLocked
;358:              ;  D6: RamNetOnline
;35C:              ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA870CA30   ;  DA: RamIsShutdown
;36C:              ;  DB: RamMainscreenAccuIcon
;370:              ;  DC: RamRandSeed
;374:              ;  DD: RamCurrentTrack
0378: 0xA86CCD89   ;  DE: RamIsSimPresent
037C: 0xA86A98D8   ;  DF: RamPressedKey

0380: 0xA869E320   ;  E0: __arm void * RamScreenBuffer()
;384:              ;  E1: unsigned int RamMPlayer_CtrlCode()
0388: 0xA86B6B08   ;  E2: RamKeyBuffer
038C: 0xA86D0080   ;  E3: RamProfileNum
0390: 0xA8760000   ;  E4: FreeRAM
0394: 0x00001297   ;  E5: LP_MonthsShort
0398: 0x000004D6   ;  E6: Pic_Big
039C: 0x00000453   ;  E7: Pic_Little
03A0: 0x00000560   ;  E8: Pic_Extra
03A4: 0x00000570   ;  E9: Pic_Profiles
03A8: 0x000002FB   ;  EA: Pic_Vibra
03AC: 0x00000400   ;  EB: Pic_Call
03B0: 0x00000580   ;  EC: Pic_AdvNet
03B4: 0x0000118B   ;  ED: LP_MonthsLong
03B8: 0x00000400   ;  EE: LP_Weekdays
03BC: 0x000005A0   ;  EF: Pic_Calendar

03C0: 0x000005B0   ;  F0: Pic_AccuGraph
03C4: 0xA169FEC1   ;  F1: __thumb void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
03D0: 0x00000585   ;  F4: MP Pic_Lani
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
03E0: 0xA0FD0050   ;  F8: MP Additional_PIT_address
03E4: 0x00000532   ;  F9: MP Additional_PIT_start
03E8: 0x000005D0   ;  FA: MP Additional_PIT_end
;3EC:              ;  FB: 
03F0: 0xA0FC0A00   ;  FC: MP PictureRelocationTable
03F4: 0x0000F000   ;  FD: MP PictureRelocationBase
03F8: 0x00001E1E   ;  FE: MP NextPictureMagic
03FC: 0xA0FD4000   ;  FF: __arm unsigned int AddrLibrary()

0400: 0xA0827B04   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826AA0   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0   ; 102: __arm void GBS_AcceptMessage(void)
040C: 0xA0826EC8   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA0827098   ; 104: __arm void GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F74   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA868A948   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA113FFCB   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA113FFDD   ; 108: x65__thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA1140087   ; 109: x65__thumb void DoIDLE(void)
0428: 0x00000000   ; 10A: void *GetConfig(unsigned int id)
042C: 0x00000000   ; 10B: void *GetMinAdrScan()
0430: 0x00000000   ; 10C: void *GetMaxAdrScan()
0434: 0x00000000   ; 10D: unsigned short *GetCI()
0438: 0x00000000   ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA16A1415   ; 10F: __thumb void freeUSSD()

0440: 0xA0825E59   ; 110: __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA16A1451   ; 111: __thumb char GetTypeUSSD()
0448: 0xA16A1461   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA166AE51   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA166AECD   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA166AEFD   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA166AF4D   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA166AFC9   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA166AFE1   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA166B05D   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA166B0D9   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1669A45   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA166A4C1   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA166A944   ; 11D: __arm void  zeromem(void *dest,int n)
0478: 0xA166A98C   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA0C30D87   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0C30DA9   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA0C30DCD   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0C30E61   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0C306CB   ; 123: __thumb int  wstrlen (WSHDR *wshdr)
0490: 0xA0C3046F   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)
0494: 0xA0C30C67   ; 125: __thumb WSHDR * AllocWS(int len)
0498: 0xA0C3105B   ; 126: __thumb void  CutWSTR (void *WSHDR,int len)
049C: 0xA0C30BFF   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0C30C1F   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA0C305B1   ; 129: __thumb void  FreeWS (WSHDR *wshdr)
04A8: 0xA11551C1   ; 12A: __thumb void  DrawObject (DRWOBJ *)
;4AC:              ; 12B: __thumb void  AddKeybMsgHook (void *proc)
;4B0:              ; 12C: __thumb int  AddKeybMsgHook_end (void *proc)
;4B4:              ; 12D: __unknown void  RemoveKeybMsgHook (void *proc)
04B8: 0xA1151819   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA115183D   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)

04C0: 0xA115184D   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA115186B   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA166AA44   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA1155DED   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA1155E03   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA114466F   ; 135: x65__thumb int  IsGuiOnTop (int id)
04D8: 0xA1144751   ; 136: x65__thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA1144761   ; 137: x65__thumb int  CreateGUI (void *gui)
04E0: 0xA11447D7   ; 138: x65__thumb int  CreateGUI_30or2 (void *gui)
04E4: 0xA11447A9   ; 139: x65__thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA11447B9   ; 13A: x65__thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA11447C9   ; 13B: x65__thumb void  GeneralFuncF1 (int cmd)
04F0: 0xA11447D7   ; 13C: x65__thumb void  GeneralFuncF0 (int cmd)
04F4: 0xA11447E5   ; 13D: x65__thumb void  GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA11447F5   ; 13E: x65__thumb void  GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA1144855   ; 13F: __thumb void DirectRedrawGUI (void)

0500: 0xA1144893   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA1144923   ; 141: __thumb void PendedRedrawGUI (void)
0508: 0xA114EE11   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA0828330   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)
0514: 0xA08243BC   ; 145: __arm int GBS_GetCurCepid (void)
0518: 0xA082949C   ; 146: __arm void LockSched(void)
051C: 0xA0829524   ; 147: __arm void UnlockSched(void)
0520: 0xA1143E51   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA117369D   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA1170F11   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA1170E7B   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA11736ED   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA114467D   ; 14D: x65__thumb GUI *GetTopGUI(void)
0538: 0xA115C133   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA115C15D   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA114F54B   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA1150ACB   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA1143A09   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: __arm void KillGBSproc(int cepid)
0554: 0xA1575B91   ; 155: __thumb void png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA1574F65   ; 156: __thumb void png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA15769C9   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA1574E39   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA1575CCF   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15755B5   ; 15A: __thumb void png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1575957   ; 15B: __thumb void png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA15765BF   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA1576601   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA1575255   ; 15E: __thumb void png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA15754CB   ; 15F: __thumb void png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA1576157   ; 160: __thumb void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000   ; 161: __thumb void png_init_io(png_structp png_ptr, int fp)
0588: 0xA166B33C   ; 162: __arm void setjmp(jmp_buf jmpbuf)
058C: 0xA11410DD   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA11405B9   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA11408C7   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA1141275   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA1156109   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA11796F1   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA1179695   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA117969F   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA122EB9C   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA122E030   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0BF583F   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0B92FBF   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0B937B5   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0B4B81D   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: __arm void SUBPROC(void *,...)
;5C8:              ; 172: __arm void REDRAW(void)
05CC: 0xA12B36CD   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA12B399F   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA12B3851   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA12B3B19   ; 176: __thumb int closesocket(int socket)
05DC: 0xA12B3A95   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA12B3BC3   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA12B3E9F   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA134ED89   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA134ED95   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA876BA40   ; 17C: __arm int socklasterr(void)
05F4: 0xA1144805   ; 17D: x65__thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA1144815   ; 17E: x65__thumb void RestartIDLETMR(void)
05FC: 0xA1144821   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA11795C3   ; 180: x65__thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA117952D   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA1179569   ; 182: __thumb int EDIT_GetFocus(void *gui)
060C: 0xA1179573   ; 183: x65__thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA11408FF   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA082769C   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA1331829   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA1332259   ; 187: x65__thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: __adr int ScreenW(void)
0624: 0x000000B0   ; 189: __adr int ScreenH(void)
0628: 0x00000016   ; 18A: __adr int HeaderH(void)
062C: 0x00000016   ; 18B: __adr int SoftkeyH(void)
0630: 0xA08298B4   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA12025F4   ; 18D: __arm int available0(int sock)
0638: 0xA1347B55   ; 18E: __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA1147257   ; 18F: __thumb int GetCurMenuItem(void *gui)

0640: 0xA0828F64   ; 190: __arm void MutexCreate(MUTEX *mtx)
0644: 0xA0829090   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA0829210   ; 192: __arm void MutexLock(MUTEX *mtx)
064C: 0xA0829268   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA08292C4   ; 194: __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA1148719   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA11448FD   ; 196: x65__thumb void RefreshGUI(void)
065C: 0xA114876B   ; 197: __thumb void *AllocMenuItem(void *gui)
0660: 0xA1148879   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA11486EB   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA114803D   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA117957D   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA1247198   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA1247160   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA0875395   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA08754CB   ; 1A0: __thumb int inflate(z_streamp strm, int flush)
0684: 0xA0876307   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA08C3C41   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0C79A68   ; 1A3: __arm int GetCurrentGPRSProfile(void)
0690: 0xA0C79A0C   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA08C3C6B   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA08283A0   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA0B4F6DF   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA1575A55   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA1576A67   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA157611F   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA1576B8F   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA15754B9   ; 1AC: __thumb void png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA1576BAB   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA1577901   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA1576B65   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA1577897   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA1576BB9   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA1574E99   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num)
06CC: 0xA115212B   ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA114F417   ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int isnewSGold(void)
06D8: 0xA12B43BF   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA1336AB9   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8: __adr void *EXT_TOP(void)
;6E4:              ; 1B9: __adr void *PNG_TOP(void)
;6E8:              ; 1BA: __adr void *LIB_TOP(void)
;6EC:              ; 1BB: __adr void *DATA_N_SFB(void)
06F0: 0xA1562F07   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA1562BEB   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA1562DE7   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA1457521   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA14575AF   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA145777B   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA1454D7B   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA1145877   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA11457EF   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA11597FB   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA1179555   ; 1C6: x65__thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA117955F   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA114142D   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA1140553   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA1140547   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA114053B   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA1140525   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA114050D   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA11405F5   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
;73C:              ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA093BD14   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA11796BB   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA11796C5   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA11795A5   ; 1D3: x65__thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA11795AF   ; 1D4: x65__thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA1253804   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA1576B9D   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA1577963   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA11795EB   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA11795FF   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0A475C3   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA87D1FB8   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA0C30955   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA0C30977   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA11795EB   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA11795FF   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA11497BD   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA11552AD   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA114347B   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA1143363   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA1142AA5   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA11797B1   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA11476C7   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
07AC: 0xA868B826   ; 1EB: char *RAM_IMSI()
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
07C8: 0xA12534F0   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA0837C68   ; 1F3: GetSessionAge
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA86CBCD4   ; 1FB: char *RamMediaIsPlaying()
;7F0:              ; 1FC: 
;7F4:              ; 1FD: 
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

;********************************************************************************


;------------------------- end -------------------------

