;S65v58
;Большая библиотека функций
;BigFunctionLibrary
;(c) avkiev
;Version: 14
;PatchID: 6048
;Details: https://patches.kibab.com/patches/details.php5?id=6048
/*
Эта библиотека для мп14 с 11 она работать не будет! Также установите ELF Loader так как там находитса FREAD32 FWRITE32!
*/
+0FD4000
#pragma enable old_equal_ff
000: 0xA0002070     ; f000: SWI_0
004: 0xA0002070     ; f001: SWI_1
008: 0xA0002070     ; f002: SWI_2
00C: 0xA0002070     ; f003: SWI_3
010: 0xA0002070     ; f004: SWI_4
014: 0xA082BE21     ; f005: DecToHex          
018: 0xA123FF08     ; f006: __arm int GetAkku(int param1,int param2);
01C: 0xA1405D5D     ; f007: GetLP
020: 0xA1240D9C     ; f008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
024: 0xA1263C38     ; f009: SwitchPhoneOff
028: 0xA122ECB0     ; f00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
02C: 0xA122ECF0     ; f00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
030: 0xA122EDD8     ; f00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
034: 0xA122EC04     ; f00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
038: 0xA122EC34     ; f00E: fflush
03C: 0xA122EC64     ; f00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);
040: 0xA122EA94     ; f010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
;040: 0xA128B2A4     ; f010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
;044: 0xA0BD4CB7     ; f011: OpenReadCloseFile
044: 0xA0FCF201     ; f011: OpenReadCloseFile
048: 0xA128B798     ; f012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
04C: 0xA128B2A4     ; f013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
050: 0xA0820F98     ; f014: __arm void *malloc(unsigned int size);
054: 0xA0821000     ; f015: __arm void mfree(void *);
058: 0xA1669A99     ; f016: __thumb int sprintf(char *buf, char *str, ...);
05C: 0xA166AD21     ; f017: __thumb char * strcat (char *,const char *);
060: 0xA166AD41     ; f018: __thumb char * strchr (const char *,int);
064: 0xA166AD64     ; f019: __arm int  strcmp (const char *,const char *);
068: 0xA166AE01     ; f01A: __thumb char * strcpy (char *dest,const char *source);
06C: 0xA166AE81     ; f01B: __thumb unsigned int strlen(char *);
070: 0xA0C30EF5     ; f01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);
074: 0xA0C30EA9     ; f01D: wsInsertChar
078: 0xA11599C1     ; f01E: GetPITaddr
07C: 0xA16A00A3     ; f01F: DrawMainScreen
080: 0xA16A2B65     ; f020: DrawScreenSaver
084: 0xA1159AF5     ; f021: GetImgHeight
088: 0xA1159B05     ; f022: GetImgWidth
08C: 0xA1699231     ; f023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
090: 0xA1150BB5     ; f024: DrawImage2
094: 0xA169920B     ; f025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
098: 0xA1150AF5     ; f026: DrawImgBW
09C: 0xA1698B8D     ; f027: AddIconToIconbar
0A0: 0xA1241E04     ; f028: getEELiteMaxID
0A4: 0xA122D6D0     ; f029: getEEFullMaxID
0A8: 0xA1241CA0     ; f02A: GetEELiteBlockAddress
0AC: 0xA1241DA8     ; f02B: getEELiteBlockSizeVersion
0B0: 0xA122D314     ; f02C: getEEFullBlockSizeVersion
0B4: 0xA1241E38     ; f02D: StartWriteEELiteBlock
0B8: 0xA1241EB4     ; f02E: FinishWriteEELiteBlock
0BC: 0xA1241E10     ; f02F: DeleteEELiteBlock
0C0: 0xA1241E70     ; f030: WriteEELiteBlock
0C4: 0xA166AFC9     ; f031: strrchr
0C8: 0xA0968D20     ; f032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
0CC: 0xA095EF04     ; f033: PlaySound2
0D0: 0xA0946400     ; f034: PlaySoundLoop
0D4: 0xA0BB359F     ; f035: AlarmClockRing
0D8: 0xA0B365E5     ; f036: GetATCmdString
0DC: 0xA0BB51BF     ; f037: OriginalATCGSN
0E0: 0xA0B35F81     ; f038: PostAtCommand
0E4: 0xA0B376BB     ; f039: SendATAnswerStr
0E8: 0xA0BD8851     ; f03A: mfree_high
0EC: 0xA166A49D     ; f03B: MemChr
0F0: 0xA122ED30     ; f03C: SetFileSize
0F4: 0xA0A47F21     ; f03D: editOrNewTXTModule
0F8: 0xA0B356E9     ; f03E: LoadProcesses
0FC: 0xA1151819     ; f03F: GetPaletteAdrByColorIndex
100: 0xA08DA3DF     ; f040: GetVibraStatus
104: 0xA0B9026B     ; f041: GetProvider
108: 0xA16A3271     ; f042: IsScreenSaver
10C: 0xA1158B87     ; f043: __thumb int IsUnlocked(void);
110: 0xA0C571B1     ; f044: TempLigntOn
114: 0xA09818F8     ; f045: GetWavLen
118: 0xA16A279D     ; f046: HasNewSMS
11C: 0xA16A195D     ; f047: HasFlashSMS
120: 0xA0A49FB7     ; f048: ReadNewSMS
124: 0xA169E64E     ; f049: ReadFlashSMS
128: 0xA096137C     ; f04A: PlayFile
12C: 0xA0C7E9F4     ; f04B: StartMidlet
130: 0xA0B8DE75     ; f04C: GetMissedCallsCount
134: 0xA0828294     ; f04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
138: 0xA1143E6F     ; f04E: ShowMsgInR1_3
13C: 0xA1143E7F     ; f04F: ShowMsgInR1_4
140: 0xA1143EE7     ; f050: ShowMsgInR1_7
144: 0xA136D5B5     ; f051: GetNetAccessMode
148: 0xA1241448     ; f052: GetIlluminationDataTable
14C: 0xA166A4C1     ; f053: memcmp
150: 0xA082BE5D     ; f054: StrToInt
154: 0xA08DA3F5     ; f055: SwitchVibraOnOff
158: 0xA006F131     ; f056: PlayVibra
15C: 0xA08283A0     ; f057: IsCallAfterTimerStillRunning
160: 0xA0005CE8     ; f058: ClearMemory
164: 0xA166A98C     ; f059: memcpy
168: 0xA11584B3     ; f05A: KeypressOn
16C: 0xA1158571     ; f05B: KeypressOff
170: 0xA129A4C8     ; f05C: __arm unsigned char GetCPUClock();
174: 0xA08F911F     ; f05D: __thumb unsigned char GetCPULoad();
178: 0xA0824650     ; f05E: GetMMIMemUsed
17C: 0xA082100C     ; f05F: __arm int GetFreeRamAvail();
180: 0xA08DA5D1     ; f060: ShowMainMenu
184: 0xA08DF43B     ; f061: ShowNativeMenu
;188: 0xFFFFFFFF     ; f062: SetVibraStatus
18C: 0xA169CA33     ; f063: MS_Wallpaper_Flush
190: 0xA11447C9     ; f064: EndUpdateScreen
194: 0xA0B8F0C1     ; f065: EndCall
198: 0xA0B4E4DF     ; f066: EndCallBusy
19C: 0xA16985D9     ; f067: IsDirectCallActive
1A0: 0xA16960A7     ; f068: GetScreenSaverRAM
1A4: 0xA082949C     ; f069: LockShed
1A8: 0xA0829524     ; f06A: UnlockShed
1AC: 0xA122E9E8     ; f06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
1B0: 0xA122EA24     ; f06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
1B4: 0xA122E970     ; f06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
1B8: 0xA132F26B     ; f06E: IsCalling
1BC: 0xA169D2EF     ; f06F: __thumb void RefreshGPRSTraffic();
1C0: 0xA169D30D     ; f070: __thumb int *GetGPRSTrafficPointer();
1C4: 0xA114F54B     ; f071: DrawFrame
1C8: 0xA0B8A02F     ; f072: GetCurrentSecondOfCall
1CC: 0xA132FA83     ; f073: GetTypeOfCall
1D0: 0xA08DAB57     ; f074: GetFunctionPointer
1D4: 0xA1155DED     ; f075: ScreenWindowMetrics
1D8: 0xA117369D     ; f076: ScreenWindowText
1DC: 0xA1170E7B     ; f077: ScreenWindowColor
1E0: 0xA0C37A37     ; f078: GetTimeFormat
1E4: 0xA11551C1     ; f079: DrawObject
1E8: 0xA1170F11     ; f07A: ClearWindowBuffer
1EC: 0xA084F979     ; f07B: GetProfileFilter
1F0: 0xA1249178     ; f07C: __arm unsigned int SetVibration(unsigned int power);
1F4: 0xA132EC85     ; f07D: IsIncognitoCall
1F8: 0xA1344F79     ; f07E: Rand
;1FC: 0xFFFFFFFF     ; f07F: IsPlayerOn
200: 0xA0AA76D5     ; f080: __thumb void int ShowCallList(int list, int zero);
204: 0xA166AC1C     ; f081: HexToDec
;208: 0xFFFFFFFF    ; f082: GetCurrentTrackFilename
20C: 0xA094A914     ; f083: GetPathOfFoundFile
210: 0xA122EB64     ; f084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
214: 0xA0825D79     ; f085: StrCmpNoCase
218: 0xA122D23C     ; f086: ReadEEPROMData
21C: 0xA122D380     ; f087: WriteEEPROMData
;220: 0xFFFFFFFF     ; f088: GetAccessoryType
;224: 0xFFFFFFFF     ; f089: GetLangMesIntoWS
228: 0xA122E900     ; f08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
22C: 0xA122EEC4     ; f08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
230: 0xA093C464     ; f08C: __arm void RegExplorerExt(REGEXPLEXT *);
;234: 0xFFFFFFFF     ;f08D:
238: 0xA122EAC4     ; f08E: int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);
23C: 0xA122EAFC     ; f08F: int rmdir(char *cDirectory, unsigned int *ErrorNumber);
240: 0xA122EDA0     ; f090: int truncate (int FileHandler, int length, int *errornumber);
244: 0xA122EA64     ; f091: int isdir(char *cDirectory, unsigned int *ErrorNumber);
248: 0xA0C46604     ; 092: int * calloc(size_t nelem, size_t elsize); (kmz)
24C: 0xA1263C44     ; f093: Reboot
250: 0xA093C528     ;  f094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;254: 0xFFFFFFFF     ;f095:
;258: 0xFFFFFFFF     ;f096:
;25C: 0xFFFFFFFF     ;f097:
;260: 0xFFFFFFFF     ;f098:
;264: 0xFFFFFFFF     ;f099:
;268: 0xFFFFFFFF     ;f09A:
;26C: 0xFFFFFFFF     ;f09B:
;270: 0xFFFFFFFF     ;f09C:
;274: 0xFFFFFFFF     ;f09D:
;278: 0xFFFFFFFF     ;f09E:
27C: 0xA114F417     ;f09F:
280: 0xA0C3046F     ; f0A0: wsprintf
284: 0xA0825E59     ; f0A1: wstrcpy
288: 0xA0C309F3     ; f0A2: Unicode_GetCharByPosition
28C: 0xA122E150     ; f0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
290: 0xA0C30C67     ; f0A4:
294: 0xA0C30CA3     ; f0A5:
;298: 0xFFFFFFFF     ; f0A6:
;29C: 0xFFFFFFFF     ; f0A7:
;2A0: 0xFFFFFFFF     ; f0A8:
;2A4: 0xFFFFFFFF     ; f0A9:
2A8: 0xA0FCF001     ; f0AA: _thumb OpenWriteCloseFile
2AC: 0xA0002070     ; f0AB:
2B0: 0xA0FCF1B1     ; f0AC: DrawText
2B4: 0xA0FCF0A1     ; f0AD: StrAnsi2Uni
2B8: 0xA0FCF0C1     ; f0AE: StrUni2Ansi
2BC: 0xA0FCF051     ; f0AF: Hex2Int
2C0: 0xA0FCF351     ; f0B0: DrawPicWithCanvas
2C4: 0xA0FCF371     ; f0B1: DrawColorPicWithCanvas
2C8: 0xA0FC3E29     ; f0B2: 
2CC: 0xA0FCF301     ; f0B3: Seconds2iTime
2D0: 0xA0C36BBB     ; f0B4: __thumb void GetDateTime(TDate *, TTime *);
2D4: 0xA08257CF     ; f0B5: __thumb char GetWeek(TDate*);
2D8: 0xA08C9B0D     ; f0B6: __thumb char GetProfile();
2DC: 0xA08C99DB     ; f0B7: __thumb char SetProfile(char);
2E0: 0xA166AB00     ; f0B8: dwMODdw
2E4: 0xA1158E07     ; f0B9:
2E8: 0xA166AAE8     ; f0BA: __arm void *memset(void *s, int c, int n);
2EC: 0xA082100C     ; f0BB: __arm void *realloc(void *ptr, int size);
2F0: 0xA0837018     ; f0BC: __arm int divide(int divisor, int dividend);
2F4: 0xA166ABD4     ; f0BD: __arm  int DivBy10(int divident);
2F8: 0xA0FC0C91     ; f0BE: RunScaner (MP14)
2FC: 0xA0FC3001     ; f0BF: SpellTime
300: 0xA0FC7601     ; f0C0:
304: 0xA0FC0C51     ; f0C1: RunDispatcher (MP14)
;308: 0xFFFFFFFF     ; f0C2:
30C: 0xA0FCF3A1     ; f0C3: ProcessFiles (MP11)
310: 0xA0FC0C01     ; f0C4: GetBuffer (MP14)
;314: 0xFFFFFFFF     ; f0C5:
;318: 0xFFFFFFFF     ; f0C6:
;31C: 0xFFFFFFFF     ; f0C7:
320: 0xA86C2678     ; r0C8: __arm unsigned short *RamCap();
324: 0xA86C267A     ; r0C9: RamLS
328: 0xA86CEF84     ; r0CA: __arm RAMNET * RamNet();
32C: 0xA86CEF8A     ; f0CB
330: 0xA8451658     ; f0CC: RamMissedCalls
334: 0xA845164C     ; f0CD: RamMissedSMS
338: 0xA869224C     ; f0CE: RamDateTime
33C: 0xA86DA33C     ; f0CF: RamAlarm
340: 0xA870C618     ; f0D0: RamAccPoint
344: 0xA868C4B0     ; f0D1: RamScreensaver
348: 0xA8692274     ; f0D2: RamAutoTime
34C: 0xA868C4B8     ; f0D3: RamStby
350: 0xA845163C     ; f0D4: RamMissedMes
354: 0xA86A99C8     ; f0D5: RamIsLocked
358: 0xA8690BF0     ; f0D6: RamNetOnline
35C: 0xA86E674A     ; f0D7: RamScreenBrightness
360: 0xA8691FF9     ; f0D8: RamMenuAnywhere
364: 0xA86CB934     ; f0D9: RamShutdownMode
368: 0xA870CA30     ; f0DA: RamIsShutdown
36C: 0xA868C4E4     ; f0DB: RamMainscreenAccuIcon
370: 0xA8772B44     ; f0DC: RamRandSeed
374: 0xA899F2BC     ; f0DD: RamCurrentTrack 
378: 0xA85187CD     ; f0DE: RamIsSimPresent
37C: 0xA86A98D8     ; f0DF: RamPressedKey
380: 0xA869E320     ; f0E0:
;384: 0xFFFFFFFF     ; f0E1:
388: 0xA86B6B08     ; f0E2: RamKeyBuffer
38C: 0xA86D015C     ; f0E3: RamProfileNum
390: 0xA8770000     ; f0E4: FreeRAM
394: 0x00001297     ; f0E5: LP_MonthsShort
398: 0x0000047E     ; f0E6: Pic_Big0
39C: 0x00000405     ; f0E7: Pic_Little0
3A0: 0x0000048C     ; f0E8: Pic_Extra
3A4: 0x000004DA     ; f0E9: Pic_Profiles
3A8: 0x000002C0     ; f0EA: Pic_Vibra
3AC: 0x000003C1     ; f0EB: Pic_Call
3B0: 0x000004E1     ; f0EC: Pic_AdvNet
3B4: 0x0000118B     ; f0ED: LP_MonthsLong
3B8: 0x00000400     ; fOEE: LP_Weekdays
3BC: 0x00000511     ; fOEF: Pic_Calendar
3C0: 0x000004F0     ; f0F0: Pic_AccuGraph
3C4: 0xA169FEC1     ; f0F1: BuildCanvas
;3C8: 0xFFFFFFFF     ; f0F2:
;3CC: 0xFFFFFFFF     ; f0F3:
;3D0: 0xFFFFFFFF     ; f0F4:
;3D4: 0xFFFFFFFF     ; f0F5:
;3D8: 0xFFFFFFFF     ; f0F6:
;3DC: 0xFFFFFFFF     ; f0F7:
3E0: 0xA0FD0050     ; f0F8: Additional_PIT_address
3E4: 0x000004DA     ; f0F9: Additional_PIT_start
3E8: 0x0000053D     ; f0FA: Additional_PIT_end
;3EC: 0xFFFFFFFF     ; f0FB
3F0: 0xA0FC0A00     ; f0FC: PictureRelocationTable
3F4: 0x0000F000     ; f0FD: PictureRelocationBase
3F8: 0x00001E1E     ; f0FE: NextPictureMagic
;3FC: 0xFFFFFFFF     ; f0FF:
400: 0xA0827B04     ; f100: GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
404: 0xA0826AA0     ; f101: GBS_ReciveMessage(GBS_MSG *);
408: 0xA08271A0     ; f102: GBS_AcceptMessage(void);
40C: 0xA0826EC8     ; f103: GBS_ClearMessage(void);
410: 0xA0827098     ; f104: GBS_PendMessage(GBS_MSG *);
414: 0xA0827F74     ; f105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero);
418: 0xA868A948     ; r106: CSMROOT *CSM_root();
41C: 0xA113FFCB     ; f107: CreateCSM(const CSM_DESC*,void *,int);
420: 0xA113FFDD     ; f108: CSM_RAM * FindCSMbyID (int id);
424: 0xA1140087     ; f109: __thumb void DoIDLE(void);
428: 0x00000000     ; f10A: __unknown void *GetConfig(unsigned int id);                            //BoBaPack
42C: 0x00000000     ; r10B: __unknown void *GetMinAdrScan();                                       //BoBaPack
430: 0x00000000     ; r10C: __unknown void *GetMaxAdrScan();                                       //BoBaPack
434: 0x00000000     ; r10D: __unknown unsigned short *GetCI();                                     //BoBaPack
438: 0x00000000     ; f10E: __unknown void Vibration(unsigned int power, unsigned int duration);   //BoBaPack
43C: 0xA16A1415     ; f10F: __thumb void freeUSSD();
440: 0xA0825E59     ; f110: __thumb char *wstrcopy(char *dst, char *src);
444: 0xA16A1451     ; f111: __thumb char GetTypeUSSD();
448: 0xA16A1461     ; f112: __thumb unsigned int SetUSSD(StructUSSDStr *);
44C: 0xA166AE51     ; f113: __thumb char * strpbrk (const char *s1,const char *s2);
450: 0xA166AECD     ; f114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
454: 0xA166AEFD     ; f115: __thumb int  strncmp (const char *s1,const char *s2,int n);
458: 0xA166AF4D     ; f116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
45C: 0xA166AFC9     ; f117: __thumb char * strrchr (const char *s,int c);
460: 0xA166AFE1     ; f118: __thumb char * strstr (const char *s1,const char *s2);
464: 0xA166B05D     ; f119: __thumb int  strtol (const char *nptr,char **endptr,int base);
468: 0xA166B0D9     ; f11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
46C: 0xA1669A45     ; f11B: __thumb int snprintf (char *,int n,const char *format,...);
470: 0xA166A4C1     ; f11C: __thumb int  memcmp (void *m1,void *m2,int n);
474: 0xA166A944     ; f11D: __arm void  zeromem (void *dest,int n);
478: 0xA166A98C     ; f11E: __arm void * memcpy (void *dest,const void *source,int cnt);
47C: 0xA0C30D87     ; f11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
480: 0xA0C30DA9     ; f120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
484: 0xA0C30DCD     ; f121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
488: 0xA0C30E61     ; f122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
48C: 0xA0C306CB     ; f123: __thumb int  wstrlen (WSHDR *wshdr);
490: 0xA0C3046F     ; f124: __thumb int wsprintf (WSHDR *,const char *format,...);
494: 0xA0C30C67     ; f125: __thumb WSHDR * AllocWS (int len);
498: 0xA0C3105B     ; f126: __thumb void  CutWSTR (void *WSHDR,int len);
49C: 0xA0C30BFF     ; f127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
4A0: 0xA0C30C1F     ; f128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
4A4: 0xA0C305B1     ; f129: __thumb void  FreeWS (WSHDR *wshdr);
4A8: 0xA11551C1     ; f12A: __thumb void  DrawObject (DRWOBJ *);
4AC: 0xA0002070     ; 12B: AddKeybMsgHook(void *proc)
4B0: 0xA0FFF073     ; 12C: AddKeybMsgHook_end(void *proc)
4B4: 0xA0FFF0A3     ; 12D: RemoveKeybMsgHook(void *proc)
4B8: 0xA1151819     ; f12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
4BC: 0xA115183D     ; f12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);
4C0: 0xA115184D     ; f130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);
4C4: 0xA115186B     ; f131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
4C8: 0xFFFFFFFF     ; f132: __unknown void  deleted();
4CC: 0xA1155DED     ; f133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
4D0: 0xA1155E03     ; f134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
4D4: 0xA114466F     ; f135: __thumb int  IsGuiOnTop (int id);
4D8: 0xA1144751     ; f136: __thumb int  CreateGUI_ID (void *gui,int id);
4DC: 0xA1144761     ; f137: __thumb int  CreateGUI (void *gui);
4E0: 0xA114476F     ; f138: __thumb int  CreateGUI_30or2 (void *gui);
4E4: 0xA11447A9     ; f139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
4E8: 0xA11447B9     ; f13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
4EC: 0xA11447C9     ; f13B: __thumb void  GeneralFuncF1 (int cmd);
4F0: 0xA11447D7     ; f13C: __thumb void  GeneralFuncF0 (int cmd);
4F4: 0xA11447E5     ; f13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
4F8: 0xA11447F5     ; f13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);
4FC: 0xA1144887     ; f13F: __thumb void DirectRedrawGUI (void);
500: 0xA1144893     ; f140: __thumb void  DirectRedrawGUI_ID (int id);
504: 0xA1144923     ; f141: __thumb void PendedRedrawGUI (void);
508: 0xA114EE11     ; f142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
50C: 0xA0828330     ; f143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
510: 0xA0829A08     ; f144: __arm void  GBS_StopTimer (GBSTMR *tmr);
514: 0xA08243BC     ; f145: __arm int GBS_GetCurCepid (void);
518: 0xA082949C     ; f146: __arm void LockSched(void);
51C: 0xA0829524     ; f147: __arm void UnlockSched(void);
520: 0xA1143E51     ; f148: __thumb int ShowMSG(int flag, int lgp_id);
524: 0xA117369D     ; f149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
528: 0xA1170F11     ; f14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
52C: 0xA1170E7B     ; f14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
530: 0xA11736ED     ; f14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
534: 0xA114467D     ; f14D: __thumb GUI *GetTopGUI(void);
538: 0xA115C133     ; f14E: __thumb void *FindItemByID(GUI *gui,int id);
53C: 0xA115C15D     ; f14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
540: 0xA114F54B     ; f150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
544: 0xA1150ACB     ; f151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
548: 0xA1143A09     ; f152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
54C: 0xA0826964     ; f153: __arm int GBS_RecActDstMessage(GBS_MSG *);
550: 0xA0824380     ; f154: __arm void KillGBSproc(int cepid);
0554: 0xA1575A55   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA1574F65   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA15769C9   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA1574E39   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA1575C7D   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15975A3   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1575957   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA15765BF   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA1576601   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA15769C9   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA15754CB   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA1576157   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA0000000   ; 161: png_init_io(png_structp png_ptr, int fp)
588: 0xA166B33C     ; f162: __arm setjmp(jmp_buf jmpbuf);
58C: 0xA11410DD     ; f163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
590: 0xA11405B9     ; f164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
594: 0xA11408C7     ; f165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
598: 0xA1141275     ; f166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
59C: 0xA1156109     ; f167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
5A0: 0xA11796F1     ; f168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
5A4: 0xA1179695     ; f169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
5A8: 0xA117969F     ; f16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
5AC: 0xA122EB9C     ;f16B: __arm int unlink(const char *cFileName,unsigned int *errornumber);
5B0: 0xA122E030     ; f16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
5B4: 0xA0BF583F     ; f16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
5B8: 0xA0B92FBF     ; f16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
5BC: 0xA0B937B5     ; f16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
5C0: 0xA0B4B81D     ; f170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;5C4: 0xFFFFFFFF     ; f171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int)
;5C8: 0xFFFFFFFF     ; f172 __arm void REDRAW(void);
05CC: 0xA12B36CD ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA12B399F ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA12B3851 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA12B3B19 ; 176: __thumb int closesocket(int socket);
05DC: 0xA12B3A95 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA12B3BC3 ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA12B3E9F ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA134ED89 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA134ED95 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA876BA40 ; 817C: __arm int socklasterr(void);
;Morj lives large and kicks butt!!!
05F4: 0xA1144805 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA1144815 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA1144821 ; 17F: __thumb void DisableIDLETMR(void);
0600: 0xA11795C3 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA117952D ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA1179569 ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA1179587 ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA11408FF ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int  maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA082769C ;185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA1331829 ;186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA1332259 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);
0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000016 ; 818A: __adr int HeaderH(void);
062C: 0x00000016 ; 818B: __adr int SoftkeyH(void);
0630: 0xA08298B4 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA12025F4 ;18D: __arm int available0(int sock);
0638: 0xA1347B55 ;18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA1147257 ;18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA0828F64 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0829090 ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA0829210 ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA0829268 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA08292C4 ;194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA1148719 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA11448FD ;196: __thumb void RefreshGUI(void);
065C: 0xA114876B ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA1148879 ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA11486EB ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA114803D ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA117957D ;19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
;0674: 0x ;19D: __arm long long getCpuUsedTime_if_ena(void);
;0678: 0x ;19E: __arm void StartCpuUsageCount(void);
067C: 0xA0875395 ;19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int  stream_size);
0680: 0xA08754CB ;1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA0876308 ;1A1: __thumb int inflateEnd(z_streamp strm);
0800: 0xA0FC7301 ;200: run ScreenShooter

+0

#pragma disable old_equal_ff
;------------------------- end -------------------------

