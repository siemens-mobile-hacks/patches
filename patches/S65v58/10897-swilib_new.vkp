;S65v58
;Библиотека функций
;Functions Library
;(c) avkiev
;(p) dimonp25
;Version: 210525
;PatchID: 10897
;Details: https://patches.kibab.com/patches/details.php5?id=10897
/*

*/

+0FD4000
#pragma enable old_equal_ff
000: 0xA0002070   ; 00: __arm void loopback0();
004: 0xA0002070   ; 01: __arm void loopback1();
008: 0xA0002070   ; 02: __arm void loopback2();
00C: 0xA0002070   ; 03: __arm void loopback3();
010: 0xA0002070   ; 04: __arm void loopback4();
014: 0xA082BE21   ; 005: DecToHex
0018: 0xA123FF08  ; 06: __arm int GetAkku(int param1,int param2);
01C: 0xA1405D5D   ; 007: GetLP
0020: 0xA1240D9C  ; 08: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
024: 0xA1263C38   ; 009: SwitchPhoneOff
;
0028: 0xA122ECB0  ; 0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C: 0xA0FD9401  ; 011: fread
;030: 0xA0FD9451  ; 012: fwrite
0034: 0xA122EC04  ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
038: 0xA122EC34   ; 014: fflush
003C: 0xA122EC64  ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)
0040: 0xA122EA94  ; 10: mkdir(KMZ)
044: 0xA0BD4CB7   ; 017: OpenReadCloseFile
0048: 0xA122E9B0  ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
004C: 0xA122EB2C  ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
;
0050: 0xA0820F98   ; 14: malloc(unsigned int size)
0054: 0xA0821000   ; 15: mfree(void *)
0058: 0xA1669A99   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA166AD21   ; 17: strcat(char *,const char *)
0060: 0xA166AD41   ; 18: strchr(const char *,int)
0064: 0xA166AD64   ; 19: strcmp(const char *,const char *)
0068: 0xA166AE01   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA166AE81   ; 1B: strlen(char *)
0070: 0xA0C30EF5   ; 1C: wsAppendChar(void *WSHDR,int wchar)
074: 0xA0C30EA9    ; 029: wsInsertChar

;
078: 0xA11599C1   ; 030: GetPITaddr
07C: 0xA16A00A3   ; 031: DrawMainScreen
080: 0xA16A2B65   ; 032: DrawScreenSaver
084: 0xA1159AF5   ; 033: GetImgHeight
088: 0xA1159B05   ; 034: GetImgWidth
008C: 0xA1699231  ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
090: 0xA1150BB5   ; 036: DrawImage2
0094: 0xA169920B  ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
098: 0xA1150AF5   ; 038: DrawImgBW
09C: 0xA1698B8D   ; 039: AddIconToIconbar
;
0A0: 0xA1241E04   ; 040: getEELiteMaxID
0A4: 0xA122D6D0   ; 041: getEEFullMaxID
0A8: 0xA1241CA0   ; 042: GetEELiteBlockAddress
0AC: 0xA1241DA8   ; 043: getEELiteBlockSizeVersion
0B0: 0xA122D314   ; 044: getEEFullBlockSizeVersion
0B4: 0xA1241E38   ; 045: StartWriteEELiteBlock
0B8: 0xA1241EB4   ; 046: FinishWriteEELiteBlock
0BC: 0xA1241E10   ; 047: DeleteEELiteBlock
0C0: 0xA1241E70   ; 048: WriteEELiteBlock
0C4: 0xA166AFC9   ; 049: strrchr
;
00C8: 0xA0968D20  ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
0CC: 0xA095EF04   ; 051: PlaySound2
0D0: 0xA0946400   ; 052: PlaySoundLoop
0D4: 0xA0BB359F   ; 053: AlarmClockRing
0D8: 0xA0B365E5   ; 054: GetATCmdString ;
0DC: 0xA0961BF0   ; 055: void Ringtones_SetState(unsigned char state)
0E0: 0xA0B35F81   ; 056: PostAtCommand ;
0E4: 0xA0B376BB   ; 057: SendATAnswerStr ;
0E8: 0xA0BD8851   ; 058: mfree_high ;
0EC: 0xA166A49D   ; 059: MemChr
;
0F0: 0xA122ED30   ; 060: SetFileSize
0F4: 0xA0A47F21   ; 061: editOrNewTXTModule
0F8: 0xA0B356E9   ; 062: LoadProcesses
0FC: 0xA1151819   ; 063: GetPaletteAdrByColorIndex

0100: 0xA08DA3DF ; 040: GetVibraStatus
0104: 0xA0B9026B ; 041: GetProvider
0108: 0xA16A3271 ; 042: IsScreenSaver
010C: 0xA1158B87 ; 043: IsUnlocked
0110: 0xA0C34765 ; 044: __thumb void TempLigntOn(int flags, int unk);
0114: 0xA09818F8 ; 045: GetWavLen;
0118: 0xA16A279D ; 046: HasNewSMS
011C: 0xA16A195D ; 047: HasFlashSMS
0120: 0xA0A49FB7 ; 048: ReadNewSMS
0124: 0xA169E64E ; 049: ReadFlashSMS
0128: 0xA096137C ; 04A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);
012C: 0xA0C7E9F4 ; 04B: StartMidlet
0130: 0xA0B8DE75 ; 04C: GetMissedCallsCount
0134: 0xA0828294 ; 04D: GBS_StartTimerProc(void *htimer, long ms, void ptr());
0138: 0xA1143E7F ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA1143EDD ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));

0140: 0xA1143EE7 ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
144: 0xA136D5B5   ; 081: GetNetAccessMode
148: 0xA1241448   ; 082: GetIlluminationDataTable
14C: 0xA166A4C1   ; 083: memcmp
150: 0xA082BE5D   ; 084: StrToInt
154: 0xA08DA3F5   ; 085: SwitchVibraOnOff
158: 0xA006F131  ; 086: PlayVibra
15C: 0xA08283A0   ; 087: IsCallAfterTimerStillRunning
160: 0xA0005CE8   ; 088: ClearMemory
164: 0xA166A98C   ; 089: memcpy;
0168: 0xA11584B3 ; 090: KeypressOn
016C: 0xA1158571 ; 091: KeypressOff
0170: 0xA129A4C8 ; 05C: GetCPUClock()(KMZ)
0174: 0xA08F911F   ; 5D: GetCPULoad()
178: 0xA0824650   ; 094: GetMMIMemUsed
017C: 0xA082100C   ; 5F: void GetNonPermMemAvail()(KMZ)

0180: 0xA08DA5D1 ; 060: ShowMainMenu
0184: 0xA08DF43B ; 061: ShowNativeMenu
;188: 0x         ; 062: SetVibraStatus
018C: 0xA05C4441 ; 063: MMI_CanvasBuffer_FlushV(char canvas_id);
0190: 0xA11447C9 ; 064: EndUpdateScreen
0194: 0xA0B8F0C1 ; 065: EndCall
0198: 0xA0B4E4DF ; 066: EndCallBusy
019C: 0xA16985D9 ; 067: IsDirectCallActive
01A0: 0xA16960A7 ; 068: GetScreenSaverRAM
01A4: 0xA082949C ; 069: LockShed
01A8: 0xA0829524 ; 06A: UnlockShed
01AC: 0xA122E9E8 ; 06B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
01B0: 0xA122EA24 ; 06C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA122E970 ; 06D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B8: 0xA132F26B ; 06E: IsCalling
01BC: 0xA169D2EF ; 06F: void RefreshGPRSTraffic();

01C0: 0xA169D30D ; 070: int * GetGPRSTrafficPointer();
01C4: 0xA114F54B ; 071: DrawFrame
01C8: 0xA0B8A02F ; 072: GetCurrentSecondOfCall
01CC: 0xA132FA83 ; 073: GetTypeOfCall
01D0: 0xA08DAB57 ; 074: GetFunctionPointer
01D4: 0xA169BFC1 ; 075: int IsCanvasBufferSet(char CanvasID);
01D8: 0xA169C00D ; 076: IMGHDR *GetCanvasBufferPicPtr(char CanvasID);
01DC: 0xA1170E7B ; 077: ScreenWindowColor
01E0: 0xA0C37A37 ; 078: GetTimeFormat
01E4: 0xA11551C1 ; 079: DrawObject
01E8: 0xA1170F11 ; 07A: ClearWindowBuffer
01EC: 0xA084F979 ; 07B: GetProfileFilter
01F0: 0xA1249178 ; 07C: SetVibration(unsigned int power);
01F4: 0xA132EC85 ; 07D: IsIncognitoCall
01F8: 0xA1344F79 ; 07E: Rand
;1FC: 0x         ; 07F: IsPlayerOn

0200: 0xA0AA76D5 ; 080: ShowCallList(int list, int zero);
0204: 0xA166AC1C ; 081: HexToDec
;208: 0x         ; 082: GetCurrentTrackFilename
020C: 0xA094A914 ; 083: GetPathOfFoundFile
0210: 0xA122EB64 ; 084: int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
0214: 0xA0825D79 ; 085: StrCmpNoCase
0218: 0xA122D23C ; 086: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg);
021C: 0xA122D380 ; 087: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
;220: 0x         ; 088: GetAccessoryType
0224: 0xA1405E97 ; 089: __thumb GetLangMesIntoWS(int lgp_id, WSHDR *ws);
0228: 0xA122E900 ; 08A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
022C: 0xA122EEC4 ; 08B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
0230: 0xA093C464 ; 08C: RegExplorerExt(REGEXPLEXT const *);
;234: 0x         ; 08D: GetProfileName
0238: 0xA122EAC4 ; 08E: int fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber);
023C: 0xA122EAFC ; 08F: int rmdir(const char * cDirectory, unsigned int *ErrorNumber);

0240: 0xA122EDA0   ; 90: int truncate(int FileHandler, int length, int *errornumber)(KMZ)
0244: 0xA122EA64   ; 91: int isdir(const char * cDirectory, unsigned int *ErrorNumber)(KMZ)
0248: 0xA0C46604   ; 092: int * calloc(size_t nelem, size_t elsize); (kmz)
24C: 0xA1263C44   ; 147: RebootPhone
0250: 0xA093C528   ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;254: 0x   ; f149: 
;
;258: 0x   ; f150: 
;25C: 0x   ; f151: 
;260: 0x   ; f152: 
0264: 0xA09614A4   ; 99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA124986C   ; 9A: ;__arm int ChangeVolume(unsigned char Volume)
026C: 0xA879DBFC   ; 9B: Audio params addr
;270: 0x   ; f156: 
0274: 0xA0BF748D   ; 157: 9D: __thumb int GetMissedEventsPtr()
;278: 0x   ; f158: 
27C: 0xA114F417   ;  9F: ;__thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

;
280: 0xA0C3046F   ; f160: wsprintf
284: 0xA0825E59   ; f161: wstrcpy
288: 0xA0C309F3   ; f162: Unicode_GetCharByPosition
028C: 0xA122E150   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)(KMZ)
290: 0xA0C30C64  ; A4: __thumb WSHDR * AllocWS_2(int len)
294: 0xA0C305B1   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
298: 0xA169D2B5   ; f166: ResetGPRSTraffic
29C: 0xA169D101   ; f167: IsGPRSEnabled
2A0: 0xA13472A9   ; f168: IsGPRSConnected
2A4: 0xA1159191   ; f169: KbdLock
;
2A8: 0xA0FCF001   ; f170: OpenWriteCloseFile
2AC: 0xA0002070   ; f171: SWI_AB
2B0: 0xA0FCF1B1   ; f172: DrawText
2B4: 0xA0FCF0A1   ; f173: StrAnsi2Uni
2B8: 0xA0FCF0C1   ; f174: StrUni2Ansi
2BC: 0xA0FCF051   ; f175: Hex2Int
2C0: 0xA0FCF351   ; f176: DrawPicWithCanvas
2C4: 0xA0FCF371   ; f177: DrawColorPicWithCanvas
2C8: 0xA0FC3E29   ; f178: 
2CC: 0xA0FCF301   ; f179: Seconds2iTime
;
02D0: 0xA0C36BBB   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF   ; B5: GetWeek(TDate*)
02D8: 0xA08C9B0D   ; B6: GetProfile()
02DC: 0xA08C99DB   ; B7: SetProfile(char)
2E0: 0xA166AB00   ; f184: __arm int sdiv(int denom,int number);
2E4: 0xA1158E07   ; f185: KbdUnlock
02E8: 0xA0820FA4   ; B9: __arm void *realloc(void *ptr, int size)
02EC: 0xA166AAE8   ; B8: __arm void *memset(void *s, int c, int n)
02F0: 0xA0837018   ; BA: __arm int divide(int divisor, int dividend)
02F4: 0xA166ABD8   ; 0BD: __arm int DivBy10(int divident);
;
2F8: 0xA0FC0C91   ; f190: RunScaner
2FC: 0xA0FC3001   ; f191: SpellTime
300: 0xA0FC7601   ; f192: MiniGPS
304: 0xA0FC0C51   ; f193: RunDispatcher
308: 0xA0FC12A1   ; f194: GetAllPatchesByInject
30C: 0xA0FCF3A1   ; f195: ProcessFiles
310: 0xA0FC0C01   ; f196: GetBuffer
;314: 0x   ; f197: PIT_Manager_Core
0318: 0xA122FD5C   ; C6: __arm char GetAkkuCapacity()
;31C: 0x   ; f199: CallLibFunByNumber

;
0320: 0xA86C2678   ; C8: RamCap
324: 0xA86C267A   ; f201: RamLS
0328: 0xA86CEF84   ; CA: RamNet
032C: 0xA86d1b88   ;  203: RamRingtoneStatus
330: 0xA8451658   ; f204: RamMissedCalls
334: 0xA845164C   ; f205: RamMissedSMS
338: 0xA869224C   ; f206: RamDateTime
33C: 0xA86DA33C   ; f207: RamAlarm
340: 0xA870C610   ; f208: RamAccPoint
344: 0xA868C4B0   ; f209: RamScreensaver
;
348: 0xA8692274   ; f210: RamAutoTime
34C: 0xA868C4B8   ; f211: RamStby
350: 0xA845163C   ; f212: RamMissedMes
354: 0xA86A99C8   ; f213: RamIsLocked
358: 0xA8690BF0   ; f214: RamNetOnline
35C: 0xA86E674A   ; f215: RamScreenBrightness
360: 0xA8691FF9   ; f216: RamMenuAnywhere
364: 0xA86CB934   ; f217: RamShutdownMode
368: 0xA870CA30   ; f218: RamIsShutdown
36C: 0xA868C4E4   ; f219: RamMainscreenAccuIcon
;
370: 0xA8773684   ; f220: RamRandSeed
;374: 0xA80A3EA0  ; f221: RamCurrentTrack
0378: 0xA85187CD   ; DE: RamIsSimPresent
37C: 0xA86A98E0    ; f223: RamPressedKey
380: 0xA869E320   ; f224: RamScreenBuffer
;384: 0x   ; f225: 
388: 0xA86B6B08   ; f226: RamKeyBuffer
38C: 0xA86D015C   ; f227: RamProfileNum
390: 0xA8770000   ; f228: FreeRAM
394: 0x00001297   ; f229: LP_MonthsShort
;
398: 0x0000047E   ; f230: Pic_Big0
39C: 0x00000405   ; f231: Pic_Little0
3A0: 0x0000048C   ; f232: Pic_Extra
3A4: 0x000004DA   ; f233: Pic_Profiles
3A8: 0x000002C0   ; f234: Pic_Vibra
3AC: 0x000003C1   ; f235: Pic_Call
3B0: 0x000004E1   ; f236: Pic_AdvNet
3B4: 0x0000118B   ; f237: LP_MonthsLong
3B8: 0x00000400   ; f238: LP_Weekdays
3BC: 0x00000511   ; f239: Pic_Calendar
;
3C0: 0x000004F0   ; f240: Pic_AccuGraph
3C4: 0xA169FEC1   ; f241: BuildCanvas
;3C8: 0x   ; f242: lpRAM_PIT
;3CC: 0x   ; f243: RAM_PIT_Cap
3D0: 0x00000522  ; f244: Pic_Lani
03D4: 0xA869E270   ; 0F5: Ram_LCD_Overlay_Layer
03D8: 0xA8692C0C   ; 0F6: RAM_LCD_Layer_Base_Ptr
;3DC: 0x   ; f247: 
3E0: 0xA0FD0050   ; f248: Additional_PIT_address
3E4: 0x000004DA   ; f249: Additional_PIT_start
;
3E8: 0x000005A1   ; f250: Additional_PIT_end
3EC: 0xA0FC0800   ; f251: 
3F0: 0xA0FC0A00   ; f252: PictureRelocationTable
3F4: 0x0000F000   ; f253: PictureRelocationBase
3F8: 0x00001E1E   ; f254: NextPictureMagic
03FC: 0xA0FD4000   ; FF: __arm unsigned int AddrLibrary()

0400: 0xA0827B04   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)(KMZ)
0404: 0xA0826AA0   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0   ; 102: GBS_AcceptMessage(void)
040C: 0xA0826EC8   ; 103: GBS_ClearMessage(void)
0410: 0xA0827098   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F74   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA868A948   ; 106: CSM_root()
041C: 0xA113FFCB   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA113FFDD   ; 108:  CSM_RAM * FindCSMbyID (int id!только для х65!)
0424: 0xA1140087   ; 109:  __thumb void DoIDLE(void!только для х65!)
0428: 0x00000000   ; 10A: GetConfig(unsigned int id)
042C: 0x00000000   ; 10B: GetMinAdrScan()
0430: 0x00000000   ; 10C: GetMaxAdrScan()
0434: 0x00000000   ; 10D: GetCI()
0438: 0x00000000   ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA16A1415   ; 10F: freeUSSD()
0440: 0xA0825E59   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA16A1451   ; 111: GetTypeUSSD()
0448: 0xA16A1461   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA166AE51   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA166AECD   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA166AEFD   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA166AF4D   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA166AFC9   ; 117: strrchr_2(const char *s,int c)
0460: 0xA166AFE1   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA166B05D   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA166B0D9   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1669A45   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA166A4C1   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA166A944   ; 11D: zeromem(void *dest,int n)
0478: 0xA166A98C   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0C30D87   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0480: 0xA0C30DA9   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0C30DCD   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0C30E61   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0C306CB   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0C3046F   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0C30C67   ; 125: AllocWS(int len)
0498: 0xA0C3105B   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0C30BFF   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0C30C1F   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0C305B1   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA11551C1   ; 12A: DrawObject_2(DRWOBJ *)
;04AC:    ; 12B: AddKeybMsgHook(void *proc)
;04B0:    ; 12C: AddKeybMsgHook_end(void *proc)
;04B4:    ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA1151819   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA115183D   ; 12F: getRGBcolor(int ColorIndex,void *dest)
04C0: 0xA115184D   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA115186B   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA166AA44 ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA1155DED   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA1155E03   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA114466F   ; 135: IsGuiOnTop(int id)
04D8: 0xA1144751   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA1144761   ; 137: CreateGUI(void *gui)
04E0: 0xA114476F   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA11447A9   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA11447B9   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA11447C9   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA11447D7   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA11447E5   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA11447F5   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA1144887   ; 13F: DirectRedrawGUI(void)

0500: 0xA1144893   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA1144923   ; 141: PendedRedrawGUI(void)
0508: 0xA114EE11   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828330   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243BC   ; 145: GBS_GetCurCepid(void)
0518: 0xA082949C   ; 146: LockSched_2(void)
051C: 0xA0829524   ; 147: UnlockSched_2(void)
0520: 0xA1143E51   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA117369D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA1170F11   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA1170E7B   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA11736ED   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA114467D   ; 14D: GetTopGUI(void)
0538: 0xA115C133   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA115C15D   ; 14F: GetDataOfItemByID(GUI *gui,int id)
0540: 0xA114F54B   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA1150ACB   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA1143A09   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: KillGBSproc(int cepid)
0554: 0xA1575B91 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA1574F65   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA15769C9   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA1574E39   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA1575CCF ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA15755B5 ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA1575957   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA15765BF   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA1576601   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA1575255 ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA15754CB   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA1576157   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA0000000   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA166B33C   ; 162: !!!setjmp(jmp_buf jmpbuf)
058C: 0xA11410DD   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA11405B9   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA11408C7   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA1141275   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA1156109   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA11796F1   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA1179695   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA117969F   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA122EB9C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA122E030   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0BF583F   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0B92FBF   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0B937B5   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0B4B81D   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;05C4: 0x00000000   ;-171: SUBPROC(void *,...)
;05C8: 0x00000000   ;-172: REDRAW(void)
05CC: 0xA12B36CD ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA12B399F ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA12B3851 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA12B3B19 ; 176: __thumb int closesocket(int socket);
05DC: 0xA12B3A95 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA12B3BC3 ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA12B3E9F ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA134ED89 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA134ED95 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA876BA40 ; 817C: __arm int socklasterr(void);
05F4: 0xA1144805 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA1144815 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA1144821 ; 17F: __thumb void DisableIDLETMR(void);
0600: 0xA11795C3 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA117952D ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA1179569 ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA1179573 ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA11408FF ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA082769C ;185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA1331829 ;186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA1332259 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);
0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000012 ; 818A: __adr int HeaderH(void);
062C: 0x00000012 ; 818B: __adr int SoftkeyH(void);
0630: 0xA08298B4 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA12025F4 ;18D: __arm int available0(int sock);
0638: 0xA1347B55 ;18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA1147257 ;18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA0828F64 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0829090 ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA0829210 ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA0829268 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA08292C4 ;194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA1148719 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA11448FD ;196: __thumb void RefreshGUI(void);
065C: 0xA114876B ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA1148879 ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA11486EB ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA114803D ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA117957D ;19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA1247198 ;19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA1247160 ;19E: __arm void StartCpuUsageCount(void);
067C: 0xA0875395 ;19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA08754CB ;1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA0876307   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA08C3C41 ;1A2:  __arm int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0C79A68 ;1A3:  __arm int GetCurrentGPRSProfile(void)
0690: 0xA0C79A0C ;1A4:  __arm int GetDisconnectTime(void)
0694: 0xA08C3C6B ;1A5:  __arm void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA08283A0 ;1A6:  __arm int IsTimerProc(GBSTMR *)
069C: 0xA0B4F6DF   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA1575A55 ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA1576A67 ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA157611F ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA1576B8F ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA15754B9 ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA1576BAB ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA1577901 ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA1576B65 ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA1577897 ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA1576BB9 ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA1574E99 ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);

06CC: 0xA115212B ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA114F417 ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000 ; 81B5: __adr int isnewSGold(void);
06D8: 0xA12B43BF ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA1336AB9 ; 1B7: __thumb unsigned int str2ip(const char *);
;Handmaded function
;06E0: 0x ; 81B8: __adr void *EXT_TOP(void);
;06E4: 0x ; 81B9: __adr void *PNG_TOP(void);
;06E8: 0x ; 81BA: __adr void *LIB_TOP(void);
;06EC: 0x ; 81BB: __adr void *DATA_N_SFB(void);

06F0: 0xA1562F07 ; 1BC: __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA1562BEB ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA1562DE7 ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA1457521 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);
0700: 0xA14575AF ; 1C0: __thumb void RSA_free (RSA *r);
0704: 0xA145777B ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA1454D7B ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);

070C: 0xA1145877 ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA11457EF ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA11597FB ; 1C5: __thumb int GetFontYSIZE(int font);

0718: 0xA1179555 ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA117955F ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA114142D ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA1140553 ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA1140547 ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA114053B ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA1140525 ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA114050D ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA11405F5 ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);



; new
073C: 0xA093BB94   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA093BD14   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA11796BB   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA11796C5   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA11795A5   ; 1D3: x65__thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA11795AF   ; 1D4: x65__thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA1253804   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA1576B81   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA1577963   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA11795EB   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA11795FF   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0A475C3   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA87D1FB8   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA0C30955   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA0C30977   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA117968B   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA1179721   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA11497BD   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA11552AD   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA114347B   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA1143363   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA1142AA5   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA11797B1   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA11476C7   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
;79C:              ; 1E7: 
07A0: 0xA0C7E344   ; 1E8: __swi __arm int IsNoJava()
;7A4:              ; 1E9: 
07A8: 0xA1159FDA   ; 1EA: __swi __arm int GetMaxDynIcon(void)
07AC: 0xA868B826   ; 1EB: char *RAM_IMSI()
07B0: 0xA115A04F   ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA115A07A   ; 1ED: __swi __arm int IsDynIconBusy(int picture);
;7B8:              ; 1EE: 
07BC: 0xA1159FDE   ; 1EF: __swi __arm void SetDynIcon(int picture,IMGHDR *img,char *bitmap) 

07C0: 0xA094BE38   ; 1F0: __thumb filecopy
07C4: 0xA094DD24   ; 1F1: __thumb filecopy_op_announce
07C8: 0xA12534F0   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA0837C68   ; 1F3: __swi __arm unsigned int GetSessionAge(void)
;7D0:              ; 1F4:
07D4: 0xA166ACE1   ; 1F5: __swi __arm int sscanf(const char *, const char *, ...)
07D8: 0xA115A0A7   ; 1F6: __swi __arm IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA86CBCD4   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA11400CF   ; 1FC: __swi __arm void CloseCSM(int id)
07F4: 0xA114F3FB   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()
0804: 0xA1150BDB   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA11973A3   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA1151FDB   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA116F7B7   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA114F3D5   ; 205: SetProp2Square_v1
0818: 0xA166A869   ; 206: void srand(unsigned int seed)
081C: 0xA1172F4F   ; 207: DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA11552D7   ; 208: int Get_WS_width(*ws, font)
0824: 0xA1140011   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA1179631   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA1179645   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA1179659   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA117966D   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA1140881   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA1140767   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)
0840: 0xA084586D   ; 210: int GetCurGuiID(void)
0844: 0x000000A1 ; 211: int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA09BCE28 ; 212: __arm int CardExplGetCurItem(void *csm);
084C: 0xA0982808 ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA0C30E89 ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA0C30F19 ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA0C304CD ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...);
;
085C: 0xA0ADDD39 ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA1181ABB ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA1181D73 ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA1179739 ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA1179743 ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA117977F   ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0B49CD1 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
;
0878: 0xA1144861 ; 21E: __thumb void FocusGUI(int id);
087C: 0xA114486F ; 21F: __thumb void UnfocusGUI(void);
;
0884: 0xA129A4A8 ; 221: __arm void SetCpuClockLow(2);
0888: 0xA129A490 ; 222: __arm void SetCpuClockTempHi(2);
;088C: 0x00000000 ; 223: __unknown IsMediaPlayerInBackground
;0890: 0x00000000 ; 224: __unknown CloseMediaPlayer
;
0894: 0xA09615A4 ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA096197C ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA0961A1C ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA0961A60 ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
;
08A4: 0xA166B364 ; 229: __arm void longjmp(jmp_buf, int);
;
08A8: 0xA0C3421B ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
;
;8AC:              ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:              ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:              ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA8692270   ; 22F:  TDateTimeSettings *RamDateTimeSettings
08C0: 0xA0C36B4B   ; 230:  int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8692218   ; 231:  TAppointment *RamAppointment
;8C8:              ; 232:  void GBS_DestroyMessage(GBS_MSG *)
;8CC:              ; 233:  void GetAllEmail()

08E0: 0xA0C341C5 ; 238: __thumb void SendAutoUSSDack(void);

08E4: 0xA122D640 ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg); //cepid=msg=0
08E8: 0xA122D78C ; 23A: __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA00204BC ; 23B: __arm void DisableIconBar(int disable); //disable=1 - iconbar don`t autoredraw

08F0: 0xA0C79A34 ; 23C: __arm int SetCurrentGPRSProfile(int profile);

08F4: 0xA155FC81 ; 23D: __thumb void MD5_Init(MD5_CTX *c);
08F8: 0xA155F8F1 ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA155FB89 ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA1560611 ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA0C36E63 ; 241: __thumb void SetDateTime(TDate *, TTime *);

0910: 0xA1555F61 ; 244: __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);
0914: 0xA1556011 ; 245: __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5);
0918: 0xA09818F8 ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA12aa93c ; 247: NetOff()
092C: 0xA1148BCE ; 24B: __arm void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc);
0934: 0xA09619bc ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA0995900 ; 24E: void *GetPlayObjById(int handle)
093C: 0xA0974E2C ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)
0940: 0xA0974CB8 ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
0950: 0xA0983454 ; 254: __arm int StartNativeExplorer(NativeExplorerData* data);
0954: 0xA11497b8 ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
0960: 0xA1159A97 ; 258: __thumb int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0974040 ; 259: __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber);
0968: 0xA09749AC ; 25A: __arm Obs_DestroyObject(HObj hObj);
096C: 0xA0978FC4 ; 25B: __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);
0970: 0xA0972414 ; 25C: __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h);
0974: 0xA097256C ; 25D: __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA0977760 ; 25E: __arm int Obs_Start(HObj hObj)
097C: 0xA0998070 ; 25F: __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img)
0980: 0xA0972EB8 ; 260: __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0972A24 ; 261: __arm int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA09775F0 ; 262: __arm int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA09728E0 ; 263: __arm int Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA097A088 ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler);
0994: 0xA0977AA4 ; 265: __arm int Obs_Pause (HObj hObj);
0998: 0xA0977D50 ; 266: __arm int Obs_Resume (HObj hObj);
099C: 0xA0977BCC ; 267: __arm int Obs_Stop (HObj hObj);
;09A0: ; 268: int Obs_Prepare (HObj hObj)
;09A4: ; 269:
09A8: 0xA0974DD0 ; 26A: __arm int Obs_SetPosition (HObj hObj,int ms);
;09AC: 0x ; 26B:
;09B0: 0x ; 26C: 
09B4: 0xA0997F34 ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol);
;0A04: 0x ; 281: char *RamIsRunJava()
;0A08: 0x ; 282: char *RamIsRunCamera()
0A0C: 0xA095A6C4   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA1347b3d   ; 284: int IsGPRS()
;0A14: 0x ; 285: char *RamIsEDGE()
;0A18: 0x ; 286: int GetSMSState()
0A1C: 0xA08ceed9   ; 287: int BT_GetLocVisibility()
0A24: 0xA136c915   ; 289: int isDecryption()
0A28: 0xA868c4e0 ; 828A: __thumb char *RamIsFileCache();
0A2C: 0xA87e44f0 ; 828B: __thumb char *RamTotalHeapSize();
;0A30: 0xA8F09B58 ; 828C: __thumb char *RamTemporaryHeapSize();
0A34: 0xA86DC6E8   ; 828D: char *RamBTNameDevice()
;0A38: 0xA8DA181C ; 828E: __thumb char *RamActiveGPRSProfileName();
;0A3C: 0x  ; 828F: __thumb char *RamIsNumberTyping();
;0A40: 0xA8EF6DF0 ; 8290: __thumb char *RamCallState();
;0A44: 0xA05C5ACC ; 291: int RefreshAlarmClock();
0A58: 0xA08C97B7   ; 296: void getProfileNameByN(WSHDR *ws, int n, int _0)
0A70: 0xA868A8E5   ; 829C: char *RamInputLanguage()

;A80:            ; 2A0:
;A84:            ; 2A1: 
;A88:            ; 2A2:
0A8C: 0xA1147752 ; 2A3: __thumb void UpdateMenuCursorItem(void *gui, int n);
0A90: 0xA1144DB7 ; 2A4: __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr);
0A94: 0xA1181935 ; 2A5: __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr);
0A98: 0xA1695F95 ; 2A6: __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr);
0A9C: 0xA1148349 ; 2A7: __thumb void SetMenuToGUI(void *gui, const void *menu_desc);
0AA0: 0xA1145987 ; 2A8: __thumb int GetMenuItemCount(void *gui);
0AA4: 0xA1143CCF ; 2A9: __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg);
0AA8: 0xA1143C41 ; 2AA: __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg);
0AAC: 0xA115DADD ; 2AB: __thumb void *GetPopupUserPointer(void *gui);
;AB0:            ; 2AC: __thumb int DeleteSMS(int index, int _1);
;AB4:            ; 2AD: __thumb int SetSmsStatus(int index, int type);
0AB8: 0xA1148DA7 ; 2AE: __unknown void *GetHeaderPointer(void *gui);
0ABC: 0xA115F74D ; 2AF: __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr);

0AC0: 0xA1149683 ; 2B0: __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n);
;AC4:            ; 82B1: __arm SMS_DATA_ROOT *SmsDataRoot(); 
;AC8:            ; 2B2: __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id);
;ACC:            ; 2B3: __thumb NativeAbData *AllocNativeAbData(void);
;AD0:            ; 2B4: __thumb int FreeNativeAbData(NativeAbData *ab_data);
;AD4:            ; 2B5: __thumb int GetNativeAbDataType(NativeAbData *nab, int unk0);
;AD8:            ; 2B6: __thumb WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0);
;ADC:            ; 2B7: __thumb int GetNativeAbDataStatus(NativeAbData *nab, int _0);
;AE0:            ; 2B8: __thumb int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num);
;AE4:            ; 2B9: __thumb unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data);
0AE8: 0xA115FA07 ; 2BA: __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr);
;AEC:            ; 2BB: __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr);
0AF0: 0xA115BABB ; 2BC: __arm void SetGUIDefinition(void *gui, const void *definition);
;AF4:            ; 2BD: __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui);
;AF8:            ; 2BE: __arm int SetCursorTab(void *tab_gui, int n);
;AFC:            ; 2BF: __arm int UpdateTab1stItem(void *tab_gui, int unk_0);

;0B00: 0xA0A257A5 ; 2C0: __arm int GetCursorTab(void *tab_gui);
;0B04: 0xA0A25221 ; 2C1: __arm void *GetGuiByTab(void *tab_gui, int n);
0B08: 0xA0b9006d ; 2C2: __arm int GetSubprovider(WSHDR* ws);
;0B0C: 0xA08C9F0D ; 2C3: __arm int GetRoamingState();
;0B10: 0xA05AD539 ; 2C4: __arm int GetPrfileVolumeSetting(int profile, int type);
0B14: 0xa8691a28 ; 82C5: __swi __arm RAM_EMS_ADMIN *RAM_EMS_Admin();
0B18: 0xA082b57b ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date);
0B1C: 0xA082b5cd ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time);
0B20: 0xA082b9bf ; 2C8: int GetSecondsFromTime(*TTime time);
0B24: 0xA082b4b5 ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date);
0B28: 0xA082b5ef ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time);
0B2C: 0xA082b9d1 ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds);
0B30: 0xA0825b4b ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day);
0B34: 0xA0825c8f ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec);
0B38: 0xA082b961 ; 2CE: int CmpDates(TDate *date1, TDate *date2);
0B3C: 0xA0825671 ; 2CF: int CmpTimes(TTime *time1, TTime *time2);

0B40: 0xA08256C1 ; 2D0: int GetDaysFromMonth(TDate *date);
0B44: 0xA08256A1 ; 2D1: int IsLeapYear(TDate *date);
0B48: 0xA0B6DF5B ;  2D2: __thumb StartNativeBrowserCore();
;B4C:            ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab);
;B50:            ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n);
0B54: 0xA0C523E5 ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen);
0B58: 0xA115E6FB ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr);
0B5C: 0xA115ECAD ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *);
0B60: 0xA115EC37 ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr);
0B64: 0xA115ECD5 ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer);
0B68: 0xA115ECD9 ; 2DA: void *TViewGetUserPointer(void *gui);
0B6C: 0xA09BFC40 ; 2DB: void MediaSendCSM_Open(WSHDR *file, WSHDR *path);
;B70:            ; 2DC: __thumb void SaveMaxIllumination(int level);
;B74:            ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec);
0B78: 0xA0C34873 ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter);
0B7C: 0xA0C3488F ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter);

;B80: 0xA0A26A95 ; 2E0: __thumb IMGHDR *GetIMGHDRFromThemeCache(int index);
0B84: 0xA093C1AC ; 2E1: __arm int GetExtUidByFileName_ws(WSHDR *fn);
0B88: 0xA0C306F7 ; 2E2: __thumb int wstrcmp(WSHDR *ws1, WSHDR *ws2);
0B8C: 0xA094E3B0 ; 2E3: __arm int fexists(WSHDR *FileName);
;B90:            ; 2E4: __thumb int SettingsAE_Update_ws(WSHDR *, int set, char * entry, char *keyword);
;B94:            ; 2E5: __thumb int SettingsAE_Read_ws(WSHDR *, int set, char * entry, char *keyword);
;B98:            ; 2E6: __thumb int SettingsAE_SetFlag(int val, int set, char * entry, char *keyword);
;B9C:            ; 2E7: __thumb int SettingsAE_GetFlag(int *res, int set, char * entry, char *keyword);
;BA0:            ; 2E8: __thumb int SettingsAE_Update(int val, int set, char * entry, char *keyword);
;BA4:            ; 2E9: __thumb int SettingsAE_Read(int *res, int set, char * entry, char *keyword);
;BA8:            ; 2EA: __thumb void *SettingsAE_GetEntryList(int set);
;BAC:            ; 2EB: __thumb int SettingsAE_RemoveEntry(int set, char *entry, int flag); 
0BB0: 0xA12600B8 ; 2EC: __arm int i2c_transfer(I2C_MSG *msg);
0BB4: 0xA1260104 ; 2ED: __arm int i2c_receive(I2C_MSG *msg);

0C00: 0xA082AA60   ; 300:  __arm NU_Create_Task
0C04: 0xA082AB7C   ; 301:  __arm NU_Delete_Task
0C08: 0xA082ABD8   ; 302:  __arm NU_Reset_Task
0C0C: 0xA082ABF8   ; 303:  __arm NU_Terminate_Task
0C10: 0xA082ACC0   ; 304:  __arm NU_Resume_Task
0C14: 0xA082AD08   ; 305:  __arm NU_Suspend_Task
0C18: 0xA082AD44   ; 306:  __arm NU_Relinquish
0C1C: 0xA082AD68   ; 307:  __arm NU_Sleep
0C20: 0xA0831050   ; 308:  __arm NU_Change_Priority
0C24: 0xA0831068   ; 309:  __arm NU_Change_Preemption
0C28: 0xA0831084   ; 30A:  __arm NU_Change_Time_Slice
0C2C: 0xA08373F4   ; 30B:  __arm NU_Check_Stack
0C30: 0xA0830CCC   ; 30C:  __arm NU_Current_Task_Pointer
0C34: 0xA082AE28   ; 30D:  __arm NU_Established_Tasks
0C38: 0xA082B0FC   ; 30E:  __arm NU_Task_Information
0C3C: 0xA082AE50   ; 30F:  __arm NU_Task_Pointers

0C40: 0xA082A678   ; 310:  __arm NU_Create_Mailbox
0C44: 0xA082A6A4   ; 311:  __arm NU_Delete_Mailbox
;C48:              ; 312:  __arm NU_Reset_Mailbox
0C4C: 0xA082A6C4   ; 313:  __arm NU_Send_To_Mailbox
;C50:              ; 314:  __arm NU_Broadcast_To_Mailbox
0C54: 0xA082A728   ; 315:  __arm NU_Receive_From_Mailbox
;C58:              ; 316:  __arm NU_Established_Mailboxes
;C5C:              ; 317:  __arm NU_Mailbox_Information
;C60:              ; 318:  __arm NU_Mailbox_Pointers
0C64: 0xA0832F5C   ; 319:  __arm NU_Create_Queue
0C68: 0xA0832FFC   ; 31A:  __arm NU_Delete_Queue
;C6C:              ; 31B:  __arm NU_Reset_Queue
;C70:              ; 31C:  __arm NU_Send_To_Front_Of_Queue
0C74: 0xA083301C   ; 31D:  __arm NU_Send_To_Queue
;C78:              ; 31E:  __arm NU_Broadcast_To_Queue
0C7C: 0xA08330C0   ; 31F:  __arm NU_Receive_From_Queue

0C80: 0xA0833170   ; 320:  __arm NU_Established_Queues
0C84: 0xA08331F4   ; 321:  __arm NU_Queue_Information
0C88: 0xA0833184   ; 322:  __arm NU_Queue_Pointers
;C8C:              ; 323:  __arm NU_Create_Pipe
;C90:              ; 324:  __arm NU_Delete_Pipe
;C94:              ; 325:  __arm NU_Reset_Pipe
;C98:              ; 326:  __arm NU_Send_To_Front_Of_Pipe
;C9C:              ; 327:  __arm NU_Send_To_Pipe
;CA0:              ; 328:  __arm NU_Broadcast_To_Pipe
;CA4:              ; 329:  __arm NU_Receive_From_Pipe
;CA8:              ; 32A:  __arm NU_Established_Pipes
;CAC:              ; 32B:  __arm NU_Pipe_Information
;CB0:              ; 32C:  __arm NU_Pipe_Pointers
0CB4: 0xA08300AC   ; 32D:  __arm NU_Create_Semaphore
0CB8: 0xA08300E4   ; 32E:  __arm NU_Delete_Semaphore
;CBC:              ; 32F:  __arm NU_Reset_Semaphore

0CC0: 0xA0830104   ; 330:  __arm NU_Obtain_Semaphore
0CC4: 0xA0830154   ; 331:  __arm NU_Release_Semaphore
;CC8:              ; 332:  __arm NU_Established_Semaphores
;CCC:              ; 333:  __arm NU_Semaphore_Information
;CD0:              ; 334:  __arm NU_Semaphore_Pointers
0CD4: 0xA082F6EC   ; 335:  __arm NU_Create_Event_Group
0CD8: 0xA082F708   ; 336:  __arm NU_Delete_Event_Group
0CDC: 0xA082F728   ; 337:  __arm NU_Set_Events
0CE0: 0xA082F75C   ; 338:  __arm NU_Retrieve_Events
;CE4:              ; 339:  __arm NU_Established_Event_Groups
;CE8:              ; 33A:  __arm NU_Event_Group_Information
;CEC:              ; 33B:  __arm NU_Event_Group_Pointers
0CF0: 0xA083109C   ; 33C:  __arm NU_Control_Signals
0CF4: 0xA08310BC   ; 33D:  __arm NU_Receive_Signals
0CF8: 0xA08310DC   ; 33E:  __arm NU_Register_Signal_Handler
0CFC: 0xA0831108   ; 33F:  __arm NU_Send_Signals

0D00: 0xA082A790   ; 340:  __arm NU_Create_Partition_Pool
0D04: 0xA082A814   ; 341:  __arm NU_Delete_Partition_Pool
0D08: 0xA082A834   ; 342:  __arm NU_Allocate_Partition
0D0C: 0xA082A898   ; 343:  __arm NU_Deallocate_Partition
0D10: 0xA082A8D0   ; 344:  __arm NU_Established_Partition_Pools
0D14: 0xA082A954   ; 345:  __arm NU_Partition_Pool_Information
0D18: 0xA082A8E4   ; 346:  __arm NU_Partition_Pool_Pointers
0D1C: 0xA082A384   ; 347:  __arm NU_Create_Memory_Pool
0D20: 0xA082A414   ; 348:  __arm NU_Delete_Memory_Pool
0D24: 0xA082A434   ; 349:  __arm NU_Allocate_Memory
0D28: 0xA082A4C0   ; 34A:  __arm NU_Deallocate_Memory
0D2C: 0xA082A4F8   ; 34B:  __arm NU_Established_Memory_Pools
0D30: 0xA082A57C   ; 34C:  __arm NU_Memory_Pool_Information
0D34: 0xA082A50C   ; 34D:  __arm NU_Memory_Pool_Pointers
0D38: 0xA0837230   ; 34E:  __arm NU_Control_Interrupts
0D3C: 0xA083725C   ; 34F:  __arm NU_Local_Control_Interrupts

0D40: 0xA0837278   ; 350:  __arm NU_Restore_Interrupts
;D44:              ; 351:  __arm NU_Setup_Vector
0D48: 0xA0830F5C   ; 352:  __arm NU_Register_LISR
0D4C: 0xA082ADC4   ; 353:  __arm NU_Activate_HISR
0D50: 0xA082AB0C   ; 354:  __arm NU_Create_HISR
0D54: 0xA082ABB8   ; 355:  __arm NU_Delete_HISR
0D58: 0xA0830CF4   ; 356:  __arm NU_Current_HISR_Pointer
0D5C: 0xA082AE3C   ; 357:  __arm NU_Established_HISRs
0D60: 0xA082B01C   ; 358:  __arm NU_HISR_Information
0D64: 0xA082AEC0   ; 359:  __arm NU_HISR_Pointers
0D68: 0xA083764C   ; 35A:  __arm NU_Protect
0D6C: 0xA08376D8   ; 35B:  __arm NU_Unprotect
0D70: 0xA082B188   ; 35C:  __arm NU_Create_Timer
0D74: 0xA082B1FC   ; 35D:  __arm NU_Delete_Timer
0D78: 0xA082B21C   ; 35E:  __arm NU_Reset_Timer
0D7C: 0xA082B280   ; 35F:  __arm NU_Control_Timer

0D80: 0xA0831130   ; 360:  __arm NU_Established_Timers
0D84: 0xA08311B4   ; 361:  __arm NU_Timer_Information
0D88: 0xA0831144   ; 362:  __arm NU_Timer_Pointers
0D8C: 0xA0837C5C   ; 363:  __arm NU_Set_Clock
0D90: 0xA0837C68   ; 364:  __arm NU_Retrieve_Clock
0D94: 0xA0835540   ; 365:  __arm NU_Release_Information
0D98: 0xA0834BD0   ; 366:  __arm NU_License_Information
;D9C:              ; 367:  __arm NU_Disable_History_Saving
;DA0:              ; 368:  __arm NU_Enable_History_Saving
;DA4:              ; 369:  __arm NU_Make_History_Entry
;DA8:              ; 36A:  __arm NU_Retrieve_History_Entry
;DAC:              ; 36B:  __arm NU_Create_Driver
;DB0:              ; 36C:  __arm NU_Delete_Driver
;DB4:              ; 36D:  __arm NU_Request_Driver
;DB8:              ; 36E:  __arm NU_Resume_Driver
;DBC:              ; 36F:  __arm NU_Suspend_Driver

;DC0:              ; 370:  __arm NU_Established_Drivers
;DC4:              ; 371:  __arm NU_Driver_Pointers
;DC8:              ; 372:  __arm NU_IS_SUPERVISOR_MODE
0DCC: 0xA08370D8   ; 373:  __arm NU_SUPERVISOR_MODE
0DD0: 0xA0837178   ; 374:  __arm NU_USER_MODE
0DD4: 0xA86CF6EC   ; 8375:  __arm NU_SUPERV_USER_VARIABLES

0E00: 0xA11811eb ; 380: __thumb WSHDR *GetClipBoard();
0E04: 0xA1181195 ; 381: __thumb int CopyWsToClipboard(WSHDR *src);
0E08: 0xA1181181 ; 382: __thumb void ClearClipboard(void);
0E0C: 0xA1170f59 ; 383: __thumb int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *);
0E10: 0xA1172bbf ; 384: __thumb int LCDRedrawLAYER(LCDLAYER *);
0E14: 0xA0824144 ; 385: __arm GBSPROC *GetGBSProcAddress(short cepid);
0E18: 0xA117574d ; 386: __thumb void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2); 
0E1C: 0xA114e6ad ; 387: __thumb LCDLAYER *GetLCDLAYERByCurCepID();
0E20: 0xA11401cb ; 388: __thumb void SetDepthBuffer(char depth); 
0E24: 0xA1140181 ; 389: __thumb void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth);
0E28: 0xa879f7c0 ; 838A: PCM_WAV_STRUCT *RamPCMWAVStruct()
0E2C: 0xA868ad28 ; 38B: char *RamLastStoreString();
;E30:            ; 38C: int format(unsigned short drive, unsigned int *error);
;E34:            ; 38D: int stat(int fhandler, FStat *fstat, unsigned int *error);
0E38: 0xA0828148 ; 38E: __arm void CreateICL(PGROUP *pg);
;E3C:            ; 38F: PGroupProc *CreatePGroupRes(int mask, int unk_zero, TaskConfig *conf, int size);

;E40:            ; 390: PGroupProc *PGroupCurrentTaskPointer();
;E44:            ; 391: void *MemMBPAlloc(void *pool, int size);
;E48:            ; 392: void MemMBPFree(void *pool, void *ptr);
;E4C:            ; 8393: void *MopiResourcePool();

;E50:            ; 394
;E54:            ; 395
;E58:            ; 396
;E5C:            ; 397
;E60:            ; 398
;E64:            ; 399
;E68:            ; 39A
;E6C:            ; 39B
;E70:            ; 39C
;E74:            ; 39D
;E78:            ; 39E
;E7C:            ; 39F

;E80:            ; 3A0
;E84:            ; 3A1
;E88:            ; 3A2
;E8C: 0xA09544FB ; 3A3: __thumb void SetMenuItemIconIMGHDR(void *gui, void *item, IMGHDR *img);
;E90:            ; 3A4
0E94: 0xA1150CD5 ; 3A5: __thumb void DrawIMGHDR(int x, int y, IMGHDR *img);
;E98:            ; 3A6
0E9C: 0xA11589B3 ; 3A7: __thumb int GUI_NewTimer(void *gui);
0EA0: 0xA1158A9F ; 3A8: __thumb int GUI_DeleteTimer(void *gui, int id);
0EA4: 0xA1158A25 ; 3A9: __thumb void GUI_StartTimerProc(void *gui, int id, long timeout, GUI_TimerProc callback);
;EA8:            ; 3AA
;EAC:            ; 3AB
;EB0:            ; 3AC
;EB4:            ; 3AD
;EB8:            ; 3AE
;EBC:            ; 3AF

;EC8:            ; 3B2: __arm WSHDR *GetLastAudioTrackDir();
;ECC:            ; 3B3: __thumb IMGHDR *GetIMGHDRFromCanvasCache(unsigned int CanvasID);
0ED0: 0xA0C37B9B ; 3B4: __thumb GetDate_ws(WSHDR *ws, const TDate *date, unsigned int unk);
0ED4: 0xA0C37A5B ; 3B5: __thumb GetTime_ws(WSHDR *ws, const TTime *time, unsigned int unk);
0ED8: 0xA0972764 ; 3B6: __arm int Obs_SetTransparent(HObj obs, unsigned int unk_3_4_5);
0F00: 0xA11442D5 ; 3C0: __thumb int ShowWaitBox(int flags, int message);
0F04: 0xA114430D ; 3C1: __thumb int ShowPleaseWaitBox(int flags);
;0F08:           ; 3C2: __thumb int ShowPBarBox(int flags, int message, PBAR_DESC *pbar_desc, int initial_value, WSHDR *initial_ws);
;F0C:            ; 3C3: __thumb int SetPBarValue(int gui_id, int value);
;F10:            ; 3C4: __thumb int SetPBarText(int gui_id, WSHDR *ws);
;F14:            ; 83C5: void *GetPBarProc3();
0F18: 0xA115FB61 ; 3C6: __thumb void SetHeaderScrollText(void *header, const WSHDR *title, const void *malloc_fn, const void *mfree_fn);
0F1C: 0xA115F7D9 ; 3C7: __thumb void SetHeaderExtraText(void *header, const WSHDR *ws, const void *malloc_fn, const void *mfree_fn);
0F20: 0xA11431CF ; 3C8: __arm int GetMimeType(int uid, WSHDR *mime_type, int unk_0);
0F24: a0c3a263   ; 3C9: __thumb int wstrncmp(const WSHDR *ws1, const WSHDR *ws2, size_t n);
0F28: a0c3a2af   ; 3CA: __thumb int wstricmp(const WSHDR *ws1, const WSHDR *ws2);
0F2C: a04fa5cd   ; 3CB: __thumb int wstrnicmp(const WSHDR *ws1, const WSHDR *ws2, size_t n);
;F30:            ; 3CC: __arm int PersMenuCSM_Open(const WSHDR *file_name, const WSHDR *dir, int flag, int open_mode);
0F34: 0xA0C3A4A3 ; 3CD: __thumb int wstrtoupper(WSHDR *ws);
0F38: 0xA0C3A565 ; 3CE: __thumb int wstrtolower(WSHDR *ws);
0F3C: 0xA0C3A641 ; 3CF: __thumb int wstrcapitalize(WSHDR *ws);

0F40: 0xA16a0341 ; 3D0: __thumb int RestartLockTimers();
;F44:            ; 3D1: __arm void MediaProc_LaunchLastPlayback();
0F48: 0xA16A339B ; 3D2: __thumb int GetScreenSaverType();
0F4C: 0xA0C34809 ; 3D3: __thumb int IllumFilterSet(int flags, int unk);
0F50: 0xA1150D6B ; 3D4: __thumb void DrawCroppedIMGHDR(int x, int y, int offset_x, int offset_y, int w, int h, int flags, const IMGHDR *img);
;F54:            ; 3D5: __arm int BuildPath(WSHDR *ws, const WSHDR *file_name, const WSHDR *dir);
0F58: 0xA0053C00 ; 83D6: RECT *GetHeaderRECT();
0F5C: 0xA0C27054 ; 83D7: RECT *GetOptionsHeaderRECT();
0F60: 0xA0A25E74 ; 83D8: RECT *GetMainAreaRECT();
0F64: 0xA11599B3 ; 3D9: __thumb int GetPITSize();
0F68: 0xA0c3114f ; 3DA: __thumb int wstrwstr(const WSHDR *ws, const WSHDR *search, uint32_t start_pos);
0F6C: 0xA0c30f8d ; 3DB: __thumb void wstrreplace(WSHDR *dest, const WSHDR *src, uint32_t pos);
0F70: 0xA1142b35 ; 3DC: __thumb int GetUnicodeSymbolByDynIcon(int dyn_icon);
;0F74:  ; 3DD: __thumb uint32_t ReadValueFromPDFile(uint32_t file_id, const char *key, char *value, uint32_t *size);
;0F78:  ; 3DE: __thumb uint32_t WriteValueToPDFile(uint32_t file_id, const char *key, const char *value, size_t size);
;0F7C:  ; 83DF: TZ *RamTimeZones();

0F80: 0xA0c36bab ; 3E0: int GetCurrentTimeZone();
0F84: 0xA0c376e3 ; 3E1: int GetTimeZoneByGMT(const char *gmt);
0F88: 0xA0c377ad ; 3E2: int IsSummerTime(int time_zone);
0F8C: 0xA0c3781d ; 3E3: void SetTimeZone(int time_zone);
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

