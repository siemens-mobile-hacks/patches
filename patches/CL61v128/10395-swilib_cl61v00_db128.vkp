;CL61v128
;Библиотека функций
;swilib
;(c) ElfLoader dev
;Version: 120324
;PatchID: 10395
;Details: https://patches.kibab.com/patches/details.php5?id=10395
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=cl61v128&f=swilib_cl61v00_db128.zip

/*

*/

;Library

;24.03.2012
;fixed functions: 58(11D),59(11E),BB,D4
;removed functions (included in elfloader): FF, 2EE
;API Reserved 0xA1330000

+1320000

#pragma enable  old_equal_ff

0000: 0xA0002070   ;   0: void loopback0()
0004: 0xA0002070   ;   1: void loopback1()
0008: 0xA0002070   ;   2: void loopback2()
000C: 0xA0002070   ;   3: void loopback3()
0010: 0xA0002070   ;   4: void loopback4()
0014: 0xA00EA0E1   ;   5: DecToHex
0018: 0xA00A7C60   ;   6: int GetAkku(int param1,int param2)
001C: 0xA1330061   ;   7: GetLP
0020: 0xA073911C   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA00D5718   ;   9: void SwitchPhoneOff()
0028: 0xA00DF3BC   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA00DF47C   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA00DF5AC   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA00DF310   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA00DF340   ;   E: fflush
003C: 0xA00DF370   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA00DEFB4   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA1330001   ;  11: OpenReadCloseFile
0048: 0xA00DEE14   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA00DF108   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ;  14: malloc(unsigned int size)
0054: 0xA0092F93   ;  15: mfree(void *)
0058: 0xA06EB285   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0D7B049   ;  17: char *strcat (char *,const char *)
0060: 0xA0A30E51   ;  18: char *strchr (const char *,int)
0064: 0xA06EBA38   ;  19: int strcmp (const char *,const char *)
0068: 0xA06EBAD5   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0A30E9D   ;  1B: unsigned int strlen(const char *)
0070: 0xA040C1C1   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA040C175   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA047E7FF   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA0786C8F   ;  1F: DrawMainScreen

0080: 0xA04AA5E3   ;  20: DrawScreenSaver
0084: 0xA047E927   ;  21: int GetImgHeight(int picture)
0088: 0xA047E937   ;  22: int GetImgWidth(int picture)
008C: 0xA0784F8D   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA0B6273F   ;  24: DrawImage2
0094: 0xA078437B   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0B62669   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA07845B9   ;  27: AddIconToIconbar
00A0: 0xA07358BC   ;  28: double fp_sint2fp(signed int i)
00A4: 0xA0A8F85C   ;  29: getEEFullMaxID
00A8: 0xA0404110   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA03EB78C   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA0A8F320   ;  2C: int EEFullGetBlockInfo(unsigned int block,int *size,char *version)
00B4: 0xA0DC985C   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA0A7E7BC   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA03EB160   ;  2F: double fp_div(double divisor, double divident)

00C0: 0xA0404EF0   ;  30: WriteEELiteBlock
00C4: 0xA03A188D   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA077CFAC   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA077C3FC   ;  33: PlaySound2
00D0: 0xA02669A4   ;  34: void PlaySoundLoop(int _0x2F, int param2, int duration)
;0D4:              ;  35: AlarmClockRing
00D8: 0xA073969C   ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA0ACDE98   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA0164F08   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA016497C   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA0161B74   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0A306C9   ;  3B: MemChr
00F0: 0xA00DF4BC   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA016401C   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA047C909   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA0AD0CB3   ;  40: GetVibraStatus
0104: 0xA0412CEF   ;  41: GetProvider
0108: 0xA04AA5CF   ;  42: int IsScreenSaver()
010C: 0xA00C0149   ;  43: int IsUnlocked(void)
0110: 0xA0413929   ;  44: TempLigntOn
0114: 0xA1330241   ;  45: GetWavLen
;118:              ;  46: int HasNewSMS()
011C: 0xA044D95B   ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
0124: 0xA07EFA61   ;  49: ReadFlashSMS
0128: 0xA0ACC8D0   ;  4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA088CBCC   ;  4B: StartMidlet
0130: 0xA08110D5   ;  4C: int GetMissedCallsCount()
0134: 0xA0092531   ;  4D: GBS_StartTimerProc(void *htimer, long ms, void *func)
0138: 0xA0AF3F0D   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA0AF3F7B   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0AF3F85   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0B7A4FF   ;  51: GetNetAccessMode
0148: 0xA8D87E50   ;  52: GetIlluminationDataTable
014C: 0xA000AE91   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA0144DC5   ;  54: int StrToInt(char *s, char **endp)
;154:              ;  55: SwitchVibraOnOff
0158: 0xA1330131   ;  56: PlayVibra
015C: 0xA00978A5   ;  57: int IsTimerProc(GBSTMR *)
0160: 0xA0A309B8   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0D7AF50   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA00BFA13   ;  5A: KeypressOn(int key)
016C: 0xA00BFB25   ;  5B: KeypressOff(int key)
0170: 0xA0BA0DED   ;  5C: unsigned char GetCPUClock()
0174: 0xA0BA0E27   ;  5D: unsigned char GetCPULoad()
0178: 0xA0BA0DF5   ;  5E: GetMMIMemUsed
017C: 0xA0092F9B   ;  5F: int GetFreeRamAvail()

0180: 0xA0B9F585   ;  60: ShowMainMenu
0184: 0xA0149C87   ;  61: ShowNativeMenu
0188: 0xA023ED65   ;  62: SetVibraStatus
018C: 0xA0787405   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
0190: 0xA012509B   ;  64: TriggerUpdate
0194: 0xA04D95C3   ;  65: EndCall
0198: 0xA0811713   ;  66: EndCallBusy
019C: 0xA04A8441   ;  67: IsDirectCallActive
01A0: 0xA04AA5A9   ;  68: GetScreenSaverRAM
01A4: 0xA00976FF   ;  69: LockSched(void)
01A8: 0xA009777B   ;  6A: UnlockSched(void)
01AC: 0xA00DEE8C   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA00DEF0C   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA00DEDD4   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA01397ED   ;  6E: int IsCalling()
01BC: 0xA01192E9   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA01192FD   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA082989B   ;  71: DrawRoundRect
01C8: 0xA0754A7D   ;  72: SetCurrentSecondOfCall
01CC: 0xA0139FEF   ;  73: int GetTypeOfCall(int type)
01D0: 0xA0B16869   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA0787921   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA07878D1   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
;1E0:              ;  78: GetTimeFormat
01E4: 0xA0759AD5   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0xA0AF309D   ;  7A:  UpdateDisplayByLayerPtr(LCD_Layer *)
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA03EFC33   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA01391AF   ;  7D: IsIncognitoCall
01F8: 0xA07C5225   ;  7E: int rand(void)
01FC: 0xA04BA374   ;  7F: IsPlayerOn

0200: 0xA087F4A1   ;  80: int ShowCallList(int list, int zero)
0204: 0xA06EBA04   ;  81: HexToDec
0208: 0xA04BA618   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA00DF180   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA00EA2ED   ;  85: StrCmpNoCase
0218: 0xA0A8F158   ;  86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA0A8F3C4   ;  87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA1330F00   ;  88: __arm char GetAccessoryType(void);
0224: 0xA075B19C   ;  89: GetLangMesIntoWS
0228: 0xA00DED64   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA00DF618   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0747284   ;  8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA07862F1   ;  8D: GetProfileName
0238: 0xA00DF01C   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA00DF0A0   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA00DF534   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA00DEF4C   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
;248: 0xA0189BC5   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA00D5724   ;  93: void RebootPhone()
0250: 0xA0747520   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA07473F8   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA07CBF0F   ;  96: GetWavLenByContent
025C: 0xA1330261   ;  97: CreatePath
0260: 0xA1330211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA0ACCB40   ;  99: __swi __arm int PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA04AAC2B   ;  9C: CloseScreensaver
0274: 0xA07EFBC3   ;  9D: GetMissedEventsPtr
0278: 0xA13302B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA047AFC5   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA040C0B3   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA00BB975   ;  A2: WS_GetCharByPosition
028C: 0xA0ABAF78   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07AD849   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA00BB749   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA01192D3   ;  A6: void ResetGPRSTraffic()
029C: 0xA051DFB7   ;  A7: char IsGPRSEnabled()
02A0: 0xA0B00599   ;  A8: char IsGPRSConnected()
02A4: 0xA00C092F   ;  A9: void KbdLock()
02A8: 0xA082CFDD   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002070   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA01C10F9   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA1330101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA0757E07   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA043F263   ;  B5: char GetWeek(TDate *)
02D8: 0xA0AD0373   ;  B6: char GetProfile()
02DC: 0xA0AD03D3   ;  B7: char SetProfile(char)
02E0: 0xA06EB824   ;  B8: int sdiv(int denom,int number)
02E4: 0xA00C0413   ;  B9: void KbdUnlock()
02E8: 0xA0092F5D   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0A30A60   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA06EB8FC   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA06EB9C0   ;  BD: int DivBy10(int divident)
02F8: 0xA1331C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: void SpellTime()

;300:              ;  C0: MiniGPS
0304: 0xA1331C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA1330091   ;  C3: ProcessFiles
0310: 0xA1331C01   ;  C4: GetBuffer
0314: 0xA07EFB6B   ;  C5: char IsIdleUiOnTop()
0318: 0xA0A80DE8   ;  C6: unsigned short GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D83738   ;  C8: unsigned short *RamCap()
0324: 0xA8D8376A   ;  C9: RamLS
0328: 0xA8EC4F96   ;  CA: RAMNET *RamNet()
032C: 0xA8E32C4C   ;  CB: RamRingtoneStatus
0330: 0xA8EB1174   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8D9806C   ;  CE: char *RamDateTime()
033C: 0xA8F2612C   ;  CF: char *RamAlarm()

0340: 0xA8E23A0C   ;  D0: RamAccPoint
0344: 0xA8EA656C   ;  D1: RamScreensaver
0348: 0xA00B603C   ;  D2: char *RamAutoTime()
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8E334DC   ;  D4: char *RamMissedMes()
0354: 0xA8DF1F08   ;  D5: RamIsLocked
0358: 0xA8E652A8   ;  D6: RamNetOnline
035C: 0xA8E663C0   ;  D7: RamScreenBrightness
0360: 0xA8DA690D   ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8E263D4   ;  DA: RamIsShutdown
036C: 0xA8F2453C   ;  DB: RamNotOnMainscreen
0370: 0xA8E9F5A0   ;  DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8E31E30   ;  DE: RamIsSimPresent
037C: 0xA8DF1EE0   ;  DF: char *RamPressedKey()

0380: 0xA8DA6E68   ;  E0: char *RamScreenBuffer()
0384: 0xA8ECFA00   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8D80010   ;  E4: void *FreeRAM()
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0784FC9   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA004B0C0   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E66A08   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
;3FC: 0xA1320000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0091EAB   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: GBS_AcceptMessage(void)
040C: 0xA009153B   ; 103: GBS_ClearMessage(void)
0410: 0xA00917B9   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092221   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E8C2E4   ; 106: CSMROOT *CSM_root()
041C: 0xA07AF037   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA07AF049   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA07AF113   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA044D339   ; 10F: void freeUSSD()

0440: 0xA043FB75   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA044D375   ; 111: char GetTypeUSSD()
0448: 0xA044D385   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0A30E6D   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0D7B069   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0D7B099   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA03A1839   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA03A188D   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0A30EE9   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA06EBB4D   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0D7B111   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0D7AC71   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA000AE91   ; 11C: int memcmp(const void *m1, const void *m2, int n)
0474: 0xA0A309B8   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0D7AF50   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA040C0B3   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA040C0D5   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA040C0F9   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA040C12D   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA00BB817   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA047AFC5   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA07AD849   ; 125: WSHDR *AllocWS(int len)
0498: 0xA040C325   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA040BF43   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA040BFBD   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA00BB749   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA04F18B9   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA07AF1EF   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA07AF1F7   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA07AF1FF   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA047C909   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA047C92D   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA047C93D   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA047C95B   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA03A17B8   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0AF3119   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA0AF312F   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0124F03   ; 135: int IsGuiOnTop(int id)
04D8: 0xA0125023   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA0125033   ; 137: int CreateGUI(void *gui)
04E0: 0xA0125041   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA012507B   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA012508B   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA012509B   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA01250A9   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA01250B7   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA01250C7   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA012515B   ; 13F: void DirectRedrawGUI(void)

0500: 0xA0125173   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA0125167   ; 141: void PendedRedrawGUI(void)
0508: 0xA0B60897   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: GBS_GetCurCepid(void)
0518: 0xA00976FF   ; 146: LockSched(void)
051C: 0xA009777B   ; 147: UnlockSched(void)
0520: 0xA0AF3EFD   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA07AF25D   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA01246A9   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0124613   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)
0530: 0xA07AF2AB   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA0124F11   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0193D85   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0193DD1   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA082989B   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA0B6263F   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0AF3A43   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091259   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: KillGBSproc(int cepid)
0554: 0xA0B46ECF   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0684FF1   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0D000ED   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0684EC5   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0CFF3B7   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA06854DD   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0319207   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0CFFCA7   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0CFFCE9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0570491   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA06853F3   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0CFF83F   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA0239F0C   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0D7B218   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0190BAB   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA018FFE9   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA01902F9   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0190D47   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA018FF09   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0192CCF   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0192C65   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0192C71   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA00DF1F8   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0ABAE84   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA0B375E5   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0AE403F   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA04643E1   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0AED985   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0B6C375   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0B6C86D   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0B6C671   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0B6CBA1   ; 176: int closesocket(int socket)
05DC: 0xA0B6CAA9   ; 177: int shutdown(int socket,int how)
05E0: 0xA0B6CC93   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0B6D101   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA019E7F5   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA019E801   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EBCE20   ; 17C: int *socklasterr(void)
05F4: 0xA01250D7   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA01250E7   ; 17E: void RestartIDLETMR(void)
05FC: 0xA01250F3   ; 17F: void DisableIDLETMR(void)

0600: 0xA0192B69   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0192AC1   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0192B09   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0192559   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0190333   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA012B07D   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA012C18D   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: __adr int ScreenW(void)
0624: 0x00000140   ; 189: __adr int ScreenH(void)
0628: 0x00000020   ; 18A: __adr int HeaderH(void)
062C: 0x00000020   ; 18B: __adr int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA08262E8   ; 18D: int available0(int sock)
0638: 0xA051DF51   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA07B4BBB   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA07B6325   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA01251E9   ; 196: void RefreshGUI(void)
065C: 0xA07B6385   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA07B649D   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA07B62F7   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA07B5C97   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA019254D   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA0A89DB8   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA0A89D3C   ; 19E: void StartCpuUsageCount(void)
067C: 0xA0993E01   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0993F37   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA0994D73   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int csd_or_gprs)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA07A95A5   ; 1A7: char *Get_CC_NC()
06A0: 0xA0CFF13D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA0D0018F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0CFF807   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA099F055   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA06853E1   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA099F055   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA068589D   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA099F039   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0685833   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA099F08D   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0684F25   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA018ECE7   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA0829767   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000002   ; 1B5: int isnewSGold(void)
06D8: 0xA0B6DB75   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA07BCCC1   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA09919DB   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA09916BF   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA09918BB   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0934DC9   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0934E57   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0935023   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA093296F   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA07B2B39   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA07B2AA1   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0B691A4   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0192AF1   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0192AFD   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0190EFD   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA018FF83   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA018FF77   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA018FF6B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA018FF55   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA018FF3D   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0190025   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA0746FC0   ; 1CF: __arm REGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA0746DC8   ; 1D0: __thumb int GetExtUid_ws(WSHDR * ext)
0744: 0xA0192C91   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0192C9D   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0192B39   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0192B45   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA00B64BC   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA099F055   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA06858FF   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0192B99   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0192BB1   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0803F39   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F19FAC   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA00BB913   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA00BB935   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0192C59   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0192D07   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA0126C83   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0759C41   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA040C609   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA040C6C1   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
0790: 0xA0AF334B   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0192DB9   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA07B5075   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
;79C:              ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA0828EDC   ; 1E8:  __arm int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA047EECB   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA8E9FA66   ; 1EB: char *RAM_IMSI()
07B0: 0xA047EECF   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA047F035   ; 1ED: int IsDynIconBusy(int picture)
07B8: 0xA1400000   ; 1EE: __arm int ProgressCalculate(int current, int total)
07BC: 0xA047EF33   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA015D68C   ; 1F0: Filecopy
07C4: 0xA015F0F0   ; 1F1: Filecopy_Op_Announce
07C8: 0xA00B62B8   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A31D0   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8E9FE2C   ; 1F4: char *RamServiceProviderName()
07D4: 0xA03A17F9   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA047F083   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA04BA224   ; 1F8: __swi __arm int GetPlayStatus(void)
07E4: 0xA1330401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D870E1   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9D4A9   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA07AF14D   ; 1FC: void CloseCSM(int id)
07F4: 0xA082974B   ; 1FD: SetProp2Square_v2
07F8: 0xA8D87F34   ; 1FE: char *RamLighterPower()
07FC: 0xA0B9F3BD   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0B62765   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA082C297   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0B6321F   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0B614E3   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0829725   ; 205: SetProp2Square_v1
0818: 0xA06EB779   ; 206: void srand(unsigned int seed)
081C: 0xA018F627   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA0759C5F   ; 208: __swi __arm int Get_WS_width(WSHDR *ws, int font)
0824: 0xA07AF08B   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0192BED   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0192C05   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0192C1D   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0192C35   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA01902B3   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0190199   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA0124EFD   ; 210: int GetCurGuiID(void)
0844: 0x00006171   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA040C155   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA040C1E5   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA047B05F   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05C700D   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA0127F93   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA01283D5   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA0192D25   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0192D31   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0192D6D   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA04714A1   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA0125133   ; 21E: void FocusGUI(int id)
087C: 0xA0125143   ; 21F: void UnfocusGUI(void)

0880: 0xA00C091F   ; 220: int IsSliderClosed(void)
0884: 0xA0495518   ; 221: void SetCpuClockLow
0888: 0xA0495500   ; 222: void SetCpuClockTempHi
088C: 0xA04BA1C4   ; 223: IsMediaPlayerInBackground
0890: 0xA04BB600   ; 224: CloseMediaPlayer
0894: 0xA0ACD1EC   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA0ACDC5C   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA0ACDCFC   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA0ACDD2C   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0D7B240   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA0AEE425   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA049BC2D   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA07E5E05   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub) OR pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA07E5FEF   ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub) OR pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA04B650C   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8DA6D2C   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0757D95   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8DA6CD4   ; 231: TAppointment *RamAppointment
08C8: 0xA0091D7B   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA0C50A3B   ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
08DC: 0xA8E90FD8   ; 237: char *RamIconBar
08E0: 0xA0AEE3CF   ; 238: void SendAutoUSSDack(void)
08E4: 0xA0A8F7BC   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA0A8F928   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA0128597   ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA098EBA1   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA098E811   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA098EAA9   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0314155   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA0757FB3   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA092C559   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA092C609   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA086AEB4   ; 246: __swi __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA0AFB1C5   ; 247: NetOff()
0920: 0xA8D8653A   ; 248: char *RamFormatTrack()
0924: 0xA8D867A2   ; 249: char *RamFreq()
0928: 0xA8D8695A   ; 24A: char *RamChannel()
092C: 0xA07B688B   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA014C76D   ; 24C: int GetPeripheryState(int device, int check_state)
0934: 0xA0ACDD5C   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA07E16E0   ; 24E: void *GetPlayObjById(int handle)
093C: 0xA0418EE8   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA0418C28   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
;944:              ; 251: char *RamDataSendFName()
;948:              ; 252: char *RamDataReceiveFName()
094C: 0xA8EB159A   ; 253: __swi __arm char *RamLastCallNum()
0950: 0xA04B650C   ; 254: __swi __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA0126C7F   ; 255: __thumb void MenuSetUserPointer(void *gui,void *user_pointer)
;958:              ; 256: char *RamNameOfRecievedSendFile()
;95C:              ; 257: char *RamIsSendReceiveBT()
0960: 0xA047E8C1   ; 258: int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0AFDE4C   ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA041C3B0   ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA0135800   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0489068   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA04891E4   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA041BF34   ; 25E: int Obs_Start(HObj hObj)
097C: 0xA048A458   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)

0980: 0xA048A018   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0489A28   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA041BCF8   ; 262: int Obs_GetInfo(HObj hObj, int unk_0or1)
098C: 0xA04897D4   ; 263: intObs_SetScaling(HObj hObj, int unk5)
0990: 0xA07C4268   ; 264: int Obs_TranslateMessageGBS(GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA041C0FC   ; 265: int Obs_Pause(HObj hObj)
0998: 0xA041C2B8   ; 266: int Obs_Resume (HObj hObj)
099C: 0xA041C1EC   ; 267: int Obs_Stop (HObj hObj)
09A0: 0xA041BDFC   ; 268: int Obs_Prepare (HObj hObj)
09A4: 0xA01AB0B0   ; 269: int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0418E24   ; 26A: int Obs_SetPosition (HObj hObj,int ms)
09AC: 0xA041C5BC   ; 26B: int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA07BFCB0   ; 26C: int Obs_Sound_SetVolume (HObj hObj, char vol, char delta)
09B4: 0xA07C168C   ; 26D: int Obs_Sound_GetVolume (HObj hObj, char *vol)
;9B8:              ; 26E: int Obs_SetPurpose (HObj hObj,char purpose)
0A04: 0xA8EB7D4C   ; 281: char *RamIsRunJava()
0A08: 0xA8EA65E8   ; 282: char *RamIsRunCamera()
;A0C:              ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA051DF29   ; 284: __swi __arm int IsGPRS()
0A14: 0xA051DF2F   ; 285: __swi __arm int IsEDGE()
0A18: 0xA01AFF71   ; 286: int GetSMSState()
0A1C: 0xA049C7CF   ; 287: __swi __arm int BT_GetLocVisibility()
0A20: 0xA014C8A1   ; 288: __swi __arm int GetCurrAudioPath()
0A24: 0xA0C0D969   ; 289: int isDecryption()
0A28: 0xA8E33434   ; 28A: __swi __arm char *RamIsFileCache()
0A2C: 0xA8ED4470   ; 28B: __swi __arm char *RamTotalHeapSize()
0A30: 0xA8ED44E0   ; 28C: __swi __arm char *RamTemporaryHeapSize()
0A34: 0xA8DA1208   ; 28D: __swi __arm char *RamBTNameDevice()
0A38: 0xA8DA03F0   ; 28E: __swi __arm char *RamActiveGPRSProfileName()
;A3C:              ; 28F: char *RamIsNumberTyping()

0A40: 0xA8EC1794   ; 290: __swi __arm char *RamCallState()
0A44: 0xA01CE7D8   ; 291: __swi __arm int RefreshAlarmClock()
0A48: 0xA8F26130   ; 292: __swi __arm char *RamIsAlarmAutorepeatOn()
0A4C: 0xA8F26138   ; 293: __swi __arm char *RamAlarmclockHour()
0A50: 0xA8F26139   ; 294: __swi __arm char *RamAlarmclockMinute()
0A58: 0xA0AD0433   ; 296: __swi __arm void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8F1E5A0   ; 297: __swi __arm char *RamIsSoundRecord()
0A60: 0xA8F1E5FC   ; 298: __swi __arm char *RamIsSoundRecordQuality()
0A64: 0xA8E33798   ; 299: __swi __arm char *RamExtendedCameraState()
0A68: 0xA0AD1B15   ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)
0A6C: 0xA00FA3ED   ; 29B: GetTypeOfBTHeadset
0A70: 0xDFDFDCD7   ; 29C: __swi __arm char *RamInputLanguage()
0A74: 0xA8F22FA4   ; 29D: __swi __arm char *RamDisplayLanguage()
0A78: 0xA8DA1058   ; 29E: char *RamIsBTConnected()
0A7C: 0xA8DA0FEC   ; 29F: char *RamIsBTHeadsetConnected()

0A80: 0xA044E254   ; 2A0: int GetAlarmclockState(int state)
;A84:              ; 2A1: EMPTY
;A88:              ; 2A2: EMPTY
0A8C: 0xA07B5119   ; 2A3: __swi __arm void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA07B1F2D   ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA0127BAD   ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA047F445   ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA07B5EDB   ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA07B2D3B   ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA0AF3D45   ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0AF3C87   ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0127A2D   ; 2AB: void *GetPopupUserPointer(void *gui)
0AB0: 0xA0C679BD   ; 2AC: __swi __arm int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA0C67D6D   ; 2AD: __thumb int SetSmsStatus(int index, int type)
0AB8: 0xA0125571   ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA04F97FD   ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA0126765   ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8EB5214   ; 2B1: __swi __arm SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA01B41D9   ; 2B2: __swi __arm int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA046A23D   ; 2B3: __swi __arm NativeAbData *AllocNativeAbData(void)
0AD0: 0xA046A2E5   ; 2B4: __swi __arm int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA046A46B   ; 2B5: __swi __arm int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA046A879   ; 2B6: __swi __arm WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA046A47F   ; 2B7: __swi __arm int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA046A9EF   ; 2B8: __swi __arm int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA0B46ECF   ; 2B9: __swi __arm unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA04F9A57   ; 2BA: __swi __arm void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA0831237   ; 2BB: __swi __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA04F7751   ; 2BC: __swi __arm void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA08316EB   ; 2BD: __swi __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA0831807   ; 2BE: __swi __arm int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA0831969   ; 2BF: __swi __arm int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0831825   ; 2C0: __swi __arm int GetCursorTab(void *tab_gui)
0B04: 0xA08312A1   ; 2C1: __swi __arm void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA0412AD1   ; 2C2: __swi __arm int GetSubprovider(WSHDR* ws)
0B0C: 0xA0412D05   ; 2C3: __swi __arm int GetRoamingState()
0B10: 0xA0ACFE99   ; 2C4: __swi __arm int GetProfileVolumeSetting(int profile, int type)
0B14: 0xA8E65960   ; 2C5: __swi __arm RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA077B817   ; 2C6: __swi __arm int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA077B869   ; 2C7: __swi __arm int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA00E9EDA   ; 2C8: __swi __arm int GetSecondsFromTime(TTime *time)
0B24: 0xA077B751   ; 2C9: __swi __arm int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA077B869   ; 2CA: __swi __arm int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA00E9EED   ; 2CB: __swi __arm void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA043F524   ; 2CC: __swi __arm void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA043FA19   ; 2CD: __swi __arm void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA043F104   ; 2CE: __swi __arm int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA00E9E7C   ; 2CF: __swi __arm int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA043F155   ; 2D0: __swi __arm int GetDaysFromMonth(TDate *date)
0B44: 0xA043F135   ; 2D1: __swi __arm int IsLeapYear(TDate *date)
;B48:              ; 2D2: __swi __thumb StartNativeBrowserCore()
0B4C: 0xA046AAE9   ; 2D3: __swi __arm int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA046A495   ; 2D4: __swi __arm void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA011A4E7   ; 2D5: __swi __arm void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA07B697B   ; 2D6: __swi __arm void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA07B6F79   ; 2D7: __swi __arm void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA07B6F03   ; 2D8: __swi __arm void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA07B6FA7   ; 2D9: __swi __arm void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA07B6FAD   ; 2DA: __swi __arm void *TViewGetUserPointer(void *gui)
0B6C: 0xA08DDDFC   ; 2DB: __swi __arm void SendMedia(WSHDR *file, WSHDR *path)
0B70: 0xA0413B0D   ; 2DC: __thumb void SaveMaxIllumination(int level)
0B74: 0xA0413B35   ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec)
0B78: 0xA0413CC1   ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA0413CF7   ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter)

0B80: 0xA04F81C1   ; 2E0: __swi arm__ IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA0746E9C   ; 2E1: __swi __arm int GetExtUidByFileName_ws(WSHDR * fn)
0B88: 0xA00BB843   ; 2E2: int wstrcmp(WSHDR*ws1,WSHDR*ws2)
0B8C: 0xA0AD8798   ; 2E3: __swi __arm int fexists(WSHDR* FileName)
0B90: 0xA0448529   ; 2E4: __swi __arm  int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword)
0B94: 0xA04484E7   ; 2E5: __swi __arm  int SettingsAE_Read_ws(WSHDR *,int set,char * entry,char *keyword)
0B98: 0xA0448481   ; 2E6: __swi __arm  int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword)
0B9C: 0xA044844B   ; 2E7: __swi __arm  int SettingsAE_GetFlag(int *res,int set,char * entry,char *keyword)
0BA0: 0xA04484C7   ; 2E8: __swi __arm  int SettingsAE_Update(int val,int set,char * entry,char *keyword)
0BA4: 0xA0448493   ; 2E9: __swi __arm  int SettingsAE_Read(int *res,int set,char * entry,char *keyword)
0BA8: 0xA07E61E5   ; 2EA: __swi __arm  void* SettingsAE_GetEntryList(int set)
0BAC: 0xA07E6301   ; 2EB: __swi __arm  int SettingsAE_RemoveEntry(int set,char *entry,int flag)
0BB0: 0xA00BB238   ; 2EC: __swi __arm int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA00BB28C   ; 2ED: __swi __arm int i2c_receive(I2C_MSG *msg)
;BB8: 0xA00967E3   ; 2EE: __swi __arm unsigned int GetMemUsedByCepID(short cepid)
;BBC:              ; 2EF: __swi __arm unsigned int GetFreePermMemory()

0C00: 0xA009C9D8   ; 300: __arm NU_Create_Task
0C04: 0xA009CAF4   ; 301: __arm NU_Delete_Task
0C08: 0xA009CB50   ; 302: __arm NU_Reset_Task
0C0C: 0xA009CB70   ; 303: __arm NU_Terminate_Task
0C10: 0xA009CC6C   ; 304: __arm NU_Resume_Task
0C14: 0xA009CCB4   ; 305: __arm NU_Suspend_Task
0C18: 0xA009CCF0   ; 306: __arm NU_Relinquish
0C1C: 0xA009CD14   ; 307: __arm NU_Sleep
0C20: 0xA009E05C   ; 308: __arm NU_Change_Priority
0C24: 0xA009E074   ; 309: __arm NU_Change_Preemption
0C28: 0xA009E090   ; 30A: __arm NU_Change_Time_Slice
0C2C: 0xA00A2ADC   ; 30B: __arm NU_Check_Stack
0C30: 0xA009C5E8   ; 30C: __arm NU_Current_Task_Pointer
0C34: 0xA00A0B18   ; 30D: __arm NU_Established_Tasks
0C38: 0xA00A0EB8   ; 30E: __arm NU_Task_Information
0C3C: 0xA00A0B40   ; 30F: __arm NU_Task_Pointers

0C40: 0xA009D648   ; 310: __arm NU_Create_Mailbox
0C44: 0xA009D674   ; 311: __arm NU_Delete_Mailbox
;C48:              ; 312: __arm NU_Reset_Mailbox
0C4C: 0xA009D694   ; 313: __arm NU_Send_To_Mailbox
;C50:              ; 314: __arm NU_Broadcast_To_Mailbox
0C54: 0xA009D6F8   ; 315: __arm NU_Receive_From_Mailbox
;C58:              ; 316: __arm NU_Established_Mailboxes
;C5C:              ; 317: __arm NU_Mailbox_Information
;C60:              ; 318: __arm NU_Mailbox_Pointers
0C64: 0xA00A068C   ; 319: __arm NU_Create_Queue
0C68: 0xA00A072C   ; 31A: __arm NU_Delete_Queue
;C6C:              ; 31B: __arm NU_Reset_Queue
;C70:              ; 31C: __arm NU_Send_To_Front_Of_Queue
0C74: 0xA00A074C   ; 31D: __arm NU_Send_To_Queue
;C78:              ; 31E: __arm NU_Broadcast_To_Queue
0C7C: 0xA00A07F0   ; 31F: __arm NU_Receive_From_Queue

0C80: 0xA00A08A0   ; 320: __arm NU_Established_Queues
0C84: 0xA00A0958   ; 321: __arm NU_Queue_Information
0C88: 0xA00A08B4   ; 322: __arm NU_Queue_Pointers
;C8C:              ; 323: __arm NU_Create_Pipe
;C90:              ; 324: __arm NU_Delete_Pipe
;C94:              ; 325: __arm NU_Reset_Pipe
;C98:              ; 326: __arm NU_Send_To_Front_Of_Pipe
;C9C:              ; 327: __arm NU_Send_To_Pipe
;CA0:              ; 328: __arm NU_Broadcast_To_Pipe
;CA4:              ; 329: __arm NU_Receive_From_Pipe
;CA8:              ; 32A: __arm NU_Established_Pipes
;CAC:              ; 32B: __arm NU_Pipe_Information
;CB0:              ; 32C: __arm NU_Pipe_Pointers
0CB4: 0xA009DF78   ; 32D: __arm NU_Create_Semaphore
0CB8: 0xA009DFB0   ; 32E: __arm NU_Delete_Semaphore
;CBC:              ; 32F: __arm NU_Reset_Semaphore

0CC0: 0xA009DFD0   ; 330: __arm NU_Obtain_Semaphore
0CC4: 0xA009E020   ; 331: __arm NU_Release_Semaphore
;CC8:              ; 332: __arm NU_Established_Semaphores
;CCC:              ; 333: __arm NU_Semaphore_Information
;CD0:              ; 334: __arm NU_Semaphore_Pointers
0CD4: 0xA009D4E4   ; 335: __arm NU_Create_Event_Group
0CD8: 0xA009D500   ; 336: __arm NU_Delete_Event_Group
0CDC: 0xA009D520   ; 337: __arm NU_Set_Events
0CE0: 0xA009D554   ; 338: __arm NU_Retrieve_Events
;CE4:              ; 339: __arm NU_Established_Event_Groups
;CE8:              ; 33A: __arm NU_Event_Group_Information
;CEC:              ; 33B: __arm NU_Event_Group_Pointers
0CF0: 0xA009E0A8   ; 33C: __arm NU_Control_Signals
0CF4: 0xA009E0C8   ; 33D: __arm NU_Receive_Signals
0CF8: 0xA009E0E8   ; 33E: __arm NU_Register_Signal_Handler
0CFC: 0xA009E114   ; 33F: __arm NU_Send_Signals

0D00: 0xA009D7E8   ; 340: __arm NU_Create_Partition_Pool
0D04: 0xA009D86C   ; 341: __arm NU_Delete_Partition_Pool
0D08: 0xA009D88C   ; 342: __arm NU_Allocate_Partition
0D0C: 0xA009D8F0   ; 343: __arm NU_Deallocate_Partition
0D10: 0xA009D928   ; 344: __arm NU_Established_Partition_Pools
0D14: 0xA009D9E0   ; 345: __arm NU_Partition_Pool_Information
0D18: 0xA009D93C   ; 346: __arm NU_Partition_Pool_Pointers
0D1C: 0xA009D114   ; 347: __arm NU_Create_Memory_Pool
0D20: 0xA009D1A4   ; 348: __arm NU_Delete_Memory_Pool
0D24: 0xA009D1C4   ; 349: __arm NU_Allocate_Memory
0D28: 0xA009D250   ; 34A: __arm NU_Deallocate_Memory
0D2C: 0xA009D288   ; 34B: __arm NU_Established_Memory_Pools
0D30: 0xA009D340   ; 34C: __arm NU_Memory_Pool_Information
0D34: 0xA009D29C   ; 34D: __arm NU_Memory_Pool_Pointers
0D38: 0xA00A28D4   ; 34E: __arm NU_Control_Interrupts
0D3C: 0xA00A2900   ; 34F: __arm NU_Local_Control_Interrupts

0D40: 0xA00A2918   ; 350: __arm NU_Restore_Interrupts
;D44:              ; 351: __arm NU_Setup_Vector
0D48: 0xA009C8E4   ; 352: __arm NU_Register_LISR
0D4C: 0xA009CD70   ; 353: __arm NU_Activate_HISR
0D50: 0xA009CA84   ; 354: __arm NU_Create_HISR
0D54: 0xA009CB30   ; 355: __arm NU_Delete_HISR
0D58: 0xA009C610   ; 356: __arm NU_Current_HISR_Pointer
0D5C: 0xA00A0B2C   ; 357: __arm NU_Established_HISRs
0D60: 0xA00A0DA4   ; 358: __arm NU_HISR_Information
0D64: 0xA00A0BE4   ; 359: __arm NU_HISR_Pointers
0D68: 0xA00A2CC4   ; 35A: __arm NU_Protect
0D6C: 0xA00A2D2C   ; 35B: __arm NU_Unprotect
0D70: 0xA009E82C   ; 35C: __arm NU_Create_Timer
0D74: 0xA009E8A0   ; 35D: __arm NU_Delete_Timer
0D78: 0xA009E8C0   ; 35E: __arm NU_Reset_Timer
0D7C: 0xA009E924   ; 35F: __arm NU_Control_Timer

0D80: 0xA009E564   ; 360: __arm NU_Established_Timers
0D84: 0xA009E61C   ; 361: __arm NU_Timer_Information
0D88: 0xA009E578   ; 362: __arm NU_Timer_Pointers
0D8C: 0xA00A31C4   ; 363: __arm NU_Set_Clock
0D90: 0xA00A31D0   ; 364: __arm NU_Retrieve_Clock
0D94: 0xA00A0AE0   ; 365: __arm NU_Release_Information
0D98: 0xA00A0AE0   ; 366: __arm NU_License_Information
;D9C:              ; 367: __arm NU_Disable_History_Saving
;DA0:              ; 368: __arm NU_Enable_History_Saving
;DA4:              ; 369: __arm NU_Make_History_Entry
;DA8:              ; 36A: __arm NU_Retrieve_History_Entry
;DAC:              ; 36B: __arm NU_Create_Driver
;DB0:              ; 36C: __arm NU_Delete_Driver
;DB4:              ; 36D: __arm NU_Request_Driver
;DB8:              ; 36E: __arm NU_Resume_Driver
;DBC:              ; 36F: __arm NU_Suspend_Driver

;DC0:              ; 370: __arm NU_Established_Drivers
;DC4:              ; 371: __arm NU_Driver_Pointers
;DC8:              ; 372: __arm NU_IS_SUPERVISOR_MODE
;DCC:              ; 373: __arm NU_SUPERVISOR_MODE
0DD0: 0xA009B83C   ; 374: __arm NU_USER_MODE
0DD4: 0xA8D95EA8   ; 375: __arm NU_SUPERV_USER_VARIABLES

0E00: 0xA047F439   ; 380: WSHDR *GetClipBoard()
0E04: 0xA047F3D1   ; 381: int CopyWsToClipboard(WSHDR *src)
0E08: 0xA047F3B9   ; 382: void ClearClipboard(void)
0E0C: 0xA0124703   ; 383: int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *)
0E10: 0xA0AF2C09   ; 384: __swi __arm int LCDRedrawLAYER(LCDLAYER *)
0E14: 0xA0095FDD   ; 385: GBSPROC *GetGBSProcAddress(unsigned int cepid)
0E18: 0xA04F2B7D   ; 386: void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2)
0E1C: 0xA0123E03   ; 387: LCDLAYER *GetLCDLAYERByCurCepID()
0E20: 0xA018F081   ; 388: void SetDepthBuffer(char depth)
0E24: 0xA018F02F   ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth)
;E28:              ; 38A: void *RamAudioHookProc()
0E2C: 0xA8D95220   ; 38B: char *RamLastStoreString()

#pragma disable old_equal_ff

+0


;------------------------- end -------------------------

