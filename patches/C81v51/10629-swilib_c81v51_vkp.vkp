;C81v51
;Библиотека Функций
;Function Library
;(c) avkiev
;Version: 240620
;PatchID: 10629
;Details: https://patches.kibab.com/patches/details.php5?id=10629
/*

*/

; C81v51
+00074000
#pragma enable old_equal_ff

0000: 0xA0002070   ;   0: void loopback0()
0004: 0xA0002070   ;   1: void loopback1()
0008: 0xA0002070   ;   2: void loopback2()
000C: 0xA0002070   ;   3: void loopback3()
0010: 0xA0002070   ;   4: void loopback4()
0014: 0xA026EF19   ;   5: DecToHex
0018: 0xA01ABF68   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B64CC   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0233BF0   ;   9: SwitchPhoneOff
0028: 0xA025252C   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA02525EC   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA025271C   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0252480   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA02524B0   ;   E: fflush
003C: 0xA02524E0   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0252124   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0251F84   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0252278   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FF8B4D   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FFA5B9   ;  17: char *strcat (char *,const char *)
0060: 0xA0FFA5D9   ;  18: char *strchr (const char *,int)
0064: 0xA0FFA5FC   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FFA699   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FFA719   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F6E79   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F6E2D   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA096BA5D   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA03036D7   ;  1F: DrawMainScreen

0080: 0xA030474F   ;  20: void DrawScreenSaver()
0084: 0xA096BB87   ;  21: int GetImgHeight(int picture)
0088: 0xA096BB97   ;  22: int GetImgWidth(int picture)
008C: 0xA029C939   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA09FFA57   ;  24: DrawImage2
0094: 0xA029BE9B   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA09FF981   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029C0C1   ;  27: AddIconToIconbar
;0A0:              ;  28: uint32_t GetEELiteMaxID()
00A4: 0xA01E4F6C   ;  29: getEEFullMaxID
00A8: 0xA01E5364   ;  2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ;  2B: int GetEELiteBlockSizeVersion(uint32_t block, int *size, char *version)
00B0: 0xA01E4A00   ;  2C: getEEFullBlockSizeVersion(int block, *buf1, *buf2)
;0B4:              ;  2D: int StartWriteEELiteBlock(uint32_t block, uint32_t size, uint32_t version, int *null)
;0B8:              ;  2E: int FinishWriteEELiteBlock(uint32_t block, int *null)
;0BC:              ;  2F: int DeleteEELiteBlock(uint32_t block, int *null)

00C0: 0xA01E6144   ;  30: WriteEELiteBlock
00C4: 0xA0FFA861   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA02821F0   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0278B48   ;  33: PlaySound2
00D0: 0xA0B5C1CC   ;  34: PlaySoundLoop
;0D4:              ;  35: void AlarmClockRing()
;0D8:              ;  36: void SLI_SetState(uint8_t state)
00DC: 0xA027BFC8   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA0556DE3   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA05569F5   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA0554987   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FF98B5   ;  3B: MemChr
00F0: 0xA025262C   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: void editOrNewTXTModule(const char *file)
00F8: 0xA0556481   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *
00FC: 0xA0966DC1   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028AC75   ;  40: GetVibraStatus
0104: 0xA090C233   ;  41: GetProvider
0108: 0xA030473B   ;  42: IsScreenSaver
010C: 0xA091419B   ;  43: int IsUnlocked(void)
0110: 0xA090E2B1   ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: int HasNewSMS(void)
011C: 0xA029B5F7   ;  47: int HasFlashSMS(void)
;120:              ;  48: void ReadNewSMS()
0124: 0xA02FF231   ;  49: ReadFlashSMS
0128: 0xA027A9C0   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0ABE9A4   ;  4B: StartMidlet
0130: 0xA09B1E25   ;  4C: GetMissedCallsCount
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA096D601   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA096D661   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA096D66B   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D558D7   ;  51: GetNetAccessMode
0148: 0xA8D87CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA0FF98D9   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C4AD1   ;  54: StrToInt
;154:              ;  55: void SwitchVibraOnOff()
0158: 0xA006F131   ;  56: PlayVibra
015C: 0xA0093388   ;  57: int IsTimerProc_2(GBSTMR *timer)
0160: 0xA0FF9D34   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FF9DD8   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0913A59   ;  5A: KeypressOn(int key)
016C: 0xA0913B6B   ;  5B: KeypressOff(int key)
0170: 0xA033C299   ;  5C: unsigned char GetCPUClock()
0174: 0xA033C2D3   ;  5D: unsigned char GetCPULoad()
0178: 0xA033C2A1   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA0337E9D   ;  60: ShowMainMenu
0184: 0xA02D11A3   ;  61: ShowNativeMenu
0188: 0xA028AC3D   ;  62: SetVibraStatus
018C: 0xA029D6B9   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
0190: 0xA096E0F7   ;  64: void GeneralFuncF1_2(int cmd)
0194: 0xA09B448D   ;  65: EndCall
0198: 0xA09B341B   ;  66: EndCallBusy
019C: 0xA02FC0A9   ;  67: int IsDirectCallActive(void)
01A0: 0xA0304715   ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0251FFC   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA025207C   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0251F44   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D28A1D   ;  6E: int IsCalling()
01BC: 0xA0947A48   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0947A78   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA09FF403   ;  71: DrawRoundRect
01C8: 0xA090BFDD   ;  72: SetCurrentSecondOfCall
01CC: 0xA0D2921F   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02CC365   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029DBD1   ;  75: int IsCanvasBufferSet(char canvas_id)
01D8: 0xA029DB81   ;  76: GetCanvasBufferPicPtr(char CanvasID)
01DC: 0xA0967277   ;  77: void DrwObj_SetColor_2(DRWOBJ *drwobj, const char *pen, const char *brush)
01E0: 0xA0911BD5   ;  78: GetTimeFormat
01E4: 0xA0913305   ;  79: void DrawObject2Layer(LCDLAYER *layer, DRWOBJ *drwobj)
01E8: 0xA096B605   ;  7A: UpdateDisplayByLayerPtr(LCD_Layer *)
;1EC:              ;  7B: int GetProfileFilter()
01F0: 0xA01B0D67   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D283DF   ;  7D: IsIncognitoCall
01F8: 0xA0AB4274   ;  7E: int rand(void)
01FC: 0xA054C629   ;  7F: IsPlayerOn

0200: 0xA05FE779   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FFA12C   ;  81: HexToDec
0208: 0xA054C70B   ;  82: GetCurrentTrackFilename
;20C:              ;  83: void *GetPathOfFoundFile()
0210: 0xA02522F0   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA026F241   ;  85: StrCmpNoCase
0218: 0xA01E4820   ;  86: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid,)
021C: 0xA01E4AB0   ;  87: _arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
0220: 0xA006EF00   ;  88: char GetAccessoryType(void) <api>
0224: 0xA0916470   ;  89: GetLangMesIntoWS
0228: 0xA0251ED4   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0252788   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04E6F7D   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0302D1B   ;  8D: GetProfileName
0238: 0xA025218C   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252210   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02526A4   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA02520BC   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09E7DF0   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0233BFC   ;  93: RebootPhone
0250: 0xA04E7119   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04E705B   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02AA747   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA027AC30   ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(uint8_t volume)
;26C:              ;  9B: void *RamAudioParamsAddr()
0270: 0xA0304C21   ;  9C: CloseScreensaver
0274: 0xA02FF387   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
027C: 0xA09FF2CF   ;  9F: void DrawRectangle_2(int x1, int y1, int x2, int y2, int flags, const char *pen, const char *brush)

0280: 0xA095E6E5   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F6D6B   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA01F6751   ;  A2: Unicode_GetCharByPosition
028C: 0xA0252C6C   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA095F1A9   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6525   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA0947A20   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D49755   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D29BDD   ;  A8: char IsGPRSConnected()
02A4: 0xA0914983   ;  A9: void KbdLock()
02A8: 0xA0A0FD8D   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002070   ;  AB: void loopback171()
;2B0:              ;  AC: void DrawText(const WSHDR *text, int x, int y, int font, int w, int h, int align, const char *pen, const char *brush, int inversion)
;2B4:              ;  AD: void StrAnsi2Uni(const char *in, uint16_t *out)
;2B8:              ;  AE: void StrUni2Ansi(const uint16_t *in, char *out)
02BC: 0xA033C09D   ;  AF: Hex2Int

;2C0:              ;  B0: void DrawPicWithCanvas(int x, int y, int picture)
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: void *GetBuildCanvas()
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA091074B   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026DEDB   ;  B5: char GetWeek(TDate *)
02D8: 0xA028A443   ;  B6: char GetProfile()
02DC: 0xA028A4A3   ;  B7: char SetProfile(char)
02E0: 0xA0FF9F4C   ;  B8: int sdiv(int denom,int number)
02E4: 0xA0914467   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FF9F34   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FFA024   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FFA0E8   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: uint32_t MiniGPS()
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: void GetAllPatchesByInject()
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
0314: 0xA02FF32F   ;  C5: char IsIdleUiOnTop()
0318: 0xA01A86B4   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: void CallLibFunByNumber(int func_id)
0320: 0xA8D836D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D836FA   ;  C9: RamLS
0328: 0xA8EADA2A   ;  CA: RAMNET *RamNet()
032C: 0xA8DF7974   ;  CB: RamRingtoneStatus
0330: 0xA8E684B4   ;  CC: RamMissedCalls
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8DA850C   ;  CE: RamDateTime
033C: 0xA8F124C0   ;  CF: RamAlarm

0340: 0xA8DE90E4   ;  D0: RamAccPoint
0344: 0xA8E52328   ;  D1: RamScreensaver
0348: 0xA8D98560   ;  D2: char *RamAutoTime()
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8E52114   ;  D4: RamMissedMes
0354: 0xA8DB3CAC   ;  D5: RamIsLocked
0358: 0xA8E2B950   ;  D6: RamNetOnline
035C: 0xA8E2CA2C   ;  D7: RamScreenBrightness
;360:              ;  D8: void *RamMenuAnywhere()
;364:              ;  D9: void *RamShutdownMode()
0368: 0xA8E2CAC8   ;  DA: RamIsShutdown
036C: 0xA8F10D0C   ;  DB: int *RamIsNotOnMainscreen()
0370: 0xA8E4BAB8   ;  DC: int *RamRandSeed()
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8DF6D00   ;  DE: RamIsSimPresent
037C: 0xA8DB3C84   ;  DF: char *RamPressedKey()

0380: 0xA8DA8698   ;  E0: char *RamScreenBuffer()
0384: 0xA8EBD7A8   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: char *RamKeyBuffer()
;38C:              ;  E3: char *RamProfileNum()
0390: 0xAC000000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: int PIT_Pic_Call()
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0301A9D   ;  F1: void *BuildCanvas()
;3C8:              ;  F2:
;3CC:              ;  F3:
;3D0:              ;  F4: int PIT_Pic_Lani()
03D4: 0xA8DA85EC   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E2D070   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: RAP_LCDLAYER_LIST *RamLcdRapLayersList()
;3E0:              ;  F8: void *Additional_PIT_address()
;3E4:              ;  F9: uint32_t Additional_PIT_start()
;3E8:              ;  FA: uint32_t Additional_PIT_end()
;3EC:              ;  FB: void *ShortcutsTableAddr()
;3F0:              ;  FC: void *PictureRelocationTableAddr()
;3F4:              ;  FD: uint32_t PictureRelocationBaseAddr()
;3F8:              ;  FE: uint32_t NextPictureMagicValue()
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E386CC   ; 106: CSMROOT *CSM_root()
041C: 0xA0965773   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA0965785   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA0965841   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(uint32_t id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: uint16_t *GetCI()
0438: 0xA0FF9DCE   ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029AFD5   ; 10F: void freeUSSD()

0440: 0xA026F2F1   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029B011   ; 111: char GetTypeUSSD()
0448: 0xA029B021   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FFA6E9   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FFA765   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FFA795   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FFA7E5   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FFA861   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FFA879   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FFA8A1   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FFA91D   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FF8AF9   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FF98D9   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FF9D34   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FF9DD8   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F6D6B   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F6D8D   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F6DB1   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F6DE5   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F65F3   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA095E6E5   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA095F1A9   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F6FDD   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F6BFB   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F6C75   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6525   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0913331   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA096591D   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA0965925   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA096592D   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0966DC1   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0966DE5   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0966DF5   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0966E13   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FF9E90   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA096B659   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA096B66F   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA096DF5B   ; 135: int IsGuiOnTop(int id)
04D8: 0xA096E07F   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA096E08F   ; 137: int CreateGUI(void *gui)
04E0: 0xA096E09D   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA096E0D7   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA096E0E7   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA096E0F7   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA096E105   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA096E113   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA096E123   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA096E1B7   ; 13F: void DirectRedrawGUI(void)

0500: 0xA096E1CF   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA096E1C3   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FD52B   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA096D5E3   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA09690D9   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA096730D   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0967277   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA0969123   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA096DF69   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A156F1   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A1573D   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA09FF403   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA09FF957   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA096D173   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136985   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D41   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377F9   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135C15   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AC3   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA013639D   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136743   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA01373B3   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373F5   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0136039   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA01362B3   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F4B   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2324   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FFAB50   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A098CB   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A08D09   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A09019   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A09A67   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A06691   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A0F96F   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A0F905   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A0F911   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0252368   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0252B78   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05836CC   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0515AE0   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0516954   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA094B581   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *callback, ...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A46C01   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A470F9   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A46EFD   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A4742D   ; 176: int closesocket(int socket)
05DC: 0xA0A47335   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A4751F   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A4798D   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A4E5FD   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A4E609   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EA48B4   ; 17C: int *socklasterr(void)
05F4: 0xA096E133   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA096E143   ; 17E: void RestartIDLETMR(void)
05FC: 0xA096E14F   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A0F809   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A0F761   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A0F7A9   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A0F1F9   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A09053   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0987349   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0988459   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F39E0   ; 18D: int available0(int sock)
0638: 0xA0D496EF   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA09718D3   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097303D   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA096E245   ; 196: void RefreshGUI(void)
065C: 0xA097309D   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA09731B5   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097300F   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA09729AF   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A0F1ED   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void (*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D1178   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D111C   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325E9   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA013271F   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013355B   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(uint32_t cepid, int profile_id)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(uint32_t cepid, int profile_id, uint32_t is_gprs)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA09501D5   ; 1A7: char *Get_CC_NC()
06A0: 0xA0136849   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013789B   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136F13   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA01379B5   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA01362A1   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA01379B5   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394C1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0137999   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0139457   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379ED   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C75   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A01273   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA09FF2CF   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold()
06D8: 0xA0A48401   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA09910C9   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: TREGEXPLEXT *EXT_TOP(void)
;6E4:              ; 1B9: PNGTOP_DESC *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: SFN_DATA *DATA_N_SFB(void)
06F0: 0xA0F3C51F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3C203   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3C3FF   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E850C5   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E85153   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E8531F   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E818B7   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA096F861   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA096F7C9   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A24F2C   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A0F791   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A0F79D   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A09C1D   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A08CA3   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A08C97   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A08C8B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A08C75   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A08C5D   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A08D45   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA04E6DA3   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA04E6C5B   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A0F931   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A0F93D   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A0F7D9   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A0F7E5   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DECC0   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA01379B5   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139523   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A0F839   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A0F851   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0558B75   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F06BD0   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F66EF   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F6711   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A0F8F9   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A0F9A7   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA0974D07   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0913435   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F72C1   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F7379   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA096C477   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A0FA59   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA0971D8D   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0AEFB04   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA09FAA7C   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *path, int type)
07A8: 0xA096C12B   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8E4BF7E   ; 1EB: char *RAM_IMSI()
07B0: 0xA096C12F   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA096C28F   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: int ProgressCalculate(int current, int total)
07BC: 0xA096C191   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: int ExplorerCopyFile(const WSHDR *from, const WSHDR *to, int overwrite, char transfer_id, uint32_t *errp)
;7C4:              ; 1F1: int ExplorerSetTransferState(char transfer_id, int state)
07C8: 0xA01DE84C   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8E4C344   ; 1F4: char *RamServiceProviderName(void)
07D4: 0xA0FFA19D   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA096C2DB   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA054C595   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D859AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9F678   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA096587B   ; 1FC: __thumb void CloseCSM(int id)
07F4: 0xA09FF2B3   ; 1FD: void SetProp2Square_v2
07F8: 0xA8D87F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA0337CD7   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA09FFA7D   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A05A3F   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA0A01123   ; 203: __thumb void SetPixel(int x,int y,char *color);
0810: 0xA09FE13B   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA09FF28D   ; 205: __thumb void SetProp2Square_v1(void);
0818: 0xA0FF9C59   ; 206: __thumb void srand(unsigned int seed);
081C: 0xA0A05333   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA0913453   ; 208: __thumb int Get_WS_width(WSHDR *ws, int font);
0824: 0xA09657B9   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA0A0F88D   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA0A0F8A5   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA0A0F8BD   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA0A0F8D5   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0A08FD3   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0A08EB9   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

0840: 0xA096DF55   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA0AF8130   ; 212: __swi __arm int CardExplGetCurItem(void *csm);
084C: 0xA12A86D8   ; 213: __swi __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA01F6E0D   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA01F6E9D   ; 215: __swi __arm void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA095E77F   ; 216: __swi __arm void wstrcarprintf(WSHDR *,const char *format,...);
085C: 0xA062BEC1   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA0975FA7   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n);
0864: 0xA09763CF   ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA0A0F9C5   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA0A0F9D1   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA0A0FA0D   ; 21C: __swi __arm int EDIT_IsBusy(void *gui);
0874: 0xA0949A99   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);
0878: 0xA096E18F   ; 21E: __thumb void FocusGUI(int id);
087C: 0xA096E19F   ; 21F: __thumb void UnfocusGUI(void);

0880: 0xA0521C4F   ; 220: int IsSliderClosed(void)
0884: 0xA01D0928   ; 221: SetCpuClockLow(2)
0888: 0xA01D0910   ; 222: SetCpuClockTempHi(2)
088C: 0xA054C573   ; 223: int IsMediaPlayerInBackground()
0890: 0xA054CE5B   ; 224: void CloseMediaPlayer()
0894: 0xA027B2DC   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA027BD8C   ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA027BE2C   ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA027BE5C   ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA0FFAB78   ; 229: __arm void longjmp(jmp_buf, int);
08A8: 0xA095161D   ; 22A: __arm void FreeGSMTXTpkt(void *pkt);
08AC: 0xA02D58C1   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02D51B3   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02D52B1   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA05493A7   ; 22E: int OpenExplorer(NativeExplorerData *data)
08BC: 0xA8DA855C   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA09106D9   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8DA8504   ; 231: TAppointment *RamAppointment
08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA061BF73   ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(const TDate *date, TDate *lunar_date)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar()
08E0: 0xA09515C7   ; 238: void SendAutoUSSDack(void)
08E4: 0xA01E4ECC   ; 239: int EEFullDeleteBlock(uint32_t block, int cepid, int msg)
08E8: 0xA01E5038   ; 23A: int EEFullCreateBlock(uint32_t block, int size, int version, int cepid, int msg)
;8EC:              ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile_id)
08F4: 0xA0F39299   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0F38F09   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0F391A1   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0F39C29   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *
0904: 0xA09108F7   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *destination, const char *source, int size)
;90C:              ; 243: void ws2gb(const WSHDR *source, char *destination, int size)
0910: 0xA0E71FF1   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0E720A1   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA05B18A7   ; 246: int GetFileProp(FILE_PROP *props, const WSHDR *file, const WSHDR *path)
091C: 0xA09981C9   ; 247: NetOff();
0920: 0xA8D86BCE   ; 248: char *RamFormatTrack()
0924: 0xA8D86E36   ; 249: char *RamFreq()
0928: 0xA8D86FEE   ; 24A: char *RamChannel()
092C: 0xA097359F   ; 24B: void SetMenuSearchCallBack(void *gui, const MenuSearchCallBack callback)
0930: 0xA02EDE59   ; 24C: int GetPeripheryState(int device, int check)
0934: 0xA027BE8C   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms);
0938: 0xA02CA510   ; 24E: void* GetPlayObjById(int handle);
093C: 0xA0929B1C   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);

0940: 0xA09298B4   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);
;944:              ; 251: void *RamSizeOfPart()
;948:              ; 252: int *RamSizeOfReceivedOrSentFile()
094C: 0xA8E688DA   ; 253: char *RamLastCallNum()
0950: 0xA05493A7   ; 254: int StartNativeExplorer(NativeExplorerData* data);
0954: 0xA0974D03   ; 255: void MenuSetUserPointer(void *gui, void *user_pointer)
;958:              ; 256: const char *RamNameOfReceivedOrSentFile()
095C: 0xA0935578   ; 257: isSendReceiveFile();
0960: 0xA096BB21   ; 258: int CalcBitmapSize(short w, short h, char type)
0964: 0xA09A00D8   ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber);
0968: 0xA0B95748   ; 25A: int Obs_DestroyObject(HObj hObj);
096C: 0xA099E0BC   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);
0970: 0xA0A646D8   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h);
0974: 0xA0A64854   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h);
0978: 0xA092C9A8   ; 25E: int Obs_Start(HObj hObj);
097C: 0xA0A659CC   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img);

0980: 0xA0A6558C   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h);
0984: 0xA0A64F9C   ; 261: int Obs_SetRotation(HObj hObj, int angle);
0988: 0xA092C608   ; 262: int Obs_GetInfo (HObj hObj, int unk_0or1);
098C: 0xA0A64D48   ; 263: int Obs_SetScaling (HObj hObj, int unk5);
0990: 0xA09A1758   ; 264: int Obs_TranslateMessageGBS(const GBS_MSG *msg, const OBSevent *handlers)
0994: 0xA092CCFC   ; 265: int Obs_Pause(HObj obs)
0998: 0xA092D058   ; 266: int Obs_Resume(HObj obs)
099C: 0xA092CE84   ; 267: int Obs_Stop(HObj obs)
09A0: 0xA092C81C   ; 268: int Obs_Prepare(HObj obs)
09A4: 0xA0B15FB0   ; 269: int Obs_SetRenderOffset(HObj obs, short x, short y)
09A8: 0xA0929A58   ; 26A: int Obs_SetPosition(HObj obs, int position)
;9AC:              ; 26B: int Obs_Mam_SetPurpose(HObj obs, char purpose)
09B0: 0xA0A5CB84   ; 26C: int Obs_Sound_SetVolumeEx(HObj obs, char volume, char delta)
09B4: 0xA0A5D860   ; 26D: int Obs_Sound_GetVolume(HObj obs, char *volume)
09B8: 0xA0A5D09C   ; 26E: int Obs_Sound_SetPurpose(HObj obs, int purpose)
;9BC:              ; 26F: int Obs_Sound_SetAMRFormat(HObj obs, int format)

;9C0:              ; 270: int Obs_Sound_SetAMRDTX(HObj obs, int dtx)
;9C4:              ; 271: int Obs_Sound_SetNofChannels(HObj obs, int num_channels)
;9C8:              ; 272: int Obs_Sound_SetAMRMode(HObj obs, int data_rate)
;9CC:              ; 273: int Obs_Sound_SetFIsRecording(HObj obs, int is_recording)
;9D0:              ; 274: int Obs_Sound_SetMaxFileSize(HObj obs, int max_file_size)
;9D4:              ; 275: int Obs_Sound_SetRecordingMode(HObj obs, int recording_mode)
;9D8:              ; 276: int Obs_SetOutput_File(HObj obs, const WSHDR *filename)
;9DC:              ; 277: int Obs_SetOutput_Uid(HObj obs, int uid)
;9E0:              ; 278: int Obs_Sound_SetBitrate(HObj obs, int bitrate)
;9E4:              ; 279:
09E8: 0xA099E168   ; 27A: int Obs_SetInput_Memory(HObj obs, int unk, char *buf, int len)
09EC: 0xA0929D50   ; 27B: int Obs_SetCSM(HObj obs, CSM_RAM *csm)
;9F0:              ; 27C:
;9F4:              ; 27D:
;9F8:              ; 27E:
;9FC:              ; 27F:

;A00:              ; 280:
0A04: 0xA8E6F048   ; 281: char *RamIsRunJava();
0A08: 0xA8E52400   ; 282: char *RamIsRunCamera():
0A0C: 0xA0545655   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0D496D7   ; 284: __swi __arm int IsGPRS()
0A14: 0xA0D496DF   ; 285: __swi __arm int IsEDGE()
0A18: 0xA0D40B8F   ; 286: int GetSMSState()
0A1C: 0xA02D619B   ; 287: __swi __arm int BT_GetLocVisibility()
0A20: 0xA03494AF   ; 288: __swi __arm int GetCurrAudioPath()
0A24: 0xA0DA855D   ; 289: int isDecryption()
0A28: 0xA8DF8120   ; 28A: __swi __arm char *RamIsFileCache()
0A2C: 0xA8EC1D30   ; 28B: __swi __arm char *RamTotalHeapSize()
0A30: 0xA8EC1DA0   ; 28C: __swi __arm char *RamTemporaryHeapSize()
0A34: 0xA8DA2A78   ; 28D: __swi __arm char *RamBTNameDevice()
0A38: 0xA8DA1C6C   ; 28E: __swi __arm char *RamActiveGPRSProfileName()
;A3C:              ; 28F: char *RamIsNumberTyping()

0A40: 0xA8EAA230   ; 290: __swi __arm char *RamCallState()
0A44: 0xA029ED28   ; 291: __swi __arm int RefreshAlarmClock()
0A48: 0xA8F124C4   ; 292: __swi __arm char *RamIsAlarmAutorepeatOn()
0A4C: 0xA8F124CC   ; 293: __swi __arm char *RamAlarmclockHour()
0A50: 0xA8F124CD   ; 294: __swi __arm char *RamAlarmclockMinute()
;A54:              ; 295:
0A58: 0xA028A5AD   ; 296: __swi __arm void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8F0B170   ; 297: __swi __arm char *RamIsSoundRecord()
0A60: 0xA8F0B1CC   ; 298: __swi __arm char *RamIsSoundRecordQuality()
0A64: 0xA8DF83C4   ; 299: __swi __arm char *RamExtendedCameraState()
0A68: 0xA0293C79   ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)
0A6C: 0xA029AF31   ; 29B: GetTypeOfBTHeadset
0A70: 0xA08FD857   ; 29C: __swi __arm char *RamInputLanguage()
0A74: 0xA8DB41F0   ; 29D: __swi __arm char *RamDisplayLanguage()
0A78: 0xA8DA28C8   ; 29E: char *RamIsBTConnected()
0A7C: 0xA8DA285C   ; 29F: char *RamIsBTHeadsetConnected()

0A80: 0xA029E954   ; 2A0: int GetAlarmclockState(int state)
;A84:              ; 2A1:
;A88:              ; 2A2:
0A8C: 0xA0971E31   ; 2A3: __swi __arm void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA096EC93   ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA0975BC1   ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA096E299   ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA0972BF3   ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA096FA63   ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA096D437   ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA096D3A9   ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0975A67   ; 2AB: void *GetPopupUserPointer(void *gui)
0AB0: 0xA0B43649   ; 2AC: __swi __arm int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA0B43851   ; 2AD: __thumb int SetSmsStatus(int index, int type)
0AB8: 0xA09738C1   ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA0A1AEFD   ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA09748C1   ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8E6C540   ; 2B1: __swi __arm SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0D52CA1   ; 2B2: __swi __arm int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA0524BAC   ; 2B3: __swi __arm NativeAbData *AllocNativeAbData(void)
0AD0: 0xA0524CBC   ; 2B4: __swi __arm int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA0524F44   ; 2B5: __swi __arm int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA05255FC   ; 2B6: __swi __arm WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA0524F64   ; 2B7: __swi __arm int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA0525858   ; 2B8: __swi __arm int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA05AE00C   ; 2B9: __swi __arm unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0A1B157   ; 2BA: __swi __arm void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA0A17F5F   ; 2BB: __swi __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0A15009   ; 2BC: __swi __arm void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA0A18413   ; 2BD: __swi __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA0A1852F   ; 2BE: __swi __arm int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA0A18691   ; 2BF: __swi __arm int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0A1854D   ; 2C0: __swi __arm int GetCursorTab(void *tab_gui)
0B04: 0xA0A17FC9   ; 2C1: __swi __arm void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA090C015   ; 2C2: __thumb int GetSubprovider(WSHDR* ws)
0B0C: 0xA090C249   ; 2C3: __thumb int GetRoamingState()
0B10: 0xA0289EDB   ; 2C4: __swi __arm int GetProfileVolumeSetting(int profile, int type)
0B14: 0xA8E2C008   ; 2C5: __swi __arm RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA026E573   ; 2C6: __swi __arm int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA026E5C5   ; 2C7: __swi __arm int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA026EA4E   ; 2C8: __swi __arm int GetSecondsFromTime(TTime *time)
0B24: 0xA026E4AD   ; 2C9: __swi __arm int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA026E5C5   ; 2CA: __swi __arm int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA026EA61   ; 2CB: __swi __arm void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA026E398   ; 2CC: __swi __arm void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA026ED89   ; 2CD: __swi __arm void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA026DD7C   ; 2CE: __swi __arm int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA026E9F0   ; 2CF: __swi __arm int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA026DDCD   ; 2D0: __swi __arm int GetDaysFromMonth(TDate *date)
0B44: 0xA026DDAD   ; 2D1: __swi __arm int IsLeapYear(TDate *date)
;B48:              ; 2D2: void StartNativeBrowserCore()
0B4C: 0xA05259E0   ; 2D3: __swi __arm int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA0524F88   ; 2D4: __swi __arm void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA0951F33   ; 2D5: __swi __arm void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA09764F7   ; 2D6: __swi __arm void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA0976AE9   ; 2D7: __swi __arm void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA0976A73   ; 2D8: __swi __arm void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA0976B17   ; 2D9: __swi __arm void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA0976B1D   ; 2DA: __swi __arm void *TViewGetUserPointer(void *gui)
0B6C: 0xA060ABA9   ; 2DB: __swi __arm void SendMedia(WSHDR *file, WSHDR *path)
0B70: 0xA090E421   ; 2DC: __thumb void SaveMaxIllumination(int level)
0B74: 0xA090E435   ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec)
0B78: 0xA090E445   ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA090E461   ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter)

0B80: 0xA0A197FB   ; 2E0: __swi arm__ IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA04E6CDD   ; 2E1: __swi __arm int GetExtUidByFileName_ws(WSHDR * fn)
0B88: 0xA01F661F   ; 2E2: int wstrcmp(WSHDR*ws1,WSHDR*ws2)
0B8C: 0xA02A573D   ; 2E3: __swi __arm int fexists(WSHDR* FileName)
0B90: 0xA0289B33   ; 2E4: __swi __arm  int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword)
0B94: 0xA0289AF1   ; 2E5: __swi __arm  int SettingsAE_Read_ws(WSHDR *,int set,char * entry,char *keyword)
0B98: 0xA0289A8B   ; 2E6: __swi __arm  int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword)
0B9C: 0xA0289A55   ; 2E7: __swi __arm  int SettingsAE_GetFlag(int *res,int set,char * entry,char *keyword)
0BA0: 0xA0289AD1   ; 2E8: __swi __arm  int SettingsAE_Update(int val,int set,char * entry,char *keyword)
0BA4: 0xA0289A9D   ; 2E9: __swi __arm  int SettingsAE_Read(int *res,int set,char * entry,char *keyword)
0BA8: 0xA02D5489   ; 2EA: __swi __arm  void* SettingsAE_GetEntryList(int set)
0BAC: 0xA02D558F   ; 2EB: __swi __arm  int SettingsAE_RemoveEntry(int set,char *entry,int flag)
0BB0: 0xA01F0C20   ; 2EC: __swi __arm int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA01F0C74   ; 2ED: __swi __arm int i2c_receive(I2C_MSG *msg)
;BB8:              ; 2EE: int elfclose(void *ex)
;BBC:              ; 2EF: int dlopen(const char *name)

;BC0:              ; 2F0: void *dlsym(int handle, const char *name)
;BC4:              ; 2F1: int dlclose(int handle)
;BC8:              ; 2F2: int setenv(const char *name, const char *value, int replace)
;BCC:              ; 2F3: int unsetenv(const char *name)
;BD0:              ; 2F4: char *getenv(const char *name)
;BD4:              ; 2F5: int clearenv(void)
;BD8:              ; 2F6: char **getBaseEnviron()
;BDC:              ; 2F7: const char *dlerror()
;BE0:              ; 2F8: int dlclean_cache()
;BE4:              ; 2F9: void *SHARED_TOP()
;BE8:              ; 2FA:
;BEC:              ; 2FB:
;BF0:              ; 2FC:
;BF4:              ; 2FD:
;BF8:              ; 2FE:
;BFC:              ; 2FF:

0C00: 0xA00A2420   ; 300: __arm NU_Create_Task
0C04: 0xA00A253C   ; 301: __arm NU_Delete_Task
0C08: 0xA00A2598   ; 302: __arm NU_Reset_Task
0C0C: 0xA00A25B8   ; 303: __arm NU_Terminate_Task
0C10: 0xA00A26B4   ; 304: __arm NU_Resume_Task
0C14: 0xA00A26FC   ; 305: __arm NU_Suspend_Task
0C18: 0xA00A2738   ; 306: __arm NU_Relinquish
0C1C: 0xA00A275C   ; 307: __arm NU_Sleep
0C20: 0xA00A3AA4   ; 308: __arm NU_Change_Priority
0C24: 0xA00A3ABC   ; 309: __arm NU_Change_Preemption
0C28: 0xA00A3AD8   ; 30A: __arm NU_Change_Time_Slice
0C2C: 0xA00A8260   ; 30B: __arm NU_Check_Stack
0C30: 0xA00A2030   ; 30C: __arm NU_Current_Task_Pointer
0C34: 0xA00A6560   ; 30D: __arm NU_Established_Tasks
0C38: 0xA00A6900   ; 30E: __arm NU_Task_Information
0C3C: 0xA00A6588   ; 30F: __arm NU_Task_Pointers

0C40: 0xA00A3090   ; 310: __arm NU_Create_Mailbox
0C44: 0xA00A30BC   ; 311: __arm NU_Delete_Mailbox
;C48:              ; 312: int NU_Reset_Mailbox(NU_MAILBOX *mailbox)
0C4C: 0xA00A30DC   ; 313: __arm NU_Send_To_Mailbox
;C50:              ; 314: int NU_Broadcast_To_Mailbox(NU_MAILBOX *mailbox, void *message, unsigned long suspend)
0C54: 0xA00A3140   ; 315: __arm NU_Receive_From_Mailbox
;C58:              ; 316: unsigned long NU_Established_Mailboxes(void)
;C5C:              ; 317: int NU_Mailbox_Information(NU_MAILBOX *mailbox, CHAR *name, OPTION *suspend_type, OPTION *message_present, unsigned long *tasks_waiting, NU_TASK **first_task)
;C60:              ; 318: unsigned long NU_Mailbox_Pointers(NU_MAILBOX **pointer_list, unsigned long maximum_pointers)
0C64: 0xA00A60D4   ; 319: __arm NU_Create_Queue
0C68: 0xA00A6174   ; 31A: __arm NU_Delete_Queue
;C6C:              ; 31B: int NU_Reset_Queue(NU_QUEUE *queue)
;C70:              ; 31C: int NU_Send_To_Front_Of_Queue(NU_QUEUE *queue, void *message, unsigned long size, unsigned long suspend)
0C74: 0xA00A6194   ; 31D: __arm NU_Send_To_Queue
;C78:              ; 31E: int NU_Broadcast_To_Queue(NU_QUEUE *queue, void *message, unsigned long size, unsigned long suspend)
0C7C: 0xA00A6238   ; 31F: __arm NU_Receive_From_Queue

0C80: 0xA00A62E8   ; 320: __arm NU_Established_Queues
0C84: 0xA00A63A0   ; 321: __arm NU_Queue_Information
0C88: 0xA00A62FC   ; 322: __arm NU_Queue_Pointers
;C8C:              ; 323: int NU_Create_Pipe(NU_PIPE *pipe, CHAR *name, void *start_address, unsigned long pipe_size, OPTION message_type, unsigned long message_size, OPTION suspend_type)
;C90:              ; 324: int NU_Delete_Pipe(NU_PIPE *pipe)
;C94:              ; 325: int NU_Reset_Pipe(NU_PIPE *pipe)
;C98:              ; 326: int NU_Send_To_Front_Of_Pipe(NU_PIPE *pipe, void *message, unsigned long size, unsigned long suspend)
;C9C:              ; 327: int NU_Send_To_Pipe(NU_PIPE *pipe, void *message, unsigned long size, unsigned long suspend)
;CA0:              ; 328: int NU_Broadcast_To_Pipe(NU_PIPE *pipe, void *message, unsigned long size, unsigned long suspend)
;CA4:              ; 329: int NU_Receive_From_Pipe(NU_PIPE *pipe, void *message, unsigned long size, unsigned long *actual_size, unsigned long suspend)
;CA8:              ; 32A: unsigned long NU_Established_Pipes(void)
;CAC:              ; 32B: int NU_Pipe_Information(NU_PIPE *pipe, CHAR *name, void **start_address, unsigned long *pipe_size, unsigned long *available, unsigned long *messages, OPTION *message_type, unsigned long *message_size, OPTION *suspend_type, unsigned long *tasks_waiting, NU_TASK **first_task)
;CB0:              ; 32C: unsigned long NU_Pipe_Pointers(NU_PIPE **pointer_list, unsigned long maximum_pointers)
0CB4: 0xA00A39C0   ; 32D: __arm NU_Create_Semaphore
0CB8: 0xA00A39F8   ; 32E: __arm NU_Delete_Semaphore
;CBC:              ; 32F: int NU_Reset_Semaphore(NU_SEMAPHORE *semaphore, unsigned long initial_count)

0CC0: 0xA00A3A18   ; 330: __arm NU_Obtain_Semaphore
0CC4: 0xA00A3A68   ; 331: __arm NU_Release_Semaphore
;CC8:              ; 332: unsigned long NU_Established_Semaphores(void)
;CCC:              ; 333: int NU_Semaphore_Information(NU_SEMAPHORE *semaphore, CHAR *name, unsigned long *current_count, OPTION *suspend_type, unsigned long *tasks_waiting, NU_TASK **first_task)
;CD0:              ; 334: unsigned long NU_Semaphore_Pointers(NU_SEMAPHORE **pointer_list, unsigned long maximum_pointers)
0CD4: 0xA00A2F2C   ; 335: __arm NU_Create_Event_Group
0CD8: 0xA00A2F48   ; 336: __arm NU_Delete_Event_Group
0CDC: 0xA00A2F68   ; 337: __arm NU_Set_Events
0CE0: 0xA00A2F9C   ; 338: __arm NU_Retrieve_Events
;CE4:              ; 339: unsigned long NU_Established_Event_Groups(void)
;CE8:              ; 33A: int NU_Event_Group_Information(NU_EVENT_GROUP *group, CHAR *name, unsigned long *event_flags, unsigned long *tasks_waiting, NU_TASK **first_task)
;CEC:              ; 33B: unsigned long NU_Event_Group_Pointers(NU_EVENT_GROUP **pointer_list, unsigned long maximum_pointers)
0CF0: 0xA00A3AF0   ; 33C: __arm NU_Control_Signals
0CF4: 0xA00A3B10   ; 33D: __arm NU_Receive_Signals
0CF8: 0xA00A3B30   ; 33E: __arm NU_Register_Signal_Handler
0CFC: 0xA00A3B5C   ; 33F: __arm NU_Send_Signals

0D00: 0xA00A3230   ; 340: __arm NU_Create_Partition_Pool
0D04: 0xA00A32B4   ; 341: __arm NU_Delete_Partition_Pool
0D08: 0xA00A32D4   ; 342: __arm NU_Allocate_Partition
0D0C: 0xA00A3338   ; 343: __arm NU_Deallocate_Partition
0D10: 0xA00A3370   ; 344: __arm NU_Established_Partition_Pools
0D14: 0xA00A3428   ; 345: __arm NU_Partition_Pool_Information
0D18: 0xA00A3384   ; 346: __arm NU_Partition_Pool_Pointers
0D1C: 0xA00A2B5C   ; 347: __arm NU_Create_Memory_Pool
0D20: 0xA00A2BEC   ; 348: __arm NU_Delete_Memory_Pool
0D24: 0xA00A2C0C   ; 349: __arm NU_Allocate_Memory
0D28: 0xA00A2C98   ; 34A: __arm NU_Deallocate_Memory
0D2C: 0xA00A2CD0   ; 34B: __arm NU_Established_Memory_Pools
0D30: 0xA00A2D88   ; 34C: __arm NU_Memory_Pool_Information
0D34: 0xA00A2CE4   ; 34D: __arm NU_Memory_Pool_Pointers
0D38: 0xA00A8058   ; 34E: __arm NU_Control_Interrupts
0D3C: 0xA00A8084   ; 34F: __arm NU_Local_Control_Interrupts

0D40: 0xA00A809C   ; 350: __arm NU_Restore_Interrupts
;D44:              ; 351: void *NU_Setup_Vector(INT vector, void *new_vector)
0D48: 0xA00A232C   ; 352: __arm NU_Register_LISR
0D4C: 0xA00A27B8   ; 353: __arm NU_Activate_HISR
0D50: 0xA00A24CC   ; 354: __arm NU_Create_HISR
0D54: 0xA00A2578   ; 355: __arm NU_Delete_HISR
0D58: 0xA00A2058   ; 356: __arm NU_Current_HISR_Pointer
0D5C: 0xA00A6574   ; 357: __arm NU_Established_HISRs
0D60: 0xA00A67EC   ; 358: __arm NU_HISR_Information
0D64: 0xA00A662C   ; 359: __arm NU_HISR_Pointers
0D68: 0xA00A8448   ; 35A: __arm NU_Protect
0D6C: 0xA00A84B0   ; 35B: __arm NU_Unprotect
0D70: 0xA00A4274   ; 35C: __arm NU_Create_Timer
0D74: 0xA00A42E8   ; 35D: __arm NU_Delete_Timer
0D78: 0xA00A4308   ; 35E: __arm NU_Reset_Timer
0D7C: 0xA00A436C   ; 35F: __arm NU_Control_Timer

0D80: 0xA00A3FAC   ; 360: __arm NU_Established_Timers
0D84: 0xA00A4064   ; 361: __arm NU_Timer_Information
0D88: 0xA00A3FC0   ; 362: __arm NU_Timer_Pointers
0D8C: 0xA00A8948   ; 363: __arm NU_Set_Clock
0D90: 0xA00A8954   ; 364: __arm NU_Retrieve_Clock
0D94: 0xA00A6528   ; 365: __arm NU_Release_Information
0D98: 0xA00A6528   ; 366: __arm NU_License_Information
;D9C:              ; 367: void NU_Disable_History_Saving(void)
;DA0:              ; 368: void NU_Enable_History_Saving(void)
;DA4:              ; 369: void NU_Make_History_Entry(unsigned long param1, unsigned long param2, unsigned long param3)
;DA8:              ; 36A: int NU_Retrieve_History_Entry(DATA_ELEMENT *id, unsigned long *param1, unsigned long *param2, unsigned long *param3, unsigned long *time, NU_TASK **task, NU_HISR **hisr)
;DAC:              ; 36B: int NU_Create_Driver(NU_DRIVER *driver, CHAR *name, void (*driver_entry)(NU_DRIVER *, NU_DRIVER_REQUEST *))
;DB0:              ; 36C: int NU_Delete_Driver(NU_DRIVER *driver)
;DB4:              ; 36D: int NU_Request_Driver(NU_DRIVER *driver, NU_DRIVER_REQUEST *request)
;DB8:              ; 36E: int NU_Resume_Driver(NU_TASK *task)
;DBC:              ; 36F: int NU_Suspend_Driver(void (*terminate_routine)(void *), void *information, unsigned long timeout)

;DC0:              ; 370: unsigned long NU_Established_Drivers(void)
;DC4:              ; 371: unsigned long NU_Driver_Pointers(NU_DRIVER **pointer_list, unsigned long maximum_pointers)
;DC8:              ; 372: unsigned long NU_IS_SUPERVISOR_MODE()
;DCC:              ; 373: void NU_SUPERVISOR_MODE(unsigned long nu_svc_usr_var)
0DD0: 0xA00A1284   ; 374: __arm NU_USER_MODE
0DD4: 0xA8D96D24   ; 375: __arm NU_SUPERV_USER_VARIABLES
;DD8:              ; 376:
;DDC:              ; 377:
;DE0:              ; 378:
;DE4:              ; 379:
;DE8:              ; 37A:
;DEC:              ; 37B:
;DF0:              ; 37C:
;DF4:              ; 37D:
;DF8:              ; 37E:
;DFC:              ; 37F:

0E00: 0xA096DF49   ; 380: WSHDR *GetClipBoard()
0E04: 0xA096DEE1   ; 381: int CopyWsToClipboard(WSHDR *src)
0E08: 0xA096DEC9   ; 382: void ClearClipboard(void)
0E0C: 0xA0967367   ; 383: int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *)
0E10: 0xA0969067   ; 384: __swi __arm int LCDRedrawLAYER(LCDLAYER *)
0E14: 0xA0098F70   ; 385: GBSPROC *GetGBSProcAddress(unsigned short cepid)
0E18: 0xA00C7E8F   ; 386: void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2)
0E1C: 0xA0964E25   ; 387: LCDLAYER *GetLCDLAYERByCurCepID()
0E20: 0xA0A04861   ; 388: void SetDepthBuffer(char depth)
0E24: 0xA0A04815   ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth)
;E28:              ; 38A: void *RamAudioHook()
0E2C: 0xA8D95B90   ; 38B: char *RamLastStoreString()
;E30:              ; 38C: int sys_format(uint16_t drive, uint32_t *err)
0E34: 0xA0251F0C   ; 38D: int stat(int fhandler, FStat *fstat, unsigned *error)
0E38: 0xA0093124   ; 38E: void CreateICL(PGROUP *pg)
0E3C: 0xA0098224   ; 38F: PGroupProc *CreatePGroupRes(int mask, int unk_zero, TaskConfig *conf, int size)

0E40: 0xA0098E3C   ; 390: PGroupProc *PGroupCurrentTaskPointer()
0E44: 0xA0093AB4   ; 391: void *MemMBPAlloc(void *pool, int size)
0E48: 0xA00947A8   ; 392: void MemMBPFree(void *pool, void *ptr)
0E4C: 0xA8DB49FC   ; 393: void *MopiResourcePool()
0E50: 0xA1086564   ; 394: RAND_METHOD *RAND_get_rand_method(void)
0E54: 0xA0F859FB   ; 395: SSL_METHOD *TLSv1_client_method()
0E58: 0xA0F87037   ; 396: SSL_CTX *SSL_CTX_new(SSL_METHOD *meth)
0E5C: 0xA0F86433   ; 397: void SSL_CTX_free(SSL_CTX *ctx)
0E60: 0xA0F8350B   ; 398: long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
0E64: 0xA0F86603   ; 399: SSL *SSL_new(SSL_CTX *ctx)
0E68: 0xA0F86823   ; 39A: int SSL_set_fd(SSL *s, int fd)
0E6C: 0xA0F869C7   ; 39B: int SSL_connect(SSL *ssl)
0E70: 0xA0F869E1   ; 39C: int SSL_shutdown(SSL *ssl)
0E74: 0xA0F8235B   ; 39D: int SSL_read(SSL *ssl, void *buf, int num)
0E78: 0xA0F823E1   ; 39E: int SSL_peek(SSL *ssl, void *buf, int num)
0E7C: 0xA0F822BD   ; 39F: int SSL_write(SSL *ssl, const void *buf, int num)

0E80: 0xA0F86709   ; 3A0: void SSL_free(SSL *ssl)
0E84: 0xA0F87427   ; 3A1: int SSL_set_session(SSL *ssl, SSL_SESSION *session)
0E88: 0xA0F812FF   ; 3A2: void SSL_SESSION_free(SSL_SESSION *sess)
0E8C: 0xA0973013   ; 3A3: void SetMenuItemIconIMGHDR(void *gui, void *item, IMGHDR *icon)
0E90: 0xA0A00515   ; 3A4: void LCDLAYER_Current_SetClipRegion(int x, int y, int x2, int y2)
0E94: 0xA09FFBD3   ; 3A5: void DrawIMGHDR(int x, int y, IMGHDR *img)
0E98: 0xA09133E5   ; 3A6: void DrwObj_GetWH(DRWOBJ *drwobj, int *w, int *h)
0E9C: 0xA096B72F   ; 3A7: int GUI_NewTimer(void *gui)
0EA0: 0xA096B873   ; 3A8: int GUI_DeleteTimer(void *gui, int id)
0EA4: 0xA096B7C3   ; 3A9: void GUI_StartTimerProc(void *gui, int id, long timeout_ms, GUI_TimerProc callback)
0EA8: 0xA0FF99A5   ; 3AA: void qsort(void *first, size_t nitems, size_t size, int (*comparator)(const void *, const void *))
0EAC: 0xA0FF8C8D   ; 3AB: void *bsearch(const void *key, const void *first, size_t nitems, size_t size, int (*comparator)(const void *, const void *))
;EB0:              ; 3AC: int EVP_add_cipher(EVP_CIPHER *c)
;EB4:              ; 3AD:
;EB8:              ; 3AE:
;EBC:              ; 3AF:

;EC0:              ; 3B0: void SettingsAE_RegisterListener(SettingsAE_ListenerProc proc, int set_id, const char *entry, const char *keyword)
;EC4:              ; 3B1: void SettingsAE_DeregisterListener(SettingsAE_ListenerProc proc, int set_id, const char *entry, const char *keyword)
0EC8: 0xA054C6C1   ; 3B2: const WSHDR *GetLastAudioTrackDir()
;ECC:              ; 3B3: IMGHDR *GetIMGHDRFromCanvasCache(char canvas_id)
;ED0:              ; 3B4: void GetDate_ws(WSHDR *ws, const TDate *date, unsigned int unk)
;ED4:              ; 3B5: void GetTime_ws(WSHDR *ws, const TTime *time, unsigned int unk)
;ED8:              ; 3B6:
;EDC:              ; 3B7: int sys_mkdir_ws(const WSHDR *dirname, uint32_t *err)
;EE0:              ; 3B8:
;EE4:              ; 3B9: int sys_rename_ws(const WSHDR *old_name, const WSHDR *new_name, uint32_t *err)
;EE8:              ; 3BA:
;EEC:              ; 3BB:
;EF0:              ; 3BC: int isdir_ws(const WSHDR *path, uint32_t *err)
;EF4:              ; 3BD:
;EF8:              ; 3BE:
;EFC:              ; 3BF:

;F00:              ; 3C0: int ShowWaitBox(int flags, int message)
;F04:              ; 3C1:
;F08:              ; 3C2: int ShowPBarBox(int flags, int message, PBAR_DESC *pbar_desc, int initial_value, WSHDR *initial_ws)
;F0C:              ; 3C3: int SetPBarValue(int gui_id, int value)
;F10:              ; 3C4: int SetPBarText(int gui_id, WSHDR *ws)
;F14:              ; 3C5: void *GetPBarProc3()
;F18:              ; 3C6: void SetHeaderScrollText(void *header, const WSHDR *title, const void *malloc_fn, const void *mfree_fn)
;F1C:              ; 3C7: void SetHeaderExtraText(void *header, const WSHDR *ws, const void *malloc_fn, const void *mfree_fn)
;F20:              ; 3C8: int GetMimeType(int uid, WSHDR *mime_type, int unk_0)
;F24:              ; 3C9: int wstrncmp(const WSHDR *ws1, const WSHDR *ws2, size_t n)
;F28:              ; 3CA:
;F2C:              ; 3CB:
;F30:              ; 3CC: int PersMenuCSM_Open(const WSHDR *file_name, const WSHDR *dir, int flag, int open_mode)
;F34:              ; 3CD:
;F38:              ; 3CE:
;F3C:              ; 3CF:

;F40:              ; 3D0: int ShowScreenSaverCodeProtection()
;F44:              ; 3D1: void MediaProc_LaunchLastPlayback()
;F48:              ; 3D2: int GetScreenSaverType()
0F4C: 0xA090E36B   ; 3D3: void IllumFilterSet(int flags, int unk)
#pragma enable old_equal_ff
+0

;------------------------- end -------------------------

