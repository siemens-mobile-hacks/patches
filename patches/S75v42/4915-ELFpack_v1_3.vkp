;S75v42
;ELFpack
;ELFpack
;(c) Rst7/CBSIE, BoBa
;Version: 1.3
;PatchID: 4915
;Details: https://patches.kibab.com/patches/details.php5?id=4915
/*
Должны работать эльфы:
XTask
MegaDial
Ted
CpuMon
TMOEdit (правда имя при создании тмошки будет корявое)


Что нового в v1.3
+ Загрузка всех .elf-файлов из каталога 4:\ZBin\Daemons

+ Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
 по файлу 4:\ZBin\etc\extension.cfg. Формат файла:
 ...
 расширение_без_точки:полный_путь_и_имя_elf_файла<CR><LF>
 ...
 Последняя строка в файле - универсальное расширение, рекоммендуется прописать
 туда строку "*:4:\ZBin\TED\Ted.elf"

+ Исправлен HELPER_PROC (заменен cepid с 4338 на 4339)

+ Перенесены в библиотеку функции SUBPROC и REDRAW - находятся в HELPER

+ Удаление процесса HELPER_PROC при закрытии IDLE_CSM

+ Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив
 ММС.zip с сохранением путей.

+ Вынесены адреса возврата в отдельный сегмент (RET_ADRS) для упрощения портирования

+ Ублажены юзеры МП - перенесен GetCPULoad
*/
+0074000
#pragma enable old_equal_ff
;Generated by PATSearchNT by BoBa v0.4
0000: 0xA0090590 ; 000: __arm void loopback0();
0004: 0xA0090590 ; 001: __arm void loopback1();
0008: 0xA0090590 ; 002: __arm void loopback2();
000C: 0xA0090590 ; 003: __arm void loopback3();
0010: 0xA0090590 ; 004: __arm void loopback4();
0018: 0xA01AA6F8 ; 006: __arm int GetAkku(int param1,int param2);
0020: 0xA01B4C54 ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0028: 0xA0251888 ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
002C: 0xA0251948 ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0030: 0xA0251A78 ; 00C: __arm unsigned int fwrite(int FileHandler, void const * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA02517DC ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
003C: 0xA025183C ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);
0040: 0xA0251480 ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
0050: 0xA0094B5C ; 014: __arm void *malloc(unsigned int size);
0054: 0xA0094948 ; 015: __arm void mfree(void *);
0058: 0xA0FC14A5 ; 016: __thumb int sprintf(char *buf, const char *str, ...);
005C: 0xA0FC2F11 ; 017: __thumb char * strcat (char *,const char *);
0060: 0xA0FC2F31 ; 018: __thumb char * strchr (const char *,int);
0064: 0xA0FC2F54 ; 019: __arm int  strcmp (const char *,const char *);
0068: 0xA0FC2FF1 ; 01A: __thumb char * strcpy (char *dest,const char *source);
006C: 0xA0FC3071 ; 01B: __thumb unsigned int strlen(const char *);
0070: 0xA01F5FF1 ; 01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);
008C: 0xA029BE21 ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
0094: 0xA029B31B ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
00C8: 0xA028132C ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
0134: 0xA0093278 ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
0170: 0xA01CFB28 ; 05C: __arm unsigned char GetCPUClock();
0174: 0xA033091B ; 05D: __thumb unsigned char GetCPULoad();
01AC: 0xA0251358 ; 06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
01B0: 0xA02513D8 ; 06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA02512A0 ; 06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01F0: 0xA01AF527 ; 07C: __thumb unsigned int SetVibration(unsigned int power);
0200: 0xA05E69ED ; 080: __thumb int ShowCallList(int list, int zero);
0230: 0xA04D2A59 ; 08C: __thumb void RegExplorerExt(REGEXPLEXT const *);
028C: 0xA0251FC8 ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
02AC: 0xA0090590 ; 0AB: __arm void loopback171();
02D0: 0xA08FDF2F ; 0B4: __thumb void GetDateTime(TDate *, TTime *);
02D4: 0xA026D0AF ; 0B5: __thumb char GetWeek(TDate*);
02D8: 0xA0289573 ; 0B6: __thumb char GetProfile();
02DC: 0xA02895D3 ; 0B7: __thumb char SetProfile(char);
02E0: 0xA0FC28A4 ; 0B8: __arm int dwMODdw(int denom,int number);
0320: 0x00000000 ; 80C8: __unknown unsigned short *RamCap();
0328: 0x00000000 ; 80CA: __unknown RAMNET * RamNet();
0400: 0xA0092A94 ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
0404: 0xA0091950 ; 101: __arm int GBS_ReciveMessage(GBS_MSG *);
0408: 0xA009209C ; 102: __arm void GBS_AcceptMessage(void);
040C: 0xA0091DA4 ; 103: __arm void GBS_ClearMessage(void);
0410: 0xA0091F88 ; 104: __arm void GBS_PendMessage(GBS_MSG *);
0414: 0xA0092F40 ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero);
0418: 0xA8DB99B0 ; 8106: __unknown CSMROOT *CSM_root();
041C: 0xA096CCDF ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int);
0420: 0xA096CCF1 ; 108: __thumb CSM_RAM * FindCSMbyID (int id);
0424: 0xA096CDAD ; 109: __thumb void DoIDLE(void);
0428: 0x00000000 ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0x00000000 ; 810B: __unknown void *GetMinAdrScan(); //BoBaPack
0430: 0x00000000 ; 810C: __unknown void *GetMaxAdrScan(); //BoBaPack
0434: 0x00000000 ; 810D: __unknown unsigned short *GetCI();
0438: 0x00000000 ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack
043C: 0xA029A45D ; 10F: __thumb void freeUSSD();
0440: 0xA026E4C5 ; 110: __thumb char *wstrcopy(char *dst, char *src);
0444: 0xA029A499 ; 111: __thumb char GetTypeUSSD();
0448: 0xA029A4A9 ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA0FC3041 ; 113: __thumb char * strpbrk (const char *s1,const char *s2);
0450: 0xA0FC30BD ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
0454: 0xA0FC30ED ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n);
0458: 0xA0FC313D ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
045C: 0xA0FC31B9 ; 117: __thumb char * strrchr (const char *s,int c);
0460: 0xA0FC31D1 ; 118: __thumb char * strstr (const char *s1,const char *s2);
0464: 0xA0FC31F9 ; 119: __thumb int  strtol (const char *nptr,char **endptr,int base);
0468: 0xA0FC3275 ; 11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
046C: 0xA0FC1451 ; 11B: __thumb int snprintf (char *,int n,const char *format,...);
0470: 0xA0FC2231 ; 11C: __thumb int  memcmp (void *m1,void *m2,int n);
0474: 0xA0FC268C ; 11D: __arm void  zeromem (void *dest,int n);
0478: 0xA0FC2730 ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA01F5EE3 ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
0480: 0xA01F5F05 ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
0484: 0xA01F5F29 ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA01F5F5D ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA01F576B ; 123: __thumb int  wstrlen (WSHDR *wshdr);
0490: 0xA0965BBD ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);
0494: 0xA0966681 ; 125: __thumb WSHDR * AllocWS (int len);
0498: 0xA01F6155 ; 126: __thumb void  CutWSTR (void *WSHDR,int len);
049C: 0xA01F5D73 ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
04A0: 0xA01F5DED ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
04A4: 0xA01F569D ; 129: __thumb void  FreeWS (WSHDR *wshdr);
04A8: 0xA0900B15 ; 12A: __thumb void  DrawObject (DRWOBJ *);
04AC: 0xA096CE89 ; 12B: __thumb void  AddKeybMsgHook (void *proc);
04B0: 0xA096CE91 ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);
04B4: 0xA096CE99 ; 12D: __thumb void  RemoveKeybMsgHook (void *proc);
04B8: 0xA096E32D ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
04BC: 0xA096E351 ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);
04C0: 0xA096E361 ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);
04C4: 0xA096E37F ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
04C8: 0x00000000 ; 132: __unknown void  deleted();
04CC: 0xA0972BC5 ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
04D0: 0xA0972BDB ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
04D4: 0xA09754C7 ; 135: __thumb int  IsGuiOnTop (int id);
04D8: 0xA09755EB ; 136: __thumb int  CreateGUI_ID (void *gui,int id);
04DC: 0xA09755FB ; 137: __thumb int  CreateGUI (void *gui);
04E0: 0xA0975609 ; 138: __thumb int  CreateGUI_30or2 (void *gui);
04E4: 0xA0975643 ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
04E8: 0xA0975653 ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
04EC: 0xA0975663 ; 13B: __thumb void  GeneralFuncF1 (int cmd);
04F0: 0xA0975671 ; 13C: __thumb void  GeneralFuncF0 (int cmd);
04F4: 0xA097567F ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
04F8: 0xA097568F ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);
04FC: 0xA0975723 ; 13F: __thumb void DirectRedrawGUI (void);
0500: 0xA097573B ; 140: __thumb void  DirectRedrawGUI_ID (int id);
0504: 0xA097572F ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA09FD21F ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
050C: 0xA0093318 ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA009B820 ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);
0514: 0xA0099208 ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA009B180 ; 146: __arm void LockSched(void);
051C: 0xA009B26C ; 147: __arm void UnlockSched(void);
0520: 0xA0974B41 ; 148: __thumb extern int ShowMSG(int flag, int lgp_id);
0524: 0xA0970645 ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
0528: 0xA096E879 ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA096E7E3 ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
0530: 0xA097068F ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
0534: 0xA09754D5 ; 14D: __thumb GUI *GetTopGUI(void);
0538: 0xA0A153E1 ; 14E: __thumb void *FindItemByID(GUI *gui,int id);
053C: 0xA0A1542D ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
0540: 0xA09FF0F7 ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA09FF64B ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA09746DF ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
054C: 0xA0091808 ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0099180 ; 154: __arm void KillGBSproc(int cepid);
0554: 0xA00E33A0 ; 155: __arm png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA00E1DC8 ; 156: __arm png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA00E48C4 ; 157: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA00E1BCC ; 158: __arm void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA00E3620 ; 159: __arm void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA00E2B58 ; 15A: __arm png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA0119314 ; 15B: __arm png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA00E41A0 ; 15C: __arm void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA00E4200 ; 15D: __arm void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA00E48C4 ; 15E: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
057C: 0xA00E2774 ; 15F: __arm png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
0580: 0xA00E3C34 ; 160: __arm png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
0584: 0xA00E2308 ; 161: __arm png_init_io(png_structp png_ptr, int fp);
0588: 0xA0FC34A8 ; 162: __arm setjmp(jmp_buf jmpbuf);
058C: 0xA0A095BF ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA0A089FD ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA0A08D0D ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA0A0975B ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA0A06385 ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
05A0: 0xA0A0F663 ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
05A4: 0xA0A0F5F9 ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0x00000000 ; 16A: __unknown int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA02516C4 ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber);
05B0: 0xA0251ED4 ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA05627DC ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA05031D4 ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA0504048 ; 16F: __arm int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA0952A75 ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;Handmaded functions
;05C4: ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8: ;172 __arm void REDRAW(void);

#pragma disable old_equal_ff
+0

;SWI_HOOK
00078000: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 1EFF2FE100109DE5200011E3122F8F02
00078010: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0400000AC70050E3B000DE0103E08E02
00078020: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 01E08E1235208FE234109FE5803CC0E3
00078030: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 400D53E30500008A800C10E300402D09
00078040: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0040FD0803C191E704C08D1514208D05
00078050: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0100BDE800F069E10F80FDE81CFF2FE1
00078060: FFFFFFFFFFFFFFFF 60470000004007A0
;Splices
013A3024: 63685F41 048007A0
013A3110: 2C0000EA F4F01FE5

;ElfLoader+ESI+RunElfsByExtention
;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
0x000745C4: 8C9107A0789107A0
;CODE,DATA_C
0x00078100: FE0000EB0100A0E3F081BDE804E02DE5
0x00078110: 00200FE1040000EF00100FE1C01081E3
0x00078120: 01F021E10000A0E10000A0E10000A0E1
0x00078130: 7AFF17EE0000A0E10000A0E10000A0E1
0x00078140: FAFFFF1A0000A0E39A0F07EE0000A0E1
0x00078150: 0000A0E10000A0E10000A0E1150F07EE
0x00078160: 0000A0E10000A0E10000A0E10000A0E1
0x00078170: 02F021E104F09DE400402DE91D0100EF
0x00078180: 0080BDE8FFB5FCB00025ED4302950026
0x00078190: 6B46802211020ADF040001D5280012E1
0x000781A0: 6B46342206A90BDF342805D069462000
0x000781B0: 0DDF0120C04306E106988449884204D0
0x000781C0: 694620000DDF0220F4E706A8808D0B28
0x000781D0: 02D30820C043F6E0002513AF083711E0
0x000781E0: 38000838006801280AD1386802998842
0x000781F0: 00D20290F9684018864201D238684618
0x00078200: 6D1C203706A8808D854224DA05A801B4
0x00078210: 0E9807A9498D01AB0022694341182000
0x00078220: 0FDF0E9907AA528D01B06A4389188842
0x00078230: 04D0694620000DDF0320BBE76B462022
0x00078240: 3900083920000BDF2028C9D069462000
0x00078250: 0DDF0420BEE70298351A280014DF0600
0x00078260: 04D1694620000DDF0D20A3E72900FFF7
0x00078270: 84EF002513A852E001980068012802D0
0x00078280: 022817D089E001980269002A44D08068
0x00078290: 02996B46401A311820000BDF01990969
0x000782A0: 884239D0694620000DDF300015DF0A20
0x000782B0: C04388E00198006914DF070006D16946
0x000782C0: 20000DDF300015DF062073E701986B46
0x000782D0: 0269390020000BDF01990969884208D0
0x000782E0: 694620000DDF380015DF300015DF0720
0x000782F0: 70E7380006E0192903DA42688B0063A9
0x00078300: CA50083001680029F5D1759900200391
0x00078310: 00292BD1380015DF01986D1C20300190
0x00078320: 02984142049106A8808D85423CDA6846
0x00078330: 01B4029801AB4168002220000FDF0299
0x00078340: 496801B0884297D0694620000DDF3000
0x00078350: 15DF05202EE7049913687118CA589C46
0x00078360: 9319029A9A1A6346CA50401C039AC100
0x00078370: 9142CFD2749ABA18521851680906090E
0x00078380: FD29E8D0FF29F0D0694620000DDF3000
0x00078390: 15DF380015DF0C208AE7694620000DDF
0x000783A0: 300015DF0B2005E7694620000DDF00F0
0x000783B0: F9F9049C0C9D7F9B7E9A7D997C987519
0x000783C0: 2C19A04700207FB001B0F0BD7F454C46
0x000783D0: 00B5A0B07E226946A3DF002300221100
0x000783E0: 6846FFF7CFFE20B000BD000010402DE9
0x000783F0: 0040A0E13900A0E3430C80E3540100EF
0x00078400: 10109FE50400A0E1001091E531FF2FE1
0x00078410: 0000A0E11080BDE8009007A010402DE9
0x00078420: 48D04DE240DE4DE20140A0E1D20F8DE2
0x00078430: 1A0000EF74109FE5D20F8DE2170000EF
0x00078440: 0D20A0E1D21F8DE204008DE26B0000EF
0x00078450: 000050E30F00000A0410A0E1D20F8DE2
0x00078460: 1A0000EFB9108DE2D20F8DE2170000EF
0x00078470: 0030A0E30020A0E30210A0E1D20F8DE2
0x00078480: 3FFFFFFA0D10A0E104008DE26C0000EF
0x00078490: 000050E3EFFFFF1A0D10A0E104008DE2
0x000784A0: 6D0000EF48D08DE240DE8DE21080BDE8
0x000784B0: AC8707A030402DE934509FE50040A0E1
0x000784C0: 1F0300EB140085E28C0000EF24009FE5
0x000784D0: 0520A0E10010A0E3710100EF18109FE5
0x000784E0: 0400A0E1001091E531FF2FE10000A0E1
0x000784F0: 3080BDE8B48707A01C8407A0049007A0
0x00078500: 30402DE90010A0E30040A0E10250A0E1
0x00078510: 260100EF030000EAC00051E3D41F81A2
0x00078520: 0400A0E11C0000EF0110D5E4000051E3
0x00078530: F8FFFF1A3080BDE800B5612802DB7B28
0x00078540: 00DA203800BD0000F04F2DE962DF4DE2
0x00078550: 0040A0E30060A0E30450A0E17E20A0E3
0x00078560: 421F8DE2A30000EF420F8DE21B0000EF
0x00078570: 0080B0E10200001A0000A0E362DF8DE2
0x00078580: F08FBDE8800058E3FAFFFF2A420F8DE2
0x00078590: 007088E0010047E2000000EA017047E2
0x000785A0: 011050E42E0051E30200000A018058E2
0x000785B0: F9FFFF1A6D7F8FE2B4019FE50D30A0E1
0x000785C0: 0020A0E30210A0E10A0000EF04008DE5
0x000785D0: 010070E36300000A0D30A0E18020A0E3
0x000785E0: 08108DE20B0000EF0080A0E18090A0E3
0x000785F0: 800058E31200002A08008DE20040C8E7
0x00078600: 1B0000EA000055E33900001A64119FE5
0x00078610: 0100A0E3480100EFD6FFFFEA3A0050E3
0x00078620: 2500001A0150A0E1016046E2090058E1
0x00078630: 1200001A8020A0E388108DE208008DE2
0x00078640: 1E0100EF04009DE50D30A0E18020A0E3
0x00078650: 88108DE20B0000EF0080A0E1800058E3
0x00078660: 0300002A08008DE2000088E08040C0E5
0x00078670: 409FA0E30080A0E3000059E3ECFFFF0A
0x00078680: 08008DE20000D8E7018088E2000050E3
0x00078690: DBFFFF0A08108DE2011088E0FE30A0E3
0x000786A0: FF3C83E3030056E10300000A013083E3
0x000786B0: 030056E1D8FFFF0A040000EA0D0050E3
0x000786C0: 0A005013D8FFFF1A0060A0E3D6FFFFEA
0x000786D0: 0D0050E30A005013FAFFFF0A07A086E0
0x000786E0: 3A0050E30020DA05000052030500001A
0x000786F0: 0150A0E104009DE50D10A0E10D0000EF
0x00078700: 0080A0E3090000EA8AFFFFFA00B0A0E1
0x00078710: 0000DAE587FFFFFA00005BE1FF60A013
0x00078720: FF6C861301608602BFFFFFEA018088E2
0x00078730: 050088E00010D0E5200051E3FAFFFF2A
0x00078740: 0040C0E50030A0E30320A0E1421F8DE2
0x00078750: 0500A0E18AFEFFFA000050E386FFFF0A
0x00078760: 14109FE5A9FFFFEA10109FE5A7FFFFEA
0x00078770: 00000000288807A0F48707A0048807A0
0x00078780: 148807A0054A00B5914203D0044A1268
0x00078790: 904700BD3000FFF7D8EE00BDD11D0000
0x000787A0: 089007A0004B18470C8107A02A2E656C
0x000787B0: 66000000343A5C5A42696E5C4461656D
0x000787C0: 6F6E735C00000000F08707A055000000
0x000787D0: FF439D05448807A04C8807A009010000
0x000787E0: 97010000FBC0FF7FD18307A000000000
0x000787F0: 656C66004E6F7468696E6720746F2072
0x00078800: 756E210043616E27742072756E20454C
0x00078810: 46210000456C66732E657874206E6F74
0x00078820: 20666F756E642100343A5C5A42696E5C
0x00078830: 6574635C657874656E73696F6E2E6366
0x00078840: 67000000F50300000000000039040000
0x00078850: 00000000
;RET_ADRS
0x00079000: 61D42FA037D22FA0334B97A0
;HELPER_PROC,HELPER_PROC_DATA
0x00079100: 00402DE914D04DE20D00A0E1530100EF
0x00079110: 000050E30800000A04009DE5010050E3
0x00079120: 0500001A0C209DE5000052E30200000A
0x00079130: 10109DE508009DE532FF2FE114D08DE2
0x00079140: 0080BDE800402DE920209FE520109FE5
0x00079150: 0000A0E301002DE98030A0E33900A0E3
0x00079160: 430C80E3050100EF04D08DE20080BDE8
0x00079170: 009107A0B49107A000402DE9460100EF
0x00079180: 410100EF470100EF0080BDE800402DE9
0x00079190: 04002DE90030A0E13900A0E3430C80E3
0x000791A0: 0120A0E10110A0E3000100EF04D08DE2
0x000791B0: 0080BDE848454C5045520000
;PATCH_ONCREATE
#pragma disable old_equal_ff
0x0042C938: 37D22FA0 B48407A0
;PATCH_ONCLOSE
0x0042C94C: 61D42FA0 EC8307A0
;PATCH_SHOWMSG_BLF
0x0065B778: 334B97A0 858707A0
;PATCH_TXT_EXT
0x0067FEE8: A19B54A0 488507A0
;PATCH_ESI1
0x00903D0C: AA8701FA 08F09FE5
;PATCH_ESI2
0x00903D1C: 7C25647C 008107A0
;------------------------- end -------------------------

