;S75v42
;Библиотека функций
;Functions Library
;(c) avkiev
;Version: 070126
;PatchID: 4929
;Details: https://patches.kibab.com/patches/details.php5?id=4929
/*
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
В патче собрано 4096 самых часто-используемых функций, переменных и констант.
После применения патча для вызова (например) функции GetWeek достаточно написать "SWI 181".
Для получения в R0 адреса переменной RamCap нужно будет написать "SWI 200". На любом телефоне и на любой прошивке.
После портирования этого патча на определенную прошивку - для портирования других патчей
в большинстве случаев достаточно будет поменять только место врезки.
Для портирования этого патча на другие прошивки используйте Smelter - Инструменты - Библиотека функций.

Патч сгенерирован Smelter'ом на основании последней версии Lib75.ini

English:It is auxiliary patch. It consist of 4096 most useable function, variables and constants.
After applying this patch for calling (for example) GetWeek - you should write "SWI 181".
For getting in R0 address of variable RamCap you sould write "SWI 200". In any mobile. In any firmware.
After porting this patch to some firmware - in most cases for porting another patches you just need to change a EntryPoint.
For porting this patch use Smelter - Tools - Function library.
*/
; S75 v42 lg3 - Patch made by "Smelter" © avkiev

; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Library

;26.01.2007

+0074000
#pragma enable old_equal_ff
0000: 0xA00020F0   ; 00: void loopback0()
0004: 0xA00020F0   ; 01: void loopback1()
0008: 0xA00020F0   ; 02: void loopback2()
000C: 0xA00020F0   ; 03: void loopback3()
0010: 0xA00020F0   ; 04: void loopback4()
0014: 0xA026E0ED   ; 05: DecToHex
0018: 0xA01AA6F8   ; 06: int GetAkku(int param1,int param2)
001C: 0xA006F061   ; 07: GetLP
0020: 0xA01B4C54   ; 08: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0232F6C   ; 09: SwitchPhoneOff
0028: 0xA0251888   ; 0A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0251948   ; 0B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0251A78   ; 0C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA02517DC   ; 0D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA025180C   ; 0E: fflush
003C: 0xA025183C   ; 0F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0251480   ; 10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA02512E0   ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA02515D4   ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ; 14: void *malloc(unsigned int size)
0054: 0xA0094948   ; 15: void mfree(void *)
0058: 0xA0FC14A5   ; 16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FC2F11   ; 17: char *strcat (char *,const char *)
0060: 0xA0FC2F31   ; 18: char *strchr (const char *,int)
0064: 0xA0FC2F54   ; 19: int strcmp (const char *,const char *)
0068: 0xA0FC2FF1   ; 1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FC3071   ; 1B: unsigned int strlen(const char *)
0070: 0xA01F5FF1   ; 1C: void wsAppendChar(void *WSHDR,int wchar)
0074: 0xA01F5FA5   ; 1D: wsInsertChar
0078: 0xA0972FC9   ; 1E: IMGHDR *GetPITaddr(int num)
;07C:              ; 1F: DrawMainScreen

;080:              ; 20: DrawScreenSaver
0084: 0xA09730F3   ; 21: int GetImgHeight(short picture)
0088: 0xA0973103   ; 22: int GetImgWidth(short picture)
008C: 0xA029BE21   ; 23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
;090:              ; 24: DrawImage2
0094: 0xA029B31B   ; 25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA09FF675   ; 26: DrawImgBW
;09C:              ; 27: AddIconToIconbar
;0A0:              ; 28: getEELiteMaxID
;0A4:              ; 29: getEEFullMaxID
00A8: 0xA01E44DC   ; 2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ; 2B: getEELiteBlockSizeVersion
;0B0:              ; 2C: getEEFullBlockSizeVersion
;0B4:              ; 2D: StartWriteEELiteBlock
;0B8:              ; 2E: FinishWriteEELiteBlock
;0BC:              ; 2F: DeleteEELiteBlock

;0C0:              ; 30: WriteEELiteBlock
00C4: 0xA0FC31B9   ; 31: char *strrchr_2(const char *s,int c)
00C8: 0xA028132C   ; 32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0277D08   ; 33: PlaySound2
00D0: 0xA0B34B0C   ; 34: PlaySoundLoop
;0D4:              ; 35: AlarmClockRing
;0D8:              ; 36: GetATCmdString
00DC: 0xA09A2281   ; 37: OriginalATCGSN
;0E0:              ; 38: PostAtCommand
00E4: 0xA08E81CD   ; 39: SendATAnswerStr
;0E8:              ; 3A: mfree_high
00EC: 0xA0FC220D   ; 3B: MemChr
00F0: 0xA0251988   ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ; 3D: editOrNewTXTModule
;0F8:              ; 3E: LoadProcesses
00FC: 0xA096E32D   ; 3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA0289D79   ; 40: GetVibraStatus
0104: 0xA08F9A1F   ; 41: GetProvider
;108:              ; 42: IsScreenSaver
010C: 0xA0901973   ; 43: int IsUnlocked(void)
;110:              ; 44: TempLigntOn
0114: 0xA006F241   ; 45: GetWavLen
;118:              ; 46: HasNewSMS
;11C:              ; 47: HasFlashSMS
;120:              ; 48: ReadNewSMS
;124:              ; 49: ReadFlashSMS
0128: 0xA0279B38   ; 4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0AA5540   ; 4B: StartMidlet
0130: 0xA09B1C21   ; 4C: GetMissedCallsCount
0134: 0xA0093278   ; 4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA0974B5D   ; 4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA0974B6D   ; 4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0974BD7   ; 50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D4F513   ; 51: GetNetAccessMode
0148: 0xA8D07D74   ; 52: char *GetIlluminationDataTable()
014C: 0xA0FC2231   ; 53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02BFF5D   ; 54: StrToInt
;154:              ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
;15C:              ; 57: IsCallAfterTimerStillRunning
0160: 0xA0FC268C   ; 58: void zeromem_2(void *dest,int n)
0164: 0xA0FC2730   ; 59: void *memcpy_2(void *dest,const void *source,int cnt)
;168:              ; 5A: KeypressOn
;16C:              ; 5B: KeypressOff
0170: 0xA01CFB28   ; 5C: unsigned char GetCPUClock()
0174: 0xA033091B   ; 5D: unsigned char GetCPULoad()
;178:              ; 5E: GetMMIMemUsed
017C: 0xA0094BE8   ; 5F: int GetFreeRamAvail()

;180:              ; 60: ShowMainMenu
;184:              ; 61: ShowNativeMenu
0188: 0xA0289D41   ; 62: SetVibraStatus
;18C:              ; 63: MS_Wallpaper_Flush
;190:              ; 64: TriggerUpdate
;194:              ; 65: EndCall
;198:              ; 66: EndCallBusy
;19C:              ; 67: IsDirectCallActive
;1A0:              ; 68: GetScreenSaverRAM
01A4: 0xA009B180   ; 69: void LockSched_2(void)
01A8: 0xA009B26C   ; 6A: void UnlockSched_2(void)
01AC: 0xA0251358   ; 6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA02513D8   ; 6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA02512A0   ; 6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D09179   ; 6E: int IsCalling()
01BC: 0xA094EF3C   ; 6F: void RefreshGPRSTraffic()

01C0: 0xA094EF6C   ; 70: int *GetGPRSTrafficPointer()
;1C4:              ; 71: DrawRoundRect
;1C8:              ; 72: SetCurrentSecondOfCall
01CC: 0xA0D0997B   ; 73: int GetTypeOfCall(int type)
;1D0:              ; 74: GetFunctionPointer
01D4: 0xA0972BC5   ; 75: void StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
;1D8:              ; 76: SetWindowText
;1DC:              ; 77: set2color_byPaletteAdr
;1E0:              ; 78: GetTimeFormat
01E4: 0xA0900B15   ; 79: void DrawObject_2(DRWOBJ *)
;1E8:              ; 7A: ClearWindowBuffer
;1EC:              ; 7B: GetProfileFilter
01F0: 0xA01AF527   ; 7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D08B3B   ; 7D: IsIncognitoCall
01F8: 0xA0D081D9   ; 7E: Rand
01FC: 0xA052B7B1   ; 7F: IsPlayerOn

0200: 0xA05E69ED   ; 80: int ShowCallList(int list, int zero)
0204: 0xA0FC2A84   ; 81: HexToDec
0208: 0xA052B893   ; 82: GetCurrentTrackFilename
;20C:              ; 83: GetPathOfFoundFile
0210: 0xA025164C   ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ; 85: StrCmpNoCase
;218:              ; 86: ReadEEPROMData
;21C:              ; 87: WriteEEPROMData
0220: 0xA022DE80   ; 88: GetAccessoryType
0224: 0xA0903C48   ; 89: GetLangMesIntoWS
0228: 0xA0251230   ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0251AE4   ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04D2A59   ; 8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0300421   ; 8D: GetProfileName
0238: 0xA02514E8   ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA025156C   ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0251A00   ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0251418   ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09E7AF4   ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0232F78   ; 93: RebootPhone
0250: 0xA04D2BF5   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04D2B37   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02A53BF   ; 96: GetWavLenByContent
025C: 0xA006F261   ; 97: CreatePath
0260: 0xA006F211   ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ; 99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ; 9A: int ChangeVolume(unsigned char Volume)
;26C:              ; 9B: RamAudioParamsAddr
;270:              ; 9C: 
0274: 0xA02FCB67   ; 9D: GetMissedEventsPtr
0278: 0xA006F2B1   ; 9E: int GetMissedEventCount(unsigned int Event)
;27C:              ; 9F: DrawRect

0280: 0xA0965BBD   ; A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F5EE3   ; A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ; A2: Unicode_GetCharByPosition
028C: 0xA0251FC8   ; A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0966681   ; A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F569D   ; A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA094EF14   ; A6: void ResetGPRSTraffic()
029C: 0xA0D4337D   ; A7: char IsGPRSEnabled()
02A0: 0xA0D0A339   ; A8: char IsGPRSConnected()
02A4: 0xA090215B   ; A9: void KbdLock()
02A8: 0xA0A0FA81   ; AA: char *GetCurrentLocale()
02AC: 0xA00020F0   ; AB: void loopback171()
;2B0:              ; AC: DrawText
;2B4:              ; AD: StrAnsi2Uni
;2B8:              ; AE: StrUni2Ansi
;2BC:              ; AF: Hex2Int

;2C0:              ; B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
;2C8:              ; B2: GetBuildCanvas
;2CC:              ; B3: Seconds2iTime
02D0: 0xA08FDF2F   ; B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026D0AF   ; B5: char GetWeek(TDate *)
02D8: 0xA0289573   ; B6: char GetProfile()
02DC: 0xA02895D3   ; B7: char SetProfile(char)
02E0: 0xA0FC28A4   ; B8: int dwMODdw(int denom,int number)
02E4: 0xA0901C3F   ; B9: void KbdUnlock()
02E8: 0xA0094B68   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC288C   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC297C   ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FC2A40   ; BD: int DivBy10(int divident)
02F8: 0xA0060C91   ; BE: RunScaner
02FC: 0xA0063001   ; BF: SpellTime

;300:              ; C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
;308:              ; C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
;314:              ; C5: PIT_Manager_Core
0318: 0xA01A6E3C   ; C6: char GetAkkuCapacity()
;31C:              ; C7: SWI_C7
0320: 0xA8D036D6   ; C8: unsigned short *RamCap()
0324: 0xA8D036FA   ; C9: RamLS
0328: 0xA8E2ED7A   ; CA: RAMNET *RamNet()
;32C:              ; CB: RamRingtoneStatus
0330: 0xA8DE9788   ; CC: RamMissedCalls
;334:              ; CD: RamMissedSMS
;338:              ; CE: RamDateTime
;33C:              ; CF: RamAlarm

0340: 0xA8D6A3DC   ; D0: RamAccPoint
;344:              ; D1: RamScreensaver
;348:              ; D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
0350: 0xA8DD33F0   ; D4: RamMissedMes
;354:              ; D5: RamIsLocked
;358:              ; D6: RamNetOnline
035C: 0xA8DADD10   ; D7: RamScreenBrightness
;360:              ; D8: RamMenuAnywhere
;364:              ; D9: RamShutdownMode
;368:              ; DA: RamIsShutdown
;36C:              ; DB: RamMainscreenAccuIcon
;370:              ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA8D77FF8   ; DE: RamIsSimPresent
037C: 0xA8D34F7C   ; DF: RamPressedKey

0380: 0xA8D29990   ; E0: RamScreenBuffer
0384: 0xA8E3EB08   ; E1: unsigned int RamMPlayer_CtrlCode()
;388:              ; E2: RamKeyBuffer
;38C:              ; E3: RamProfileNum
0390: 0xA8000000   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000260   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
;3AC:              ; EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B0   ; EF: Pic_Calendar

03C0: 0x00001200   ; F0: Pic_AccuGraph
;3C4:              ; F1: void *BuildCanvas()
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
;3D4:              ; F5: 
;3D8:              ; F6: 
;3DC:              ; F7: 
;3E0:              ; F8: Additional_PIT_address
;3E4:              ; F9: Additional_PIT_start
;3E8:              ; FA: Additional_PIT_end
;3EC:              ; FB: 
;3F0:              ; FC: PictureRelocationTable
;3F4:              ; FD: PictureRelocationBase
;3F8:              ; FE: NextPictureMagic
03FC: 0xA0074000   ; FF: AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB99B0   ; 106: CSMROOT *CSM_root()
041C: 0xA096CCDF   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA096CCF1   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA096CDAD   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029A45D   ; 10F: void freeUSSD()

0440: 0xA026E4C5   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029A499   ; 111: char GetTypeUSSD()
0448: 0xA029A4A9   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FC3041   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FC30BD   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC30ED   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC313D   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC31B9   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FC31D1   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FC31F9   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC3275   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC1451   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FC2231   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FC268C   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FC2730   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F5EE3   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F5F05   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F5F29   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F5F5D   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F576B   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA0965BBD   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA0966681   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F6155   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F5D73   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F5DED   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F569D   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0900B15   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA096CE89   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA096CE91   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA096CE99   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA096E32D   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA096E351   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA096E361   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA096E37F   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC27E9   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0972BC5   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA0972BDB   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA09754C7   ; 135: int IsGuiOnTop(int id)
04D8: 0xA09755EB   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA09755FB   ; 137: int CreateGUI(void *gui)
04E0: 0xA0975609   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA0975643   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0975653   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0975663   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA0975671   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA097567F   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA097568F   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0975723   ; 13F: void DirectRedrawGUI(void)

0500: 0xA097573B   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA097572F   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FD21F   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA0974B41   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA0970645   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA096E879   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA096E7E3   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA097068F   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA09754D5   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A153E1   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A1542D   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA09FF0F7   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,char *pen,char *brush)
0544: 0xA09FF64B   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA09746DF   ; 152: int CreateMenu(int is_small, int zero1, const MENU_DESC *menu, const HEADER_DESC *hdr, int zero2, int n_items, int zero4, int zero5)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136969   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D25   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377DD   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135BF9   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AA7   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0136381   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136727   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0137397   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373D9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA013601D   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0136297   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F2F   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2308   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC34A8   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A095BF   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A089FD   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A08D0D   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A0975B   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A06385   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A0F663   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A0F5F9   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A0F605   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA02516C4   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0251ED4   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05627DC   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA05031D4   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0504048   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0952A75   ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A46875   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A46D6D   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A46B71   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A470A1   ; 176: int closesocket(int socket)
05DC: 0xA0A46FA9   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A47193   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A47601   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A4E33D   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A4E349   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E25C04   ; 17C: int *socklasterr(void)
05F4: 0xA097569F   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA09756AF   ; 17E: void RestartIDLETMR(void)
05FC: 0xA09756BB   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A0F4FD   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A0F455   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A0F49D   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A0EEED   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A08D47   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA098E879   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA098F989   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F36D4   ; 18D: int available0(int sock)
0638: 0xA0D43317   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0978E3F   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097A5A9   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA09757B1   ; 196: void RefreshGUI(void)
065C: 0xA097A609   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA097A721   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097A57B   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0979F1B   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A0EEE1   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D0358   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D02FC   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325CD   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0132703   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013353F   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA09576C9   ; 1A7: char *Get_CC_NC()
06A0: 0xA013682D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013787F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136EF7   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0137999   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0136285   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0137999   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394A5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA013797D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA013943B   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379D1   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C59   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A00F67   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA09FEFC3   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
;6D4:              ; 1B5: 
06D8: 0xA0A48075   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA09985F9   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F4184F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F41533   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F4172F   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E8DCF9   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E8DD87   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E8DF53   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E8A4EB   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0976DCD   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0976D35   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A24BF8   ; 1C5: int GetFontYSIZE(int font)
;718:              ; 1C6: 
;71C:              ; 1C7: 
;720:              ; 1C8: 
;724:              ; 1C9: 
;728:              ; 1CA: 
;72C:              ; 1CB: 
;730:              ; 1CC: 
;734:              ; 1CD: 
;738:              ; 1CE: 
;73C:              ; 1CF: 

;740:              ; 1D0: 
;744:              ; 1D1: 
;748:              ; 1D2: 
;74C:              ; 1D3: 
;750:              ; 1D4: 
;754:              ; 1D5: 
;758:              ; 1D6: 
;75C:              ; 1D7: 
;760:              ; 1D8: 
;764:              ; 1D9: 
;768:              ; 1DA: 
;76C:              ; 1DB: 
;770:              ; 1DC: 
;774:              ; 1DD: 
;778:              ; 1DE: 
;77C:              ; 1DF: 

;780:              ; 1E0: 
;784:              ; 1E1: 
;788:              ; 1E2: 
;78C:              ; 1E3: 
;790:              ; 1E4: 
;794:              ; 1E5: 
;798:              ; 1E6: 
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: 
;7E8:              ; 1FA: 
;7EC:              ; 1FB: 
07F0: 0xA8D34F38   ; 1FC: char *RamIsMainScreen()
07F4: 0xA090166D   ; 1FD: char IsNumberTyping()
07F8: 0xA8D07FD7   ; 1FE: char *RamLighterPower()
07FC: 0xA032C317   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

