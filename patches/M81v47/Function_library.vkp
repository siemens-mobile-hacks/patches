;M81v47
;Библиотека функций
;Functions library
;(c) avkiev
;(p) Smelter
;Version: 080904
;PatchID: 9296
;Details: https://patches.kibab.com/patches/details.php5?id=9296
/*
Добавил OBS-функции вручную, кое-что подправил...
*/
; M81 v47 lg1 - Patch made by "Smelter" © avkiev
;Library

;09.04.2008

+0074000
#pragma enable  old_equal_ff
0000: 0xA0002040   ;   0: void loopback0()
0004: 0xA0002040   ;   1: void loopback1()
0008: 0xA0002040   ;   2: void loopback2()
000C: 0xA0002040   ;   3: void loopback3()
0010: 0xA0002040   ;   4: void loopback4()
0014: 0xA026EDF1   ;   5: DecToHex
0018: 0xA01ABED4   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B6438   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0233A68   ;   9: void SwitchPhoneOff()
0028: 0xA02523A4   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0252464   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0252594   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA02522F8   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038:              ;   E: 
003C: 0xA0252358   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0251F9C   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0251DFC   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA02520F0   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FF87CD   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FFA239   ;  17: char *strcat (char *,const char *)
0060: 0xA0FFA259   ;  18: char *strchr (const char *,int)
0064: 0xA0FFA27C   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FFA319   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FFA399   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F6DC5   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F6D79   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA096B545   ;  1E: IMGHDR *GetPITaddr(int num)
07C:  0xA0303343   ;  1F: DrawMainScreen

080:  0xA050F9E1   ;  20: DrawScreenSaver
0084: 0xA096B66F   ;  21: int GetImgHeight(int picture)
0088: 0xA096B67F   ;  22: int GetImgWidth(int picture)
008C: 0xA029C795   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
090:  0xA09FF3E3   ;  24: DrawImage2
0094: 0xA029BCF7   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA09FF30D   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029BF1D   ;  27: AddIconToIconbar
00A0: 0xA102C488   ;  28: double fp_sint2fp(signed int i)
;0A4:              ;  29: 
00A8: 0xA01E52B0   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA102C328   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA01E4990   ;  2C: int EEFullGetBlockInfo(unsigned int block,int *size,char *version)
00B4: 0xA102B6E8   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA102C648   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA102BCFC   ;  2F: double fp_div(double divisor, double divident)

;0C0:              ;  30: 
00C4: 0xA0FFA4E1   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0282040   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0278A20   ;  33: PlaySound2
00D0: 0xA0B5BE14   ;  34: void PlaySoundLoop(int _0x2F, int param2, int duration)
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA027BE18   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA0556A93   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA05566A5   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA0554637   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FF9535   ;  3B: MemChr
00F0: 0xA02524A4   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA0556131   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA09668A9   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028AAB9   ;  40: GetVibraStatus
0104: 0xA090BD27   ;  41: GetProvider
0108: 0xA03043AB   ;  42: int IsScreenSaver()
010C: 0xA0913C83   ;  43: int IsUnlocked(void)
0110: 0xA090DDA5   ;  44: TempLightOn
0114: 0xA006F241   ;  45: int GetWavLen(char *filename)
;118:              ;  46: int HasNewSMS()
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA027A850   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0ABE784   ;  4B: StartMidlet
0130: 0xA09B1859   ;  4C: int GetMissedCallsCount()
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA096D0E9   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA096D149   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA096D153   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D55557   ;  51: GetNetAccessMode
0148: 0xA8D87CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA000AE85   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C4885   ;  54: int StrToInt(char *s, char **endp)
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FF99B4   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FF9A58   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA091354D   ;  5A: KeypressOn(int key)
016C: 0xA091365F   ;  5B: KeypressOff(int key)
0170: 0xA033BED9   ;  5C: unsigned char GetCPUClock()
0174: 0xA033BF13   ;  5D: unsigned char GetCPULoad()
0178: 0xA033BEE1   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA0337ADD   ;  60: ShowMainMenu
0184: 0xA02D0F57   ;  61: ShowNativeMenu
0188: 0xA028AA81   ;  62: SetVibraStatus
018C: 0xA029D515   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
;190:              ;  64: TriggerUpdate
194:  0xA09B3EC0   ;  65: EndCall
198:  0xA09B2E4E   ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0251E74   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0251EF4   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0251DBC   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D28685   ;  6E: int IsCalling()
01BC: 0xA0947530   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0947560   ;  70: int *GetGPRSTrafficPointer()
1C4:  0xA09FED8F   ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0D28E87   ;  73: int GetTypeOfCall(int type)
;1D0:              ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029DA2D   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA029D9DD   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA09116C9   ;  78: GetTimeFormat
01E4: 0xA0912DF9   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B0CD3   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D28047   ;  7D: IsIncognitoCall
01F8: 0xA0D27701   ;  7E: int rand(void)
01FC: 0xA054C301   ;  7F: IsPlayerOn

0200: 0xA05FE2E9   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FF9DAC   ;  81: HexToDec
0208: 0xA054C3E3   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0252168   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA026F119   ;  85: int strcmpi(const char *s1, const char *s2)
0218: 0xA01E47C8   ;  86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA01E4A34   ;  87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
;220:              ;  88: char GetAccessoryType(void)
0224: 0xA0915F58   ;  89: GetLangMesIntoWS
0228: 0xA0251D4C   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0252600   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04E6D31   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA030299B   ;  8D: GetProfileName
0238: 0xA0252004   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252088   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA025251C   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0251F34   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09E777C   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0233A74   ;  93: void RebootPhone()
0250: 0xA04E6ECD   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04E6E0F   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02AA4FF   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA0304891   ;  9C: CloseScreensaver
0274: 0xA02FF02B   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA095E1CD   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F6CB7   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA0252AE4   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA095EC91   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6471   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA0947508   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D493C1   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D29845   ;  A8: char IsGPRSConnected()
02A4: 0xA091446B   ;  A9: void KbdLock()
02A8: 0xA0A0F719   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002040   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA033BCDD   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA091023F   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026DDB3   ;  B5: char GetWeek(TDate *)
02D8: 0xA028A287   ;  B6: char GetProfile()
02DC: 0xA028A2E7   ;  B7: char SetProfile(char)
02E0: 0xA0FF9BCC   ;  B8: int sdiv(int denom,int number)
02E4: 0xA0913F4F   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA000AF28   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FF9CA4   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FF9D68   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: void SpellTime()

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: void *GetBuffer(int patch_id)
0314: 0xA02FEFD3   ;  C5: char IsIdleUiOnTop()
0318: 0xA01A8620   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D836D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D836FA   ;  C9: unsigned short *RamLS()
0328: 0xA8EAD9EA   ;  CA: RAMNET *RamNet()
032C: 0xA8DF796C   ;  CB: RamRingtoneStatus
0330: 0xA8E6847C   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8DA8504   ;  CE: RamDateTime
033C: 0xA8F12470   ;  CF: char *RamAlarm()

;340:              ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348: 0xA8D98560   ;  D2: RamAutoTime
034C: 0xA8000000   ;  D3: RamStby
0350: 0xA8E520E4   ;  D4: char *RamMissedMes()
0354: 0xA8DB3CA4   ;  D5: RamIsLocked
0358: 0xA8E2B93C   ;  D6: RamNetOnline
035C: 0xA8E2CA18   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: 
0368: 0xA8DEBA94   ;  DA: RamIsShutdown
;36C:              ;  DB: RamMainscreenAccuIcon
0370: 0xA8E4BAA4   ;  DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8DF6CF8   ;  DE: RamIsSimPresent
037C: 0xA8DB3C7C   ;  DF: char *RamPressedKey()

0380: 0xA8DA8690   ;  E0: char *RamScreenBuffer()
0384: 0xA8EBD760   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xAC000000   ;  E4: void *FreeRAM()
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA030171D   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8DA85E4   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E2D05C   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E386B8   ; 106: CSMROOT *CSM_root()
041C: 0xA096525B   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA096526D   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA0965329   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029AE19   ; 10F: void freeUSSD()

0440: 0xA026F1C9   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029AE55   ; 111: char GetTypeUSSD()
0448: 0xA029AE65   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FFA369   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FFA3E5   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FFA415   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FFA465   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FFA4E1   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FFA4F9   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FFA521   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FFA59D   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FF8779   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA000AE85   ; 11C: int memcmp(const void *m1, const void *m2, int n)
0474: 0xA0FF99B4   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FF9A58   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F6CB7   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F6CD9   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F6CFD   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F6D31   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F653F   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA095E1CD   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA095EC91   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F6F29   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F6B47   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F6BC1   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6471   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0912E25   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA0965405   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA096540D   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA0965415   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA09668A9   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA09668CD   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA09668DD   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA09668FB   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FF9B10   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA096B141   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA096B157   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA096DA43   ; 135: int IsGuiOnTop(int id)
04D8: 0xA096DB67   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA096DB77   ; 137: int CreateGUI(void *gui)
04E0: 0xA096DB85   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA096DBBF   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA096DBCF   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA096DBDF   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA096DBED   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA096DBFB   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA096DC0B   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA096DC9F   ; 13F: void DirectRedrawGUI(void)

0500: 0xA096DCB7   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA096DCAB   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FCEB7   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA096D0CB   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA0968BC1   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0966DF5   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0966D5F   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)
0530: 0xA0968C0B   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA096DA51   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A15079   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A150C5   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA09FED8F   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA09FF2E3   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)
0548: 0xA096CC5B   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136969   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D25   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377DD   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135BF9   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AA7   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0136381   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136727   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0137397   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373D9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA013601D   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0136297   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F2F   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2308   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FFA7D0   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A09257   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A08695   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A089A5   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A093F3   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A0601D   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A0F2FB   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)
05A4: 0xA0A0F291   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A0F29D   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA02521E0   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA02529F0   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA058336C   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA05157B8   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA051662C   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA094B069   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A46511   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A46A09   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A4680D   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A46D3D   ; 176: int closesocket(int socket)
05DC: 0xA0A46C45   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A46E2F   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A4729D   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A4DF0D   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A4DF19   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EA4874   ; 17C: int *socklasterr(void)
05F4: 0xA096DC1B   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA096DC2B   ; 17E: void RestartIDLETMR(void)
05FC: 0xA096DC37   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A0F195   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A0F0ED   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A0F135   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A0EB85   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A089DF   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0986E31   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0987F41   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F336C   ; 18D: int available0(int sock)
0638: 0xA0D4935B   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA09713BB   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0972B25   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA096DD2D   ; 196: void RefreshGUI(void)
065C: 0xA0972B85   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0972C9D   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0972AF7   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0972497   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A0EB79   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D112C   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D10D0   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325CD   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0132703   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013353F   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int csd_or_gprs)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA094FCBD   ; 1A7: char *Get_CC_NC()
06A0: 0xA013682D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013787F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136EF7   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0137999   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0136285   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0137999   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394A5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA013797D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA013943B   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379D1   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C59   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A00BFF   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA09FEC5B   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0A47D11   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0990BB1   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F3C19F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3BE83   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3C07F   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E84D45   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E84DD3   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E84F9F   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E81537   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA096F349   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA096F2B1   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A24894   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A0F11D   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A0F129   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A095A9   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A0862F   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A08623   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A08617   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A08601   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A085E9   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A086D1   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA04E6B57   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA04E6A0F   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A0F2BD   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A0F2C9   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A0F165   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A0F171   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DEC74   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0137999   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139507   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A0F1C5   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A0F1DC   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0558825   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F06B80   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F663B   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F665D   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A0F285   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A0F333   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA09747EF   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0912F29   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F720D   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F72C5   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
0790: 0xA096BF5F   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A0F3E5   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA0971875   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0AEF894   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA09FA408   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA096BC13   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8E4BF6A   ; 1EB: char *RAM_IMSI()
07B0: 0xA096BC17   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA096BD77   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA096BC79   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DE800   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8E4C330   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FF9E1D   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA096BDC3   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA054C26D   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D859AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9F678   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA0965363   ; 1FC: void CloseCSM(int id)
07F4: 0xA09FEC3F   ; 1FD: SetProp2Square_v2
07F8: 0xA8D87F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA0337917   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA09FF409   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A053CB   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A00AAF   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA09FDAC7   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA09FEC19   ; 205: SetProp2Square_v1
0818: 0xA0FF98D9   ; 206: void srand(unsigned int seed)
081C: 0xA0A04CBF   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA0912F47   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA09652A1   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A0F219   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A0F231   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A0F249   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A0F261   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A0895F   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A08845   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA096DA3D   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01F6D59   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA01F6DE9   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA095E267   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA062BA2D   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA0975A8F   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA0975EB7   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA0A0F351   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0A0F35D   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0A0F399   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA0949581   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA096DC77   ; 21E: void FocusGUI(int id)
087C: 0xA096DC87   ; 21F: void UnfocusGUI(void)

;880:              ; 220: IsSliderClosed
0884: 0xA01D08DC   ; 221: void SetCpuClockLow
0888: 0xA01D08C4   ; 222: void SetCpuClockTempHi
;88C:              ; 223: IsMediaPlayerInBackground
;890:              ; 224: CloseMediaPlayer
0894: 0xA027B16C   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA027BBDC   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA027BC7C   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA027BCAC   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FFA7F8   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA0951105   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA02D55E5   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02D4ED7   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02D4FD5   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA054905B   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8DA8554   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA09101CD   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8DA84FC   ; 231: TAppointment *RamAppointment
08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA061BADF   ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar()
08E0: 0xA09510AF   ; 238: void SendAutoUSSDack(void)
08E4: 0xA01E4E2C   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA01E4F98   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC:              ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA0F38F19   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0F38B89   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0F38E21   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0F398A9   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA09103EB   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0E71C71   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0E71D21   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA05B152F   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA0997CB1   ; 247: NetOff()
0920: 0xA8D86BCE   ; 248: char *RamFormatTrack()
0924: 0xA8D86E36   ; 249: char *RamFreq()
0928: 0xA8D86FEE   ; 24A: char *RamChannel()
092C: 0xA0973087   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02EDB7D   ; 24C: int GetPeripheryState(int device, int check_state)
0934: 0xA027BCDC   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA02CA2C4   ; 24E: void *GetPlayObjById(int handle)
093C: 0xA0929604   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA092939C   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
094C: 0xA8E63BAA   ; 253: char *RamLastCallNum()
0950: 0xA054907F   ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA09747EB   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xA05C6C77   ; 256: isSetupTheme()
095C: 0xA0935061   ; 257: isSendReceiveFile()
0960: 0xA096B609   ; 258: int CalcBitmapSize(short w,short h, char typy)
0964: 0xA099FB1C   ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA0B95390   ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA099DB00   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0A63FE8   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA0A64164   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA092C490   ; 25E: int Obs_Start(HObj hObj)
097C: 0xA0A652DC   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)

0980: 0xA0A64E9C   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0A648AC   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA092C0F0   ; 262: int Obs_GetInfo(HObj hObj, int unk_0or1)
098C: 0xA0A64658   ; 263: intObs_SetScaling(HObj hObj, int unk5)
0990: 0xA09A119C   ; 264: int Obs_TranslateMessageGBS(GBS_MSG *msg, OBSevent *event_handler)
994:  0xA092C7E4   ; 265: int Obs_Pause(HObj hObj)
998:  0xA092CB40   ; 266: int Obs_Resume(HObj hObj)
99C:  0xA092C96C   ; 267: int Obs_Stop(HObj hObj)
9A0:  0xA092C304   ; 268: int Obs_Prepare(HObj hObj)
;9A4:              ; 269: int Obs_SetRenderOffset(HObj hObj,short x,short y)
9A8:  0xA0929540   ; 26A: int Obs_SetPosition(HObj hObj,int ms)
9AC:  0xA0A5C9AC   ; 26B: int Obs_Mam_SetPurpose(HObj hObj,int ms)
9B0:  0xA0A5C494   ; 26C: int Obs_Sound_SetVolumeEx(HObj hObj, char vol, char delta)
;9B4:              ; 26D: int Obs_Sound_GetVolume(HObj hObj, char *vol)
0A04: 0xA8E6F00C   ; 281: char *RamIsRunJava()
0A08: 0xA8E523D0   ; 282: char *RamIsRunCamera()
0A0C: 0xA054532D   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0D49343   ; 284: int IsGPRS()
0A14: 0xA0D4934B   ; 285: int IsEDGE()
0A18: 0xA0D407FB   ; 286: int GetSMSState()
0A1C: 0xA02D5EBF   ; 287: int BT_GetLocVisibility()
0A20: 0xA03490B5   ; 288: int GetCurrAudioPath()
0A24: 0xA0DA81DD   ; 289: int isDecryption()

#pragma disable old_equal_ff
+0

;********************************************************************************



;locale=Russian_Russia.1251
;------------------------- end -------------------------

