;S75v40
;ELFpack
;ELFpack
;(c) Rst7/CBSIE, BoBa
;Version: 2.0
;PatchID: 5894
;Details: https://patches.kibab.com/patches/details.php5?id=5894
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=s75v40&f=ELFpack__v2_0.zip

/*
Также бибилиотека для патчей

+ Загрузка всех .elf-файлов из каталога 4:\ZBin\Daemons

+ Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
 Обрабатывается при помощи ExtD.elf - необходим в каталоге 4:\ZBin\Daemons по файлу 4:\ZBin\etc\extension.cfg. Формат файла:
; >>>>---
; ;Это комментарий, он начинается с символа ;
; 
; ;Универсальные для тех, у кого не указано какое-либо поле
; 
; RUN=4:\ZBin\TED\TED.elf
; SMALL=4:\ZBin\img\UNK_SMALL.png
; BIG=4:\ZBin\img\UNK_LARGE.png
; ALTRUN=4:\ZBin\TED\TED.elf
; 
; ;первый, расширение txt очень желательно указывать, т.к. по нему открываются неизвестные файлы
; [txt]
; SMALL=4:\ZBin\img\TXT_SMALL.png
; BIG=4:\ZBin\img\TXT_LARGE.png
; 
; ;второй
; [bcfg]
; RUN=4:\ZBin\utilities\CfgEdit.elf
; SMALL=4:\ZBin\img\BCFG_SMALL.png
; BIG=4:\ZBin\img\BCFG_LARGE.png
; 
; ; и т.д.
; 
; ; если поле не указано, то оно берется из первых
; ---<<<<<

+ Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив ММС.zip с сохранением путей.

+ Расширение таблицы регистрации расширений файлов

+ Очередной перенос HELPER_PROC на cepid=440A для более корректной работы с жабой

+ Расширение PIT при помощи .png файлов
 Обрабатываются файлы из каталога 4:\ZBin\img\ с именами %d.png для замены штатных картинок или из эльфов - указатель на строку с именем файла вместо ID (аналогично ESI)


Release 25.01.2007
*/
+0074000
#pragma enable old_equal_ff
;Generated by PATSearchNT by BoBa v0.4
0000: 0xA00020F0 ; 000: __arm void loopback0();
0004: 0xA00020F0 ; 001: __arm void loopback1();
0008: 0xA00020F0 ; 002: __arm void loopback2();
000C: 0xA00020F0 ; 003: __arm void loopback3();
0010: 0xA00020F0 ; 004: __arm void loopback4();
0018: 0xA01AA3FC ; 006: __arm int GetAkku(int param1,int param2);
0020: 0xA01B4958 ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0028: 0xA025127C ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
002C: 0xA025133C ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0030: 0xA025146C ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA02511D0 ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
003C: 0xA0251230 ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);
0040: 0xA0250E74 ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
0048: 0xA0250CD4 ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
004C: 0xA0250FC8 ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
0050: 0xA0094B5C ; 014: __arm void *malloc(unsigned int size);
0054: 0xA0094948 ; 015: __arm void mfree(void *);
0058: 0xA0FC4385 ; 016: __thumb int sprintf(char *buf, char *str, ...);
005C: 0xA0FC5DF1 ; 017: __thumb char * strcat (char *,const char *);
0060: 0xA0FC5E11 ; 018: __thumb char * strchr (const char *,int);
0064: 0xA0FC5E34 ; 019: __arm int  strcmp (const char *,const char *);
0068: 0xA0FC5ED1 ; 01A: __thumb char * strcpy (char *dest,const char *source);
006C: 0xA0FC5F51 ; 01B: __thumb unsigned int strlen(char *);
0070: 0xA01F5BCD ; 01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);
0078: 0xA0975D35 ; 01E: __thumb IMGHDR *GetPITaddr(int num);
008C: 0xA029B7E1 ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
0094: 0xA029ACDB ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
00A8: 0xA01E4190 ; 02A: __arm int *GetEELiteBlockAddress(short blocknum);
00C8: 0xA0280D20 ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
00F0: 0xA025137C ; 03C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);
010C: 0xA09007BB ; 043: __thumb int IsUnlocked(void);
0130: 0xA09B4959 ; 04C: GetMissedCallsCount
0134: 0xA0093278 ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
0170: 0xA01CF82C ; 05C: __arm char GetCPUClock();
0174: 0xA0331C37 ; 05D: __thumb char GetCPULoad();
017C: 0xA0094BE8 ; 05F: __arm int GetFreeRamAvail();
01AC: 0xA0250D4C ; 06B: __arm int FindFirstFile (void *DIRENTRY,char *mask,int *ErrorNumber);
01B0: 0xA0250DCC ; 06C: __arm int FindNextFile (void *DIRENTRY,int *ErrorNumber);
01B4: 0xA0250C94 ; 06D: __arm int FindClose (void *DIRENTRY,int *ErrorNumber);
01BC: 0xA0951CA8 ; 06F: __arm void RefreshGPRSTraffic();
01C0: 0xA0951CD8 ; 070: __arm int *GetGPRSTrafficPointer();
01F0: 0xA01AF22B ; 07C: __thumb unsigned SetVibration(unsigned int power);
0200: 0xA05E212D ; 080: __thumb void ShowCallList(int list, int zero);
0210: 0xA0251040 ; 084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
0228: 0xA0250C24 ; 08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
022C: 0xA02514D8 ; 08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
0230: 0xA04D48A9 ; 08C: __thumb void RegExplorerExt(REGEXPLEXT *);
0238: 0xA0250EDC ; 08E: __arm int fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber);
023C: 0xA0250F60 ; 08F: __arm int rmdir(const char * cDirectory, unsigned int *ErrorNumber);
0240: 0xA02513F4 ; 090: __arm int truncate(int FileHandler, int length, int *errornumber);
0244: 0xA0250E0C ; 091: __arm int isdir(const char * cDirectory, unsigned int *ErrorNumber);
0248: 0xA09EA7B0 ; 092: __arm void *calloc(size_t nelem, size_t elsize);
0250: 0xA04D4A45 ; 094: __thumb int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
0254: 0xA04D4987 ; 095: __thumb int UnRegExplorerExt(REGEXPLEXT const *);
028C: 0xA02519BC ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
0298: 0xA0951C80 ; 0A6: __arm void ResetGPRSTraffic();
02A8: 0xA0A12479 ; 0AA: __thumb char *GetCurrentLocale();
02AC: 0xA00020F0 ; 0AB: __arm void loopback171();
02D0: 0xA08FCD77 ; 0B4: __thumb void GetDateTime(TDate *, TTime *);
02D4: 0xA026CAA3 ; 0B5: __thumb char GetWeek(TDate*);
02D8: 0xA0288F27 ; 0B6: __thumb char GetProfile();
02DC: 0xA0288F87 ; 0B7: __thumb char SetProfile(char);
02E0: 0xA0FC5784 ; 0B8: __arm int dwMODdw(int denom,int number);
029C: 0xA0D42E89 ; 0A7: __thumb char IsGPRSEnabled();
02A0: 0xA0D09EFD ; 0A8: __thumb char IsGPRSConnected();
02A4: 0xA0900FA3 ; 0A9: __thumb void KbdLock();
02E4: 0xA0900A87 ; 0B9: __thumb void KbdUnlock();
02E8: 0xA0094B68 ; 0BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA0FC576C ; 0BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0FC585C ; 0BC: __arm int divide(int divisor, int dividend);
02F4: 0xA0FC5920 ; 0BD: __arm int DivBy10(int divident);
0318: 0xA01A6B40 ; 0C6: __arm char GetAkkuCapacity();
0400: 0xA0092A94 ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
0404: 0xA0091950 ; 101: __arm int GBS_ReciveMessage(GBS_MSG *);
0408: 0xA009209C ; 102: __arm void GBS_AcceptMessage(void);
040C: 0xA0091DA4 ; 103: __arm void GBS_ClearMessage(void);
0410: 0xA0091F88 ; 104: __arm void GBS_PendMessage(GBS_MSG *);
0414: 0xA0092F40 ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero);
0418: 0xA8DB99B0 ; 8106: __arm CSMROOT *CSM_root();
041C: 0xA096FA4B ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int);
0420: 0xA096FA5D ; 108: __thumb CSM_RAM * FindCSMbyID (void *csm_q,int id);
0424: 0xA096FB19 ; 109: __thumb void DoIDLE(void);
;0428: 0x00000000 ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0xA0030000 ; 810B: __arm void *GetMinAdrScan(); //BoBaPack
0430: 0xA0040000 ; 810C: __arm void *GetMaxAdrScan(); //BoBaPack
0434: 0x00000000 ; 810D: __unknown unsigned short *GetCI();
;0438: 0x00000000 ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack
043C: 0xA0299E1D ; 10F: __thumb void freeUSSD();
0440: 0xA026DEB9 ; 110: __thumb char *wstrcopy(char *dst, char *src);
0444: 0xA0299E59 ; 111: __thumb char GetTypeUSSD();
0448: 0xA0299E69 ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA0FC5F21 ; 113: __thumb char * strpbrk (const char *s1,const char *s2);
0450: 0xA0FC5F9D ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
0454: 0xA0FC5FCD ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n);
0458: 0xA0FC601D ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
045C: 0xA0FC6099 ; 117: __thumb char * strrchr (const char *s,int c);
0460: 0xA0FC60B1 ; 118: __thumb char * strstr (const char *s1,const char *s2);
;0464: 0xA0FC60D9 ; 119: __thumb int  strtol (const char *nptr,char **endptr,int base);
;0468: 0xA0FC6155 ; 11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
046C: 0xA0FC4331 ; 11B: __thumb int snprintf (char *,int n,const char *format,...);
0470: 0xA0018941 ; 11C: __thumb int  memcmp (void *m1,void *m2,int n);
0474: 0xA0FC556C ; 11D: __arm void  zeromem (void *dest,int n);
0478: 0xA000B228 ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA01F5ABF ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
0480: 0xA01F5AE1 ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
0484: 0xA01F5B05 ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA01F5B39 ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA01F541F ; 123: __thumb int  wstrlen (WSHDR *wshdr);
0490: 0xA0968929 ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);
0494: 0xA09693ED ; 125: __thumb WSHDR * AllocWS (int len);
0498: 0xA01F5D31 ; 126: __thumb void  CutWSTR (void *WSHDR,int len);
049C: 0xA01F594F ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
04A0: 0xA01F59C9 ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
04A4: 0xA01F5351 ; 129: __thumb void  FreeWS (WSHDR *wshdr);
04A8: 0xA08FF95D ; 12A: __thumb void  DrawObject (DRWOBJ *);
04AC: 0xA096FBF5 ; 12B: __thumb void  AddKeybMsgHook (void *proc);
04B0: 0xA096FBFD ; 12C: __thumb void  AddKeybMsgHook_end (void *proc);
04B4: 0xA096FC05 ; 12D: __thumb void  RemoveKeybMsgHook (void *proc);
04B8: 0xA0971099 ; 12E: __thumb void *GetPaletteAdrByColorIndex (int ColorIndex);
04BC: 0xA09710BD ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);
04C0: 0xA09710CD ; 130: __thumb void  getRGBbyPaletteAdr (void *paletteAdr,void *dest);
04C4: 0xA09710EB ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
04C8: 0xA0FC56C8 ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA0975931 ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
04D0: 0xA0975947 ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
04D4: 0xA0978233 ; 135: __thumb int  IsGuiOnTop (int id);
04D8: 0xA0978357 ; 136: __thumb int  CreateGUI_ID (void *gui,int id);
04DC: 0xA0978367 ; 137: __thumb int  CreateGUI (void *gui);
04E0: 0xA0978375 ; 138: __thumb int  CreateGUI_30or2 (void *gui);
04E4: 0xA09783AF ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
04E8: 0xA09783BF ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
04EC: 0xA09783CF ; 13B: __thumb void  GeneralFuncF1 (int cmd);
04F0: 0xA09783DD ; 13C: __thumb void  GeneralFuncF0 (int cmd);
04F4: 0xA09783EB ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
04F8: 0xA09783FB ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);
04FC: 0xA097848F ; 13F: __thumb void DirectRedrawGUI (void);
0500: 0xA09784A7 ; 140: __thumb void  DirectRedrawGUI_ID (int id);
0504: 0xA097849B ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA09FFC17 ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
050C: 0xA0093318 ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA009B820 ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);
0514: 0xA0099208 ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA009B180 ; 146: __arm void LockSchedNoTskContext (void);
051C: 0xA009B26C ; 147: __arm void UnlockSchedNoTskContext (void);
0520: 0xA09778BB ; 148: __thumb int ShowMSG(int flag, int lgp_id);
0524: 0xA09733B1 ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
0528: 0xA09715E5 ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA097154F ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int color1, int color2);
0530: 0xA09733FB ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int Pen,int Brush);
0534: 0xA0978241 ; 14D: __thumb GUI *GetTopGUI(void);
0538: 0xA0A17DD9 ; 14E: __thumb void *FindItemByID(GUI *gui,int id);
053C: 0xA0A17E25 ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
0540: 0xA0A01AEF ; 150: __thumb void DrawFrameInNativeMenu(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA0A02043 ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA097744B ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
054C: 0xA0091808 ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0099180 ; 154: __arm void KillGBSproc(int cepid);
0554: 0xA01366B5 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA0135A71 ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA0137529 ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA0135945 ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA01367F3 ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA01360CD ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA0136473 ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA01370E3 ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA0137125 ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA0135D69 ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA0135FE3 ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
0580: 0xA0136C7B ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
0584: 0xA00E1E48 ; 161: __arm png_init_io(png_structp png_ptr, int fp);
0588: 0xA0FC6388 ; 162: __arm setjmp(jmp_buf jmpbuf);
058C: 0xA0A0BFB7 ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA0A0B3F5 ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA0A0B705 ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA0A0C153 ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA0A08D7D ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
05A0: 0xA0A1205B ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
05A4: 0xA0A11FF1 ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA0A11FFD ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA02510B8 ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber);
05B0: 0xA02518C8 ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA055EE74 ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA0505098 ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA0505F0C ; 16F: __arm int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA09557E1 ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;Handmaded functions
;05C4: ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8: ;172 __arm void REDRAW(void);
05CC: 0xA0A49221 ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA0A49719 ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA0A4951D ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA0A49A4D ; 176: __thumb int closesocket(int socket);
05DC: 0xA0A49955 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA0A49B3F ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA0A49FAD ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0A50CE9 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA0A50CF5 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA8E25BF0 ; 817C: __arm int *socklasterr(void);
05F4: 0xA097840B ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA097841B ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA0978427 ; 17F: __thumb void DisableIDLETMR(void);
0600: 0xA0A11EF5 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA0A11E4D ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA0A11E95 ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA0A118E5 ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA0A0B73F ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA00925C4 ;185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA09915E5 ;186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA09926F5 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);
0620: 0x00000084 ;8188: __arm int ScreenW(void);
0624: 0x000000B0 ;8189: __arm int ScreenH(void);
0628: 0x00000016 ;818A: __arm int HeaderH(void);
062C: 0x00000016 ;818B: __arm int SoftkeyH(void);
0630: 0xA009B6A8 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA09F60CC ;18D: __arm int available0(int sock);
0638: 0xA0D42E23 ;18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA097BBAB ;18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA009A858 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA009A9BC ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA009AD28 ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA009AD84 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA009AE8C ;194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA097D315 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA097851D ;196: __thumb void RefreshGUI(void);
065C: 0xA097D375 ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA097D48D ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA097D2E7 ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA097CC87 ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA0A118D9 ;19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA01D005C ;19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA01D0000 ;19E: __arm void StartCpuUsageCount(void);
067C: 0xA0132319 ; 19F: __thumb int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA013244F ; 1A0: __thumb int inflate (z_streamp strm, int flush);
0684: 0xA013328B ; 1A1: __thumb int inflateEnd (z_streamp strm);
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA095A435   ; 1A7: char* Get_CC_NC()
06A0: 0xA0136579 ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
06A4: 0xA01375CB ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA0136C43 ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA01376E5 ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0135FD1 ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA01376E5 ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA01391F1 ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA01376C9 ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA0139187 ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA013771D ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA01359A5 ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);
06CC: 0xA0A0395F ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,char *pen);
06D0: 0xA0A019BB ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush);
06D4: 0x00000001 ; 81B5: int isnewSGold(void);
06D8: 0xA0A4AA21 ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA099B365 ; 1B7: __thumb unsigned int str2ip(const char *);
;Handmaded function
;06E0: 0x00000000 ; 81B8: void *EXT_TOP(void);
;06E4: 0x00000000 ; 81B9: void *PNG_TOP(void);
;06E8: 0x00000000 ; 81BA: void *LIB_TOP(void);
;06EC: 0x00000000 ; 81BB: void *DATA_N_SFB(void);
06F0: 0xA0F4432F ; 1BC: __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA0F44013 ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0F4420F ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0E8D945 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);
0700: 0xA0E8D9D3 ; 1C0: __thumb void RSA_free (RSA *r);
0704: 0xA0E8DB9F ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len,
0708: 0xA0E8A137 ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA0979B39 ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA0979AA1 ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A275A4 ; 1C5: __arm int GetFontYSIZE(int font);
#pragma disable old_equal_ff
+0

;ElfLoader+ESI+RunElfsByExtention+FSWI

;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
0x000745C4: B09107A09C9107A0
;SWILIB_FUNC19C
0x00074670: D59107A0
;SWILIB_FUNC1B8_1BB
0x000746E0: 70ACD7A874ACD7A86CACD7A878ACD7A8
;FSWI_CODE
0x00078000: 1EFF2FE100109DE5200011E3122F8F02
0x00078010: 0400000AC70050E3B200DE0014E08D05
0x00078020: 01E08EE235208FE234109FE5803CC0E3
0x00078030: 400D53E30500008A800C10E300402D09
0x00078040: 0040FD0803C191E704C08D1514208D05
0x00078050: 0100BDE800F069E10F80FDE81CFF2FE1
0x00078060: 60470000004007A0
;CODE,DATA_C
0x00078100: 11FF2FE1360100EB0100A0E3F081BDE8
0x00078110: 0F402DE94F0100EB0070A0E10040A0E3
0x00078120: 0F80BDE8005080E20F402DE9490100EB
0x00078130: 0060A0E10F80BDE80010A0E30F402DE9
0x00078140: 440100EB0050A0E10F80BDE80F402DE9
0x00078150: 400100EB0070A0E10050A0E30F80BDE8
0x00078160: 04E02DE500200FE1040000EF00100FE1
0x00078170: C01081E301F021E10000A0E10000A0E1
0x00078180: 0000A0E17AFF17EE0000A0E10000A0E1
0x00078190: 0000A0E1FAFFFF1A0000A0E39A0F07EE
0x000781A0: 0000A0E10000A0E10000A0E10000A0E1
0x000781B0: 150F07EE0000A0E10000A0E10000A0E1
0x000781C0: 0000A0E102F021E104F09DE400402DE9
0x000781D0: 1D0100EF0080BDE87FB5FFB00025ED43
0x000781E0: 0595642166A8FFF7F2EF7F9800246B46
0x000781F0: 802211020ADF0190002801D528003EE1
0x00078200: 6B46342209A90BDF342805D001986946
0x00078210: 0DDF0120C04332E109989A49884204D0
0x00078220: 019869460DDF0220F4E709A8808D0B28
0x00078230: 02D30820C04322E1049416AD083511E0
0x00078240: 306801280AD128680599884200D20590
0x00078250: E9684018844201D22868441804982035
0x00078260: 401C0490049809A9898D884227DA08A8
0x00078270: 01B4119805990AAE768D01AB00227143
0x00078280: 411802980FDF1199059A0AAB5B8D01B0
0x00078290: 5A438918884204D0019869460DDF0320
0x000782A0: B8E701982E00083E6B46202231000BDF
0x000782B0: 2028C5D0019869460DDF0420BAE70598
0x000782C0: 251A280014DF040004D1019869460DDF
0x000782D0: 0D209FE72900FFF77AEF0020049016A8
0x000782E0: 083053E02868012802D0022817D0B0E0
0x000782F0: 02988268002A44D0006805996B46401A
0x00078300: 211801980BDF02998968884239D00198
0x00078310: 69460DDF200015DF0A20C043AFE00298
0x00078320: 806814DF0390002806D1019869460DDF
0x00078330: 200015DF06206DE70298039982680198
0x00078340: 6B460BDF02998968884208D001986946
0x00078350: 0DDF039815DF200015DF07206AE70398
0x00078360: 66AA05E0192902DA4368890053500830
0x00078370: 01680029F6D17899002000292ED10398
0x00078380: 15DF0498401C04900298203002900598
0x00078390: 41420791049809A9898D884260DA029D
0x000783A0: 684601B4083D696801AB029800220FDF
0x000783B0: 696801B0884295D0019869460DDF2000
0x000783C0: 15DF052026E7039DEB189A18059B5218
0x000783D0: 116862581219D21A6250401C789AC100
0x000783E0: 9142CCD20299779B0968039D4A42C100
0x000783F0: AD186D18ED186D682D062D0E0695FF2D
0x00078400: EBD0FD2DDFD0079D069E6519002EE4D0
0x00078410: 022E02D0172E09D012E0039EF3189A18
0x00078420: 521811686A5812196A50D6E7039EF318
0x00078430: 9A18059B521811686A581219D21AF3E7
0x00078440: 019869460DDF200015DF039815DF0C20
0x00078450: 63E7019869460DDF200015DF0B20D9E6
0x00078460: 019869460DDF00F051F9079D0F9E829B
0x00078470: 819A80997F98A4196419A04700207FB0
0x00078480: 04B070BD7F454C4610B5A0B069461400
0x00078490: 7E22A3DF0023002221006846FFF79CFE
0x000784A0: 002801D0002000E0012020B010BD0000
0x000784B0: 10402DE90040A0E10A00A0E3440C80E3
0x000784C0: 540100EF0C009FE5001090E50400A0E1
0x000784D0: 1040BDE809FFFFEA009007A010402DE9
0x000784E0: 48D04DE240DE4DE20140A0E1D20F8DE2
0x000784F0: 1A0000EF74109FE5D20F8DE2170000EF
0x00078500: 0D20A0E1D21F8DE204008DE26B0000EF
0x00078510: 000050E30F00000A0410A0E1D20F8DE2
0x00078520: 1A0000EFB9108DE2D20F8DE2170000EF
0x00078530: 0030A0E30020A0E30210A0E1D20F8DE2
0x00078540: 24FFFFFA0D10A0E104008DE26C0000EF
0x00078550: 000050E3EFFFFF1A0D10A0E104008DE2
0x00078560: 6D0000EF48D08DE240DE8DE21080BDE8
0x00078570: 148707A030402DE930509FE50040A0E1
0x00078580: F90200EB140085E28C0000EF20009FE5
0x00078590: 0520A0E10010A0E3710100EF14009FE5
0x000785A0: 001090E50400A0E13040BDE8D3FEFFEA
0x000785B0: 1C8707A0DC8407A0049007A080280BDB
0x000785C0: 0649081880380078802805DB044AFF21
0x000785D0: C94340001018405A7047C046B08707A0
0x000785E0: 308807A030402DE90010A0E30040A0E1
0x000785F0: 0250A0E1260100EF030000EAEEFFFFFA
0x00078600: 0010A0E10400A0E11C0000EF0100D5E4
0x00078610: 000050E3F8FFFF1A3080BDE830402DE9
0x00078620: 0040A0E10F00A0E3250100EF0050A0E1
0x00078630: 071F8FE2240100EF0020A0E30510A0E1
0x00078640: 0400A0E1940000EF0500A0E1290100EF
0x00078650: 3080BDE87478740010402DE984409FE5
0x00078660: 000094E5000050E30400001A0400A0E3
0x00078670: 140000EF0010A0E3001080E5000084E5
0x00078680: 040080E21080BDE8F0412DE954409FE5
0x00078690: 460100EF005094E52800A0E3006095E5
0x000786A0: 900607E02C0087E2140000EF0080A0E1
0x000786B0: 042087E20510A0E11E0100EF010086E2
0x000786C0: 000088E50500A0E1150000EF008084E5
0x000786D0: 470100EF0A00A0E3900601E0010188E0
0x000786E0: 040080E2F081BDE870ACD7A8054A00B5
0x000786F0: 914203D0044A1268904700BD3000FFF7
0x00078700: 8EEF00BDD11D0000089007A0004B1847
0x00078710: 608107A02A2E656C66000000343A5C5A
0x00078720: 42696E5C4461656D6F6E735C00000000
0x00078730: 8C8707A05500000000089D05A08707A0
0x00078740: A88707A0908707A0988707A0FBC0FF7F
0x00078750: 898407A000000000343A5C5A42696E5C
0x00078760: 696D675C656C665F736D616C6C2E706E
0x00078770: 67000000343A5C5A42696E5C696D675C
0x00078780: 656C665F6269672E706E6700656C6600
0x00078790: 4F70656E00000000416C744F70656E00
0x000787A0: 588707A000000000748707A000000000
0x000787B0: 5F5F275F223AC5D85F255F3C5F5F5F5F
0x000787C0: 5F27272222072D2D5F545F3E5F5F5F5F
0x000787D0: FFF6F75FFD83B315F063F23CBF2D52F4
0x000787E0: F82B4969A3E714FAF1FCF33E5F5F5FF5
0x000787F0: 808182838485868788898A8B8C8D8E8F
0x00078800: 909192939495969798999A9B9C9D9E9F
0x00078810: A0A1A2A3A4A5A6A7A8A9AAABACADAEAF
0x00078820: E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
0x00078830: 10041104120413041404150416041704
0x00078840: 180419041A041B041C041D041E041F04
0x00078850: 20042104220423042404250426042704
0x00078860: 280429042A042B042C042D042E042F04
0x00078870: 30043104320433043404350436043704
0x00078880: 380439043A043B043C043D043E043F04
0x00078890: 2D002D002D00A6002B00A600A600AC00
0x000788A0: AC00A600A600AC002D002D002D00AC00
0x000788B0: 4C002B0054002B002D002B00A600A600
0x000788C0: 4C003304A6005400A6003D002B00A600
0x000788D0: A600540054004C004C002D0033042B00
0x000788E0: 2B002D002D002D002D00A600A6002D00
0x000788F0: 40044104420443044404450446044704
0x00078900: 480449044A044B044C044D044E044F04
0x00078910: 0104510404045404070457040E045E04
0x00078920: B0002220B70076001621A400A600A000
0x00078930: 312E322E35000000343A5C5A42696E5C
0x00078940: 696D675C000000002E706E6700000000
;RET_ADRS
0x00079000: 7BCD2FA053CB2FA09F7897A02077A2A0
0x00079010: 3F5D97A0
;HELPER_PROC,HELPER_PROC_DATA
0x00079100: 00402DE914D04DE20D00A0E1530100EF
0x00079110: 000050E31200000A04309DE508009DE5
0x00079120: 010053E30600001A0C209DE5000052E3
0x00079130: 0B00000A10109DE532FF2FE114D08DE2
0x00079140: 0080BDE801002DE904209DE5AE10A0E3
0x00079150: DE1C81E30900A0E3420C80E3000100EF
0x00079160: 04D08DE214D08DE20080BDE800402DE9
0x00079170: 1C209FE51C109FE50000A0E301002DE9
0x00079180: 8030A0E30A00A0E3440C80E3050100EF
0x00079190: 0180BDE8009107A0E09107A000402DE9
0x000791A0: 460100EF410100EF470100EF0080BDE8
0x000791B0: 00402DE904002DE90030A0E10A00A0E3
0x000791C0: 440C80E30120A0E10110A0E3000100EF
0x000791D0: 0180BDE810B514008847200015DF10BD
0x000791E0: 48454C5045520000
;PIT_PNG_EXTENSION
0x00079500: 10402DE90040A0E11F0100EB000050E3
0x00079510: 1080BD180400A0E114C51FE53CFF2FE1
0x00079520: 040050E11CC51FE51CFF2FE100B50800
0x00079530: 14DF00BD00B5080015DF00BD30402DE9
0x00079540: 04D04DE20140A0E10250A0E15E0100EF
0x00079550: 000090E50D30A0E10520A0E10410A0E1
0x00079560: 0B0000EF3180BDE8F0412DE928D04DE2
0x00079570: 0040A0E300408DE504408DE50C308DE2
0x00079580: 8020A0E3801CA0E30A0000EF08008DE5
0x00079590: 010070E33300000A0C00A0E3140000EF
0x000795A0: 0050A0E1004085E5044085E5084085E5
0x000795B0: 08009DE50C308DE20820A0E320108DE2
0x000795C0: 0B0000EF080050E31B00001A0810A0E3
0x000795D0: 20008DE2B20100EF000050E31600000A
0x000795E0: D0029FE501002DE9CC029FE501002DE9
0x000795F0: 0000A0E301002DE90030A0E10020A0E1
0x00079600: 0010A0E1B4029FE5A80100EF0C008DE5
0x00079610: 000050E30CD08DE20700000A560100EF
0x00079620: 04008DE5000050E31100001A0020A0E3
0x00079630: 0210A0E10D00A0E1570100EF000095E5
0x00079640: 150000EF040095E5150000EF080095E5
0x00079650: 150000EF0500A0E1150000EF08009DE5
0x00079660: 0C108DE20D0000EF0000A0E328D08DE2
0x00079670: F081BDE800009DE5620100EF000050E3
0x00079680: 0020A01304108D12E9FFFF1A30229FE5
0x00079690: 00009DE508108DE2A90100EF00009DE5
0x000796A0: 0810A0E3580100EF04109DE500009DE5
0x000796B0: 590100EF0000A0E301002DE901002DE9
0x000796C0: 01002DE924008DE201002DE92C008DE2
0x000796D0: 01002DE918109DE528308DE214009DE5
0x000796E0: 24208DE25A0100EF30009DE514D08DE2
0x000796F0: 100050E30100001A00009DE5AF0100EF
0x00079700: 1C009DE5080050E3010000AA00009DE5
0x00079710: B00100EF18009DE5030050E30100001A
0x00079720: 00009DE5AB0100EF18009DE5000050E3
0x00079730: 040050130100001A00009DE5B10100EF
0x00079740: 00009DE504109DE51020A0E3AC0100EF
0x00079750: 000050E30100000A00009DE5AD0100EF
0x00079760: 00009DE50120A0E3FF10A0E3AE0100EF
0x00079770: 04109DE500009DE50080A0E3AA0100EF
0x00079780: 00009DE504109DE55F0100EF140000EF
0x00079790: 000085E50800A0E3140000EF0060A0E1
0x000797A0: 086085E510009DE514109DE5910000E0
0x000797B0: 8000A0E1140000EF040085E50070A0E1
0x000797C0: 000000EA018088E214009DE5000058E1
0x000797D0: 1B00002A001095E500009DE50020A0E3
0x000797E0: 600100EF0400A0E17ECEA0E30A0000EA
0x000797F0: 0020D1E5F83CA0E3022403E00130D1E5
0x00079800: 0210D1E583310CE0022083E1A111A0E1
0x00079810: 021081E1B210C7E0010080E210109DE5
0x00079820: 010050E1E6FFFF2A001095E5001181E0
0x00079830: 0320D1E5000052E3ECFFFF1AE01CA0E3
0x00079840: F3FFFFEA080095E50810A0E3B210C0E1
0x00079850: 080095E510109DE50010C0E5080095E5
0x00079860: 14109DE50110C0E5080095E5041095E5
0x00079870: 041080E504109DE500009DE55D0100EF
0x00079880: 0020A0E304108DE20D00A0E1570100EF
0x00079890: 000095E5150000EF0500A0E1150000EF
0x000798A0: 08009DE50C108DE20D0000EF0600A0E1
0x000798B0: 28D08DE2F081BDE8359507A02D9507A0
0x000798C0: 308907A03C9507A007E0412A02DB5B2A
0x000798D0: 00DA2032491C0270401C0A78002AF4D1
0x000798E0: 00210170704700003030A0E3010000EA
0x000798F0: 010040E0013083E2010050E1FBFFFF2A
0x00079900: 0030C2E51EFF2FE110402DE90040A0E1
0x00079910: 0100A0E10A0050E31600003A640050E3
0x00079920: 1000003AFA0F50E30A00003A1010A0E3
0x00079930: 9C1D81E3010050E10200003A0420A0E1
0x00079940: E8FFFFEB014084E20420A0E1FA1FA0E3
0x00079950: E4FFFFEB014084E20420A0E16410A0E3
0x00079960: E0FFFFEB014084E20420A0E10A10A0E3
0x00079970: DCFFFFEB014084E2300080E20100C4E4
0x00079980: 0000A0E30000C4E51080BDE8F0432DE9
0x00079990: 40DF4DE20040A0E1240EA0E10A0050E3
0x000799A0: 0300001A0410A0E10D00A0E1C5FFFFFA
0x000799B0: 080000EA50519FE50D00A0E10510A0E1
0x000799C0: C0FFFFFA0410A0E1CEFFFFEB101085E2
0x000799D0: 0D00A0E1170000EF30519FE5460100EF
0x000799E0: 0560A0E10070A0E30080A0E3000000EA
0x000799F0: 0680A0E1006096E5000056E30E00000A
0x00079A00: 040096E50D10A0E1190000EF000050E3
0x00079A10: F6FFFF1A000058E30400000A000096E5
0x00079A20: 000088E5000095E5000086E5006085E5
0x00079A30: 470100EF080096E51A0000EA470100EF
0x00079A40: 0D00A0E1C7FEFFEB0060A0E10C00A0E3
0x00079A50: 140000EF0040A0E10D00A0E11B0000EF
0x00079A60: 010080E2140000EF040084E50D10A0E1
0x00079A70: 1A0000EF086084E5460100EF000095E5
0x00079A80: 0090A0E3000084E5004085E50560A0E1
0x00079A90: 0680A0E1006096E5000056E30300001A
0x00079AA0: 470100EF080094E540DF8DE2F083BDE8
0x00079AB0: 019089E2330059E3F4FFFF3A007088E5
0x00079AC0: 470100EF080096E5000050E30300000A
0x00079AD0: 040090E5150000EF080096E5150000EF
0x00079AE0: 040096E50680A0E1150000EF006096E5
0x00079AF0: 0800A0E1150000EF000056E3F0FFFF1A
0x00079B00: 080094E540DF8DE2F083BDE8388907A0
0x00079B10: 74ACD7A8
;PATCH_ONCREATE
#pragma disable old_equal_ff
0x0042E748: 53CB2FA0 748507A0
;PATCH_ONCLOSE
0x0042E75C: 7BCD2FA0 B08407A0
;PATCH_EXT2_JUMPERS
0x004CF1E0: 0A43747841455F50535F46696E644669 0CF09FE50CF09FE50CF09FE50CF09FE5
0x004CF1F0: 6C65496E576F726B4469725F436C6F73 0CF09FE5108107A0248107A0388107A0
0x004CF200: 65282920456E7472 4C8107A0888607A0
;PATCH_EXT2_R5R7
0x004D45D8: 0025284F FAF708EE
;PATCH_EXT2_CLUST2
0x004D45F8: 2048 3800
;PATCH_EXT2_R5R1
0x004D46D6: D84D0021 FAF788ED
;PATCH_EXT2_R4R7
0x004D486E: 0024 FAF7
0x004D4870: 714F B8EC
;PATCH_EXT2_CLUST1
0x004D489A: 6748 3800
;PATCH_EXT2_IMPL
0x004D48B8: 5F4A043A11683C29 FAF79AECC046C046
0x004D48C0: 09DA28204843131DC01801311160 C046C046C046C046C046C046C046
;PATCH_EXT2_R6R5
0x004D4988: 2B4E051C FAF72CEC
;PATCH_NO_BROWSE_TXT
0x005464C6: 0830 3030
;PATCH_SHOWMSG_BLF
0x0065AB30: 9F7897A0 ED8607A0
;PATCH_ESI1
0x00902B54: 739701FA 08F09FE5
;PATCH_ESI2
0x00902B64: 7C25647C 048107A0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x00975D34: 10B5041CB1F0F2EC 00490847009507A0
;FSWI_PATCH2
0x013A1288: 63685F41 048007A0
;FSWI_PATCH1
0x013A1374: 2C0000EA F4F01FE5
;------------------------- end -------------------------

