;E71v41
;Библиотека функций
;Functions Library
;(c) avkiev
;Version: 061227
;PatchID: 6758
;Details: https://patches.kibab.com/patches/details.php5?id=6758
/*
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
В патче собрано 4096 самых часто-используемых функций, переменных и констант.
После применения патча для вызова (например) функции GetWeek достаточно написать "SWI 181".
Для получения в R0 адреса переменной RamCap нужно будет написать "SWI 200". На любом телефоне и на любой прошивке.
После портирования этого патча на определенную прошивку - для портирования других патчей
в большинстве случаев достаточно будет поменять только место врезки.
Для портирования этого патча на другие прошивки используйте Smelter - Инструменты - Библиотека функций.
*/

+0074000
#pragma enable old_equal_ff
0000: 0xA0002040 ; 0: void loopback0()
0004: 0xA0002040 ; 1: void loopback1()
0008: 0xA0002040 ; 2: void loopback2()
000C: 0xA0002040 ; 3: void loopback3()
0010: 0xA0002040 ; 4: void loopback4()
0014: 0xA058ADC9 ; 5: DecToHex
0018: 0xA01A6A5C ; 6: int GetAkku(int param1,int param2)
001C: 0xA006F061 ; 7: GetLP
0020: 0xA04B7530 ; 8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0543EC4 ; 9: SwitchPhoneOff
0028: 0xA0568600 ; A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA05686C0 ; B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA05687F0 ; C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0568554 ; D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0568584 ; E: fflush
003C: 0xA05685B4 ; F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA05681F8 ; 10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001 ; 11: OpenReadCloseFile
0048: 0xA0568058 ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA056834C ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51 ; 14: void *malloc(unsigned int size)
0054: 0xA0092D85 ; 15: void mfree(void *)
0058: 0xA0FAC849 ; 16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FAE2CD ; 17: char *strcat (char *,const char *)
0060: 0xA0FAE2ED ; 18: char *strchr (const char *,int)
0064: 0xA0FAE310 ; 19: int strcmp (const char *,const char *)
0068: 0xA0FAE3AD ; 1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FAE42D ; 1B: unsigned int strlen(const char *)
0070: 0xA04FB6B9 ; 1C: void wsAppendChar(void *WSHDR,int wchar)
0074: 0xA04FB66D ; 1D: wsInsertChar
0078: 0xA094D6AF ; 1E: IMGHDR *GetPITaddr(int num)
;07C: ; 1F: DrawMainScreen

;080: ; 20: DrawScreenSaver
0084: 0xA094D7D7 ; 21: int GetImgHeight(short picture)
0088: 0xA094D7E7 ; 22: int GetImgWidth(short picture)
008C: 0xA05C1965 ; 23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
;090: ; 24: DrawImage2
0094: 0xA05C0D3F ; 25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A0D059 ; 26: DrawImgBW
;09C: ; 27: AddIconToIconbar
;0A0: ; 28: getEELiteMaxID
;0A4: ; 29: getEEFullMaxID
00A8: 0xA04E7D6C ; 2A: int *GetEELiteBlockAddress(short blocknum)
;0AC: ; 2B: getEELiteBlockSizeVersion
;0B0: ; 2C: getEEFullBlockSizeVersion
;0B4: ; 2D: StartWriteEELiteBlock
;0B8: ; 2E: FinishWriteEELiteBlock
;0BC: ; 2F: DeleteEELiteBlock

;0C0: ; 30: WriteEELiteBlock
00C4: 0xA0FAE575 ; 31: strrchr_2
00C8: 0xA05A2E04 ; 32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0595808 ; 33: PlaySound2
00D0: 0xA0B6D5A0 ; 34: PlaySoundLoop
;0D4: ; 35: AlarmClockRing
;0D8: ; 36: GetATCmdString
00DC: 0xA09A5309 ; 37: OriginalATCGSN
;0E0: ; 38: PostAtCommand
00E4: 0xA08B7D19 ; 39: SendATAnswerStr
00E8: 0xA0B94731 ; 3A: mfree_high
00EC: 0xA0FAD5B1 ; 3B: MemChr
00F0: 0xA0568700 ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4: ; 3D: editOrNewTXTModule
;0F8: ; 3E: LoadProcesses
00FC: 0xA0948845 ; 3F: GetPaletteAdrByColorIndex_2

;100: ; 40: GetVibraStatus
0104: 0xA08C926B ; 41: GetProvider
;108: ; 42: IsScreenSaver
010C: 0xA08D3009 ; 43: int IsUnlocked(void)
;110: ; 44: TempLigntOn
0114: 0xA006F241 ; 45: GetWavLen
;118: ; 46: HasNewSMS
;11C: ; 47: HasFlashSMS
;120: ; 48: ReadNewSMS
;124: ; 49: ReadFlashSMS
0128: 0xA05994CC ; 4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
;12C: ; 4B: StartMidlet
0130: 0xA09B5645 ; 4C: GetMissedCallsCount
0134: 0xA0092531 ; 4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA094F28D ; 4E: ShowMsgInR1_3
;13C: ; 4F: ShowMsgInR1_4

0140: 0xA094F315 ; 50: ShowMsgInR1_7
0144: 0xA0D36023 ; 51: GetNetAccessMode
;148: ; 52: GetIlluminationDataTable
014C: 0xA0FAD5E1 ; 53: memcmp_2(void *m1,void *m2,int n)
0150: 0xA062A889 ; 54: StrToInt
;154: ; 55: SwitchVibraOnOff
0158: 0xA006F131 ; 56: PlayVibra
;15C: ; 57: IsCallAfterTimerStillRunning
0160: 0xA0016498 ; 58: ClearMemory
0164: 0xA0FADAEC ; 59: memcpy_2(void *dest,const void *source,int cnt)
;168: ; 5A: KeypressOn
;16C: ; 5B: KeypressOff
0170: 0xA06237B4 ; 5C: unsigned char GetCPUClock()
0174: 0xA06EBDF7 ; 5D: unsigned char GetCPULoad()
;178: ; 5E: GetMMIMemUsed
017C: 0xA0092F9B ; 5F: int GetFreeRamAvail()

;180: ; 60: ShowMainMenu
;184: ; 61: ShowNativeMenu
;188: ; 62: SetVibraStatus
;18C: ; 63: MS_Wallpaper_Flush
;190: ; 64: TriggerUpdate
;194: ; 65: EndCall
;198: ; 66: EndCallBusy
;19C: ; 67: IsDirectCallActive
;1A0: ; 68: GetScreenSaverRAM
01A4: 0xA00976FF ; 69: LockSched_2(void)
01A8: 0xA009777B ; 6A: UnlockSched_2(void)
01AC: 0xA05680D0 ; 6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0568150 ; 6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0568018 ; 6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0x00000000 ; 6E: IsCalling
;1BC: ; 6F: void RefreshGPRSTraffic()

01C0: 0xA0604ED8 ; 70: int *GetGPRSTrafficPointer()
;1C4: ; 71: DrawRoundRect
;1C8: ; 72: SetCurrentSecondOfCall
;1CC: ; 73: GetTypeOfCall
;1D0: ; 74: GetFunctionPointer
;1D4: ; 75: StoreXYWHtoRECT_2
;1D8: ; 76: SetWindowText
;1DC: ; 77: set2color_byPaletteAdr
;1E0: ; 78: GetTimeFormat
;1E4: ; 79: DrawObject_2
;1E8: ; 7A: ClearWindowBuffer
;1EC: ; 7B: GetProfileFilter
01F0: 0xA04ADCA7 ; 7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0CD7D3B ; 7D: IsIncognitoCall
01F8: 0xA0CD73D9 ; 7E: Rand
01FC: 0xA069F3EC ; 7F: IsPlayerOn

0200: 0xA0A83E55 ; 80: int ShowCallList(int list, int zero)
0204: 0xA0FADE40 ; 81: HexToDec
0208: 0xA069F7F0 ; 82: GetCurrentTrackFilename
;20C: ; 83: GetPathOfFoundFile
0210: 0xA05683C4 ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214: ; 85: StrCmpNoCase
;218: ; 86: ReadEEPROMData
;21C: ; 87: WriteEEPROMData
;220: ; 88: GetAccessoryType
0224: 0xA08D52A4 ; 89: GetLangMesIntoWS
0228: 0xA0567FA8 ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA056885C ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0502CC0 ; 8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05C2CA5 ; 8D: GetProfileName
0238: 0xA0568260 ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA05682E4 ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0568778 ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0568190 ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0B994B4 ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0543ED0 ; 93: RebootPhone
0250: 0xA0502F5C ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA0502E34 ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA01B497B ; 96: GetWavLenByContent
025C: 0xA006F261 ; 97: CreatePath
0260: 0xA006F211 ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264: ; 99: 
;268: ; 9A: 
;26C: ; 9B: 
;270: ; 9C: 
;274: ; 9D: 
;278: ; 9E: 
;27C: ; 9F: DrawRect

0280: 0xA093F35D ; A0: wsprintf_2(WSHDR *,const char *format,...)
;284: ; A1: wstrcpy_2
;288: ; A2: Unicode_GetCharByPosition
028C: 0xA0568D40 ; A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA093FE21 ; A4: AllocWS_2(int len)
0294: 0xA04FAD65 ; A5: FreeWS_2(WSHDR *wshdr)
;298: ; A6: void ResetGPRSTraffic()
029C: 0xA0D29E93 ; A7: char IsGPRSEnabled()
02A0: 0xA0CD9539 ; A8: char IsGPRSConnected()
02A4: 0xA08D37EF ; A9: void KbdLock()
02A8: 0xA0A1D6C5 ; AA: char *GetCurrentLocale()
02AC: 0xA0002040 ; AB: void loopback171()
;2B0: ; AC: DrawText
;2B4: ; AD: StrAnsi2Uni
;2B8: ; AE: StrUni2Ansi
;2BC: ; AF: Hex2Int

;2C0: ; B0: DrawPicWithCanvas
02C4: 0xA006F101 ; B1: DrawColorPicWithCanvas
;2C8: ; B2: GetBuildCanvas
;2CC: ; B3: Seconds2iTime
02D0: 0xA08CE76F ; B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA0589D8B ; B5: char GetWeek(TDate *)
02D8: 0xA05ADBB3 ; B6: char GetProfile()
02DC: 0xA05ADC13 ; B7: char SetProfile(char)
02E0: 0xA0FADC60 ; B8: int dwMODdw(int denom,int number)
02E4: 0xA08D32D3 ; B9: void KbdUnlock()
02E8: 0xA0092F5D ; BA: void *realloc(void *ptr, int size)
02EC: 0xA000AF28 ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FADD38 ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FADDFC ; BD: int DivBy10(int divident)
02F8: 0xA0060C91 ; BE: RunScaner
02FC: 0xA0063001 ; BF: SpellTime

;300: ; C0: MiniGPS
0304: 0xA0060C51 ; C1: RunDispatcher
;308: ; C2: GetAllPatchesByInject
030C: 0xA006F091 ; C3: ProcessFiles
0310: 0xA0060C01 ; C4: GetBuffer
;314: ; C5: PIT_Manager_Core
0318: 0xA01A26AC ; C6: char GetAkkuCapacity()
;31C: ; C7: SWI_C7
0320: 0xA8D8378C ; C8: unsigned short *RamCap()
0324: 0xA8D837B0 ; C9: RamLS
0328: 0xA8EFA44E ; CA: RAMNET *RamNet()
;32C: ; CB: RamRingtoneStatus
0330: 0xA8EB5840 ; CC: RamMissedCalls
;334: ; CD: RamMissedSMS
;338: ; CE: RamDateTime
;33C: ; CF: RamAlarm

0340: 0xA8E27120 ; D0: RamAccPoint
;344: ; D1: RamScreensaver
;348: ; D2: RamAutoTime
034C: 0xA8A80000 ; D3: RamStby
0350: 0xA8E37578 ; D4: RamMissedMes
;354: ; D5: RamIsLocked
;358: ; D6: RamNetOnline
035C: 0xA8E6A464 ; D7: RamScreenBrightness
;360: ; D8: RamMenuAnywhere
;364: ; D9: RamShutdownMode
;368: ; DA: RamIsShutdown
;36C: ; DB: RamMainscreenAccuIcon
;370: ; DC: RamRandSeed
0374: 0xA899F2BC ; DD: RamCurrentTrack
0378: 0xA8E35E78 ; DE: RamIsSimPresent
037C: 0xA8DF3320 ; DF: RamPressedKey

0380: 0xA8DF32A4 ; E0: RamScreenBuffer
;384: ; E1: unsigned int RamMPlayer_CtrlCode()
;388: ; E2: RamKeyBuffer
;38C: ; E3: RamProfileNum
0390: 0xA8D80010 ; E4: FreeRAM
0394: 0x0000123D ; E5: LP_MonthsShort
0398: 0x00000260 ; E6: Pic_Big0
039C: 0x00000830 ; E7: Pic_Little0
03A0: 0x00000800 ; E8: Pic_Extra
03A4: 0x00000810 ; E9: Pic_Profiles
03A8: 0x00000818 ; EA: Pic_Vibra
;3AC: ; EB: Pic_Call
03B0: 0x00000800 ; EC: Pic_AdvNet
03B4: 0x00001137 ; ED: LP_MonthsLong
03B8: 0x000003EB ; EE: LP_Weekdays
03BC: 0x000005B0 ; EF: Pic_Calendar

03C0: 0x00001200 ; F0: Pic_AccuGraph
03C4: 0xA05C19A1 ; F1: BuildCanvas
;3C8: ; F2: lpRAM_PIT
;3CC: ; F3: RAM_PIT_Cap
;3D0: ; F4: 
;3D4: ; F5: 
;3D8: ; F6: 
;3DC: ; F7: 
;3E0: ; F8: Additional_PIT_address
;3E4: ; F9: Additional_PIT_start
;3E8: ; FA: Additional_PIT_end
;3EC: ; FB: 
;3F0: ; FC: PictureRelocationTable
;3F4: ; FD: PictureRelocationBase
;3F8: ; FE: NextPictureMagic
03FC: 0xA0074000 ; FF: AddrLibrary()

;400: ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
;404: ; 101: int GBS_ReciveMessage(GBS_MSG *)
;408: ; 102: void GBS_AcceptMessage(void)
;40C: ; 103: void GBS_ClearMessage(void)
;410: ; 104: void GBS_PendMessage(GBS_MSG *)
;414: ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E9038C ; 106: CSMROOT *CSM_root()
041C: 0xA0947173 ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA0947185 ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA094724F ; 109: void DoIDLE(void)
;428: ; 10A: void *GetConfig(unsigned int id)
;42C: ; 10B: void *GetMinAdrScan()
;430: ; 10C: void *GetMaxAdrScan()
;434: ; 10D: unsigned short *GetCI()
;438: ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA05BFE3D ; 10F: void freeUSSD()

0440: 0xA058B1A1 ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA05BFE79 ; 111: char GetTypeUSSD()
0448: 0xA05BFE89 ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FAE3FD ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FAE479 ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FAE4A9 ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FAE4F9 ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FAE575 ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FAE5B5 ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FAE5DD ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FAE659 ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FAC7F5 ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA000AE85 ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FADA48 ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FADAEC ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA04FB5AB ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA04FB5CD ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA04FB5F1 ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA04FB625 ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA04FAE33 ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA093F35D ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA093FE21 ; 125: WSHDR *AllocWS(int len)
0498: 0xA04FB81D ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA04FB43B ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA04FB4B5 ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA04FAD65 ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA08D213F ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA094732B ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA0947333 ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA094733B ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0948845 ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0948869 ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0948879 ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0948897 ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FADBA5 ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA094D2A5 ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA094D2BB ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA094FC13 ; 135: int IsGuiOnTop(int id)
04D8: 0xA094FD33 ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA094FD43 ; 137: int CreateGUI(void *gui)
04E0: 0xA094FD51 ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA094FD8B ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA094FD9B ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA094FDAB ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA094FDB9 ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA094FDC7 ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA094FDD7 ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA094FE6B ; 13F: void DirectRedrawGUI(void)

0500: 0xA094FE83 ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA094FE77 ; 141: void PendedRedrawGUI(void)
0508: 0xA0A0ABC7 ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
;50C: ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
;510: ; 144: void GBS_StopTimer(GBSTMR *tmr)
;514: ; 145: int GBS_GetCurCepid(void)
;518: ; 146: void LockSched(void)
;51C: ; 147: void UnlockSched(void)
;520: ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA094AB71 ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0948D91 ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0948CFB ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA094ABBF ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA094FC21 ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A23001 ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A2304D ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A0CADB ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,char *pen,char *brush)
;544: ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA094EDD3 ; 152: int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
;54C: ; 153: int GBS_RecActDstMessage(GBS_MSG *)
;550: ; 154: void KillGBSproc(int cepid)
0554: 0xA00E4C28 ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA00E3650 ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA00E614C ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA00E3454 ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA00E4EA8 ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA00E43E0 ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0116294 ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA00E5A28 ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA00E5A88 ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA00E3B88 ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA00E3FFC ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA00E54BC ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E3B90 ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FAE88C ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A170D3 ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A16511 ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A16821 ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A1726F ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A13E85 ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
;5A0: ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
;5A4: ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
;5A8: ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA056843C ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0568C4C ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
;5B4: ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
;5B8: ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
;5BC: ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA09275AD ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4: ; 171: void SUBPROC(void *,...)
;5C8: ; 172: void REDRAW(void)
05CC: 0xA0A59C09 ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A5A101 ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A59F05 ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A5A435 ; 176: int closesocket(int socket)
05DC: 0xA0A5A33D ; 177: int shutdown(int socket,int how)
05E0: 0xA0A5A527 ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A5A995 ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A61615 ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A61621 ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EF1D3C ; 17C: int *socklasterr(void)
05F4: 0xA094FDE7 ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA094FDF7 ; 17E: void RestartIDLETMR(void)
05FC: 0xA094FE03 ; 17F: void DisableIDLETMR(void)

;600: ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
;604: ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
;608: ; 182: int EDIT_GetFocus(void *gui)
;60C: ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A1685B ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
;614: ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA096A8F9 ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA096BA09 ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084 ; 188: int ScreenW(void)
0624: 0x000000B0 ; 189: int ScreenH(void)
0628: 0x00000016 ; 18A: int HeaderH(void)
062C: 0x00000016 ; 18B: int SoftkeyH(void)
;630: ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09FFBD8 ; 18D: int available0(int sock)
0638: 0xA0D29E2D ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA09535CF ; 18F: int GetCurMenuItem(void *gui)

;640: ; 190: void MutexCreate(MUTEX *mtx)
;644: ; 191: void MutexDestroy(MUTEX *mtx)
;648: ; 192: void MutexLock(MUTEX *mtx)
;64C: ; 193: void MutexLockEx(MUTEX *mtx, int flag)
;650: ; 194: void MutexUnlock(MUTEX *mtx)
;654: ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA094FEF9 ; 196: void RefreshGUI(void)
065C: 0xA0954D99 ; 197: void *AllocMenuItem(void *gui)
;660: ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0954D0B ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA09546AB ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
;66C: ; 19B: void EDIT_SetFocus(void *gui, int item)
;670: ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
;674: ; 19D: long long getCpuUsedTime_if_ena(void)
;678: ; 19E: void StartCpuUsageCount(void)
067C: 0xA012E729 ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012E85F ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA012F69B ; 1A1: int inflateEnd(z_streamp strm)
;688: ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C: ; 1A3: int GetCurrentGPRSProfile(void)
;690: ; 1A4: int GetDisconnectTime(void)
;694: ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
;698: ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA092C6B5 ; 1A7: char *Get_CC_NC()
06A0: 0xA00E4900 ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA00E6474 ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA00E546C ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA00E6DBC ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA00E3FE4 ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA00E6DBC ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA00EB98C ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA00E65F0 ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA00EB918 ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA00E6DFC ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA00E3508 ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A0EA03 ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0A0C9A7 ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
;6D4: ; 1B5: 
;6D8: ; 1B6: 
;6DC: ; 1B7: 
;6E0: ; 1B8: 
;6E4: ; 1B9: 
;6E8: ; 1BA: 
;6EC: ; 1BB: 
;6F0: ; 1BC: 
;6F4: ; 1BD: 
;6F8: ; 1BE: 
;6FC: ; 1BF: 

;700: ; 1C0: 
;704: ; 1C1: 
;708: ; 1C2: 
;70C: ; 1C3: 
;710: ; 1C4: 
;714: ; 1C5: 
;718: ; 1C6: 
;71C: ; 1C7: 
;720: ; 1C8: 
;724: ; 1C9: 
;728: ; 1CA: 
;72C: ; 1CB: 
;730: ; 1CC: 
;734: ; 1CD: 
;738: ; 1CE: 
;73C: ; 1CF: 

;740: ; 1D0: 
;744: ; 1D1: 
;748: ; 1D2: 
;74C: ; 1D3: 
;750: ; 1D4: 
;754: ; 1D5: 
;758: ; 1D6: 
;75C: ; 1D7: 
;760: ; 1D8: 
;764: ; 1D9: 
;768: ; 1DA: 
;76C: ; 1DB: 
;770: ; 1DC: 
;774: ; 1DD: 
;778: ; 1DE: 
;77C: ; 1DF: 

;780: ; 1E0: 
;784: ; 1E1: 
;788: ; 1E2: 
;78C: ; 1E3: 
;790: ; 1E4: 
;794: ; 1E5: 
;798: ; 1E6: 
;79C: ; 1E7: 
;7A0: ; 1E8: 
;7A4: ; 1E9: 
;7A8: ; 1EA: 
;7AC: ; 1EB: 
;7B0: ; 1EC: 
;7B4: ; 1ED: 
;7B8: ; 1EE: 
;7BC: ; 1EF: 

;7C0: ; 1F0: 
;7C4: ; 1F1: 
;7C8: ; 1F2: 
;7CC: ; 1F3: 
;7D0: ; 1F4: 
;7D4: ; 1F5: 
;7D8: ; 1F6: 
;7DC: ; 1F7: 
;7E0: ; 1F8: 
;7E4: ; 1F9: 
;7E8: ; 1FA: 
;7EC: ; 1FB: 
;7F0: ; 1FC: 
;7F4: ; 1FD: 
;7F8: ; 1FE: 
;7FC: ; 1FF: 

0800: 0xA0067301 ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

