;M75v19
;Большая Библиотека Функций
;Big Function Library
;(c) avkiev
;(p) Geka
;Version: 60927
;PatchID: 6208
;Details: https://patches.kibab.com/patches/details.php5?id=6208
/*
Эта новая библиотека нужна для Мастер-Патча v11,14
В этой редакции:
- добавлены функции для работы Скрин Шутера v2
- добавлены функции для работы Эльфлоадера

Старую библиотеку пока не сносим 
Версия патча записана в формате "ГММДД". Индицирует дату обновления патча.
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
Требуется для многих патчей, написанных с использованием концепции "Мастер-Патч + Библиотека функций" (c) 1nvisible, avkiev

English:Patch version is in "YMMDD" format. It indicates its update date.

For Master-Patch v11,14

It is auxiliary patch. It consists of 255 most useable function.
It is needed for many other patches, whitch are written using "Master-Patch+Functon Library" concept (c) 1nvisible, avkiev
*/
+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070
0004: 0xA0002070
0008: 0xA0002070
000C: 0xA0002070
0010: 0xA0002070
0010: 0xA0002070
0014: 0xA020EB99   ; f005: DecToHex
0018: 0xA081A844   ; f006: GetAkku
001C: 0xA0A83FDD   ; f007: GetLP
0020: 0xA081B6D8   ; f008: SetIllumination
0024: 0xA0A98C8C   ; f009: SwitchPhoneOff
;
0028: 0xA07CB91C   ; f010: fopen
002C: 0xA07CB95C   ; f011: fread
0030: 0xA07CBA44   ; f012: fwrite
0034: 0xA07CB870   ; f013: fclose
0038: 0xA07CB8A0   ; f014: fflush
003C: 0xA07CB8D0   ; f015: lseek
0040: 0xA08DD7E0   ; f016: mkdir
0044: 0xA0FCF201   ; f017: OpenReadCloseFile
0048: 0xA08DDCD4   ; f018: GetFileAttrib
004C: 0xA08DD7E0   ; f019: SetFileAttrib
;
0050: 0xA0203C24   ; f020: malloc
0054: 0xA0203C8C   ; f021: mfree
0058: 0xA0EF10E5   ; f022: sPrintf
005C: 0xA0EF29CD   ; f023: strcat
0060: 0xA0EF29ED   ; f024: strchr
0064: 0xA0EF2A10   ; f025: strcmp
0068: 0xA0EF2AAD   ; f026: strcopy
006C: 0xA0EF2B2D   ; f027: StrLen
0070: 0xA07BCAFD   ; f028: wsAppendChar
0074: 0xA07BCAB1   ; f029: wsInsertChar
;
0078: 0xA0800CF1   ; f030: GetPITaddr
007C: 0xA02CCDF5   ; f031: DrawMainScreen
0080: 0xA0CD32F5   ; f032: DrawScreenSaver
0084: 0xA0800E37   ; f033: GetImgHeight
0088: 0xA0800E47   ; f034: GetImgWidth
008C: 0xA02A944D   ; f035: DrawImg
0090: 0xA07F76B9   ; f036: DrawImage2
0094: 0xA02A9427   ; f037: DrawCanvas
0098: 0xA07F75F9   ; f038: DrawImgBW
009C: 0xA02A8D0D   ; f039: AddIconToIconbar
;
00A0: 0xA081C8FC   ; f040: getEELiteMaxID
00A4: 0xA07CA274   ; f041: getEEFullMaxID
00A8: 0xA081C7B8   ; f042: GetEELiteBlockAddress
00AC: 0xA081C8A0   ; f043: getEELiteBlockSizeVersion
00B0: 0xA07C9EB8   ; f044: getEEFullBlockSizeVersion
00B4: 0xA081C930   ; f045: StartWriteEELiteBlock
00B8: 0xA081C9AC   ; f046: FinishWriteEELiteBlock
00BC: 0xA081C908   ; f047: DeleteEELiteBlock
00C0: 0xA081C968   ; f048: WriteEELiteBlock
00C4: 0xA0EF2C75   ; f049: strrchr
;
00C8: 0xA02FC5BC   ; f050: PlaySound
00CC: 0xA02F1EB4   ; f051: PlaySound2
00D0: 0xA02B4AD8   ; f052: PlaySoundLoop
00D4: 0xA058A6EB   ; f053: AlarmClockRing
00D8: 0xA04F2D41   ; f054: GetATCmdString
00DC: 0xA0594A57   ; f055: OriginalATCGSN
00E0: 0xA04F26DD   ; f056: PostAtCommand
00E4: 0xA04F3E2F   ; f057: SendATAnswerStr
00E8: 0xA08FC7E9   ; f058: mfree_high
00EC: 0xA0EF1DC1   ; f059: MemChr
;
00F0: 0xA07CB99C   ; f060: SetFileSize
00F4: 0xA050E773   ; f061: editOrNewTXTModule
00F8: 0xA04EEEED   ; f062: LoadProcesses
00FC: 0xA07F8321   ; f063: GetPaletteAdrByColorIndex
0100: 0xA0326987   ; f064: GetVibraStatus
0104: 0xA08362F7   ; f065: GetProvider
0108: 0xA02D0159   ; f066: IsScreenSaver
010C: 0xA07FFE7B   ; f067: IsUnlocked
0110: 0xA085AB25   ; f068: TempLigntOn
0114: 0xA0351900   ; f069: GetWavLen
;
0118: 0xA02CF64D   ; f070: HasNewSMS
011C: 0xA02CE789   ; f071: HasFlashSMS
0120: 0xA02CB167   ; f072: ReadNewSMS
0124: 0xA0510826   ; f073: ReadFlashSMS
0128: 0xA02F49B8   ; f074: PlayFile
012C: 0xA088DF54   ; f075: StartMidlet
0130: 0xA0558215   ; f076: GetMissedCallsCount
0134: 0xA020AF00   ; f077: CallAfterTimer
0138: 0xA07C2B57   ; f078: ShowMsgInR1_3
013C: 0xA07C2B67   ; f079: ShowMsgInR1_4
;
0140: 0xA07C2BCF   ; f080: ShowMsgInR1_7
0144: 0xA0B40DA1   ; f081: GetNetAccessMode
0148: 0xA081BD84   ; f082: GetIlluminationDataTable
014C: 0xA0EF1DE5   ; f083: memcmp
0150: 0xA020EBD5   ; f084: StrToInt
0154: 0xA032699D   ; f085: SwitchVibraOnOff
0158: 0xA0FCF421   ; f086: PlayVibra
015C: 0xA020B00C   ; f087: IsCallAfterTimerStillRunning
0160: 0xA0005D18   ; f088: ClearMemory
0164: 0xA0EF22B0   ; f089: memcpy
;
0168: 0xA07FF6F7   ; f090: KeypressOn
016C: 0xA07FF825   ; f091: KeypressOff
0170: 0xA03B5429   ; f092: GetCPUClock
0174: 0xA03B5463   ; f093: GetCPULoad
0178: 0xA03B5431   ; f094: GetMMIMemUsed
017C: 0xA03B543B   ; f095: GetNonPermMemAvail
0180: 0xA0326BA7   ; f096: ShowMainMenu
0184: 0xA032B0CF   ; f097: ShowNativeMenu
;0188: 0x   ; f098: SetVibraStatus
018C: 0xA02C93EF   ; f099: MS_Wallpaper_Flush
;
0190: 0xA0626B60   ; f100: TriggerUpdate
0194: 0xA0833D65   ; f101: EndCall
0198: 0xA07CC997   ; f102: EndCallBusy
019C: 0xA02A8759   ; f103: IsDirectCallActive
01A0: 0xA02A5E67   ; f104: GetScreenSaverRAM
01A4: 0xA020C108   ; f105: LockSched
01A8: 0xA020C190   ; f106: UnlockSched
01AC: 0xA07CB654   ; f107: FindFirstFile
01B0: 0xA07CB690   ; f108: FindNextFile
01B4: 0xA07CB5DC   ; f109: FindClose
;
01B8: 0xA0AAEDC3   ; f110: IsCalling
01BC: 0xA02C9C97   ; f111: RefreshGPRSTraffic
01C0: 0xA02C9CB5   ; f112: GetGPRSTrafficPointer
01C4: 0xA07F604F   ; f113: DrawRoundRect
01C8: 0xA05543CF   ; f114: SetCurrentSecondOfCall
01CC: 0xA0AAF5DB   ; f115: GetTypeOfCall
01D0: 0xA0327163   ; f116: GetFunctionPointer
01D4: 0xA07FCF8D   ; f117: StoreXYWHtoRECT
01D8: 0xA089B749   ; f118: SetWindowText
01DC: 0xA0898F27   ; f119: set2color_byPaletteAdr
;
01E0: 0xA07D9989   ; f120: GetTimeFormat
01E4: 0xA07FC2E3   ; f121: DrawObject
01E8: 0xA0898FBD   ; f122: ClearWindowBuffer
01EC: 0xA02BFAF5   ; f123: GetProfileFilter
01F0: 0xA0A881E4   ; f124: SetVibration
01F4: 0xA0AAE7DD   ; f125: IsIncognitoCall
01F8: 0xA0AE9DF1   ; f126: Rand
;01FC: 0x   ; f127: IsPlayerOn
0200: 0xA058AF49   ; f128: GetCallsList
0204: 0xA0EF2540   ; f129: HexToDec
;
;0208: 0x   ; f130: GetCurrentTrackFilename
020C: 0xA02DD148   ; f131: GetPathOfFoundFile
0210: 0xA07CB7D0   ; f132: GetFileStats
0214: 0xA0208A05   ; f133: StrCmpNoCase
0218: 0xA07C9DE0   ; f134: ReadEEPROMData
021C: 0xA07C9F24   ; f135: WriteEEPROMData
;0220: 0x   ; f136: GetAccessoryType
;0224: 0x   ; f137: GetLangMesIntoWS
0228: 0xA07CB56C   ; f138: GetFreeFlexSpace
022C: 0xA07CBB30   ; f139: GetTotalFlexSpace
;
0230: 0xa02A1014  ; f140: RegExplorerExt(REGEXPLEXT *);
;0234: 0x   ; f141:
0238: 0xa07CB730  ; f142: fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xa07CB768   ; f143: rmdir(char *cDirectory, unsigned int *ErrorNumber);
0240: 0xa07CBA0C   ; f144: int truncate (int FileHandler, int length, int *errornumber);
0244: 0xa07CB6D0   ; f145: int isdir(char *cDirectory, unsigned int *ErrorNumber);
0248: 0xa07CB7D0   ; f146: int stat(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
;024C: 0x   ; f147:
0250: 0xA02A10D8   ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;0254: 0x   ; f149:
;
;0258: 0x   ; f150:
;025C: 0x   ; f151:
;0260: 0x   ; f152:
;0264: 0x   ; f153:
;0268: 0x   ; f154:
;026C: 0x   ; f155:
;0270: 0x   ; f156:
;0274: 0x   ; f157:
;0278: 0x   ; f158:
27C: 0xA0CAD00B ; f159: DrawRect
;
0280: 0xA07BC05F   ; f160: wsprintf
0284: 0xA0208AE5   ; f161: wstrcpy
0288: 0xA07BC5EF   ; f162: Unicode_GetCharByPosition
028C: 0xA07CADBC   ; f163: ws_2str
290: 0xA0C8CFB7 ; f164: wsAlloc
294: 0xA0C8CFF3 ; f165: wsFree
;0298: 0x   ; f166:
;029C: 0x   ; f167:
;02A0: 0x   ; f168:
;02A4: 0x   ; f169:
;
02A8: 0xA0FCF001   ; f170: OpenWriteCloseFile
02AC: 0xFFFFFFFF   ; f171: SWI_AB
02B0: 0xA0FCF1B1   ; f172: DrawText
02B4: 0xA0FCF0A1   ; f173: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; f174: StrUni2Ansi
02BC: 0xA0FCF051   ; f175: Hex2Int
02C0: 0xA0FCF351   ; f176: DrawPicWithCanvas
02C4: 0xA0FCF371   ; f177: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; f178: GetBuildCanvas
02CC: 0xA0FCF301   ; f179: Seconds2iTime
;
02D0: 0xA07D8B0B   ; f180: GetDateTime
02D4: 0xA020845B   ; f181: GetWeek
02D8: 0xA02BF4B1   ; f182: GetProfile
02DC: 0xA02BF35F   ; f183: SetProfile
02E0: 0xA0EF2424   ; f184: dwMODdw
;02E4: 0xa0800103   ; f185:
02E8: 0xA0EF240C   ; B8: __arm void *memset(void *s, int c, int n)
02EC: 0xA0203C98   ; B9: __arm void *realloc(void *ptr, int size)
02F0: 0xA0219FE8   ; BA: __arm int divide(int divisor, int dividend)
02F4: 0xA0EF24F8   ; BB: __arm  int DivBy10(int divident)
;
02F8: 0xA0FC0C91   ; f190: RunScaner MP v14
;02F8: 0xA0FC0C81   ; f190: RunScaner MP v11
02FC: 0xA0FC3001   ; f191: SpellTime
0300: 0xA0FC7601   ; f192: MiniGPS
0304: 0xA0FC0C51   ; f193: RunDispatcher
0308: 0xA0FC12A1   ; f194: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; f195: ProcessFiles
0310: 0xA0FC0C01   ; f196: GetBuffer
;0314: 0x   ; f197: PIT_Manager_Core
;0318: 0x   ; f198:
;031C: 0x   ; f199: CallLibFunByNumber

;
0320: 0xA850D2C0   ; f200: RamCap
0324: 0xA850D2C2   ; f201: RamLS
0328: 0xA851A92C   ; f202: RamNet
032C: 0xA851A932  ; f203: RamNetRX
0330: 0xA8411778   ; f204: RamMissedCalls
0334: 0xA841176C   ; f205: RamMissedSMS
0338: 0xA84D1218   ; f206: RamDateTime
033C: 0xA8526584   ; f207: RamAlarm
0340: 0xA8559310   ; f208: RamAccPoint
0344: 0xA84CB45C   ; f209: RamScreensaver
;
0348: 0xA84D1240   ; f210: RamAutoTime
034C: 0xA84CB464   ; f211: RamStby
0350: 0xA841175C   ; f212: RamMissedMes
0354: 0xA84FF84C   ; f213: RamIsLocked
0358: 0xA84CFBBC   ; f214: RamNetOnline
035C: 0xA8532F5A   ; f215: RamScreenBrightness
0360: 0xA84D0FC5   ; f216: RamMenuAnywhere
;0364: 0x   ; f217: RamShutdownMode
0368: 0xA855975C   ; f218: RamIsShutdown
036C: 0xA84CB490   ; f219: RamMainscreenAccuIcon
;
;0370: 0x   ; f220: RamRandSeed
0374: 0xA899F2BC   ; f221: RamCurrentTrack
;0378: 0x   ; f222:
037C: 0xA84FF75C   ; f223: RamPressedKey
0380: 0xa84e8c08   ; E0: RamScreenBuffer
;0384: 0x   ; f225:
;0388: 0x   ; f226:
038C: 0xA851BBB8   ; f227: RamProfileNum
0390: 0xA8780000   ; f228: FreeRAM
0394: 0x0000130C   ; f229: LP_MonthsShort
;
0398: 0x000004EA   ; f230: Pic_Big0
039C: 0x0000056F   ; f231: Pic_Little0
03A0: 0x0000057A   ; f232: Pic_Extra
03A4: 0x0000058D   ; f233: Pic_Profiles
03A8: 0x00000302   ; f234: Pic_Vibra
03AC: 0x0000040A   ; f235: Pic_Call
03B0: 0x00000560   ; f236: Pic_AdvNet
03B4: 0x000011FA   ; f237: LP_MonthsLong
03B8: 0x0000042C   ; f238: LP_Weekdays
03BC: 0x00000551   ; f239: Pic_Calendar
;
03C0: 0x00000569   ; f240: Pic_AccuGraph
03C4: 0xA02CCC05   ; f241: BuildCanvas
;03C8: 0x   ; f242: lpRAM_PIT
;03CC: 0x   ; f243: RAM_PIT_Cap
;03D0: 0x   ; f244:
;03D4: 0x   ; f245:
;03D8: 0x   ; f246:
;03DC: 0x   ; f247:
03E0: 0xA0FD0050   ; f248: Additional_PIT_address
03E4: 0x00000542   ; f249: Additional_PIT_start
;
03E8: 0x000005A6   ; f250: Additional_PIT_end
;03EC: 0x   ; f251:
03F0: 0xA0FC0A00   ; f252: PictureRelocationTable
03F4: 0x0000F000   ; f253: PictureRelocationBase
03F8: 0x00001E1E   ; f254: NextPictureMagic
;03FC: 0x   ; f255:
+0

+0FD4400
0000: 0xA020A770   ; 100:  GBS_SendMessage(int cepid_to, int msg, ...)
0004: 0xA020970C   ; 101:  GBS_ReciveMessage(GBS_MSG *)
0008: 0xA0209E0C   ; 102:  GBS_AcceptMessage(void)
000C: 0xA0209B34   ; 103:  GBS_ClearMessage(void)
0010: 0xA0209D04   ; 104:  GBS_PendMessage(GBS_MSG *)
0014: 0xA020ABE0   ; 105:  CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0018: 0xA84C98BC   ; 106:  CSM_root
001C: 0xA07BEB19   ; 107:  CreateCSM(const CSM_DESC*,void *,int)
0020: 0xA07BEB2B   ; 108:  CSM_RAM * FindCSMbyID (int id!только для х75!)
0024: 0xA07BEBEF   ; 109:  __thumb void DoIDLE(void!только для х75!)
;028:              ; 10A: GetConfig(unsigned int id)
;02C:              ; 10B: GetMinAdrScan()
;030:              ; 10C: GetMaxAdrScan()
;034:              ; 10D: GetCI()
;038:              ; 10E: Vibration(unsigned int power, unsigned int duration)
003C: 0xA02CE241   ; 10F:  __thumb void freeUSSD()

0040: 0xA0208AE5   ; 110:  __thumb char *wstrcopy(char *dst, char *src)
0044: 0xA02CE27D   ; 111: GetTypeUSSD()
0048: 0xA02CE28D   ; 112:  __thumb unsigned int SetUSSD(StructUSSDStr *)
004C: 0xA0EF2AFD   ; 113: strpbrk(const char *s1,const char *s2)
0050: 0xA0EF2B79   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0054: 0xA0EF2BA9   ; 115: strncmp(const char *s1,const char *s2,int n)
0058: 0xA0EF2BF9   ; 116: strncpy(char *dest,const char *source,int maxlen)
005C: 0xA0EF2C75   ; 117: strrchr_2(const char *s,int c)
0060: 0xA0EF2C8D   ; 118: strstr(const char *s1,const char *s2)
0064: 0xA0EF2D09   ; 119: strtol(const char *nptr,char **endptr,int base)
0068: 0xA0EF2D85   ; 11A: strtoul(const char *nptr,char **endptr,int base)
006C: 0xA0EF1091   ; 11B: snprintf(char *,int n,const char *format,...)
0070: 0xA0EF1DE5   ; 11C:  __thumb int  memcmp (void *m1,void *m2,int n)
0074: 0xA0EF2268   ; 11D:  __arm void  zeromem (void *dest,int n)
0078: 0xA0EF22B0   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
007C: 0xA07BC98F   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0080: 0xA07BC9B1   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0084: 0xA07BC9D5   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0088: 0xA07BCA69   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
008C: 0xA07BC2BB   ; 123: wstrlen(WSHDR *wshdr)
0090: 0xA07BC05F   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0094: 0xA07BC86F   ; 125:  __thumb WSHDR * AllocWS (int len)
0098: 0xA07BCC63   ; 126: CutWSTR(void *WSHDR,int len)
009C: 0xA07BC807   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
00A0: 0xA07BC827   ; 128: CreateWS(void *malloc,void *mfree,int len)
00A4: 0xA07BC1A1   ; 129: FreeWS(WSHDR *wshdr)
00A8: 0xA07FC2E3   ; 12A: DrawObject_2(DRWOBJ *)
;0AC:              ; 12B: AddKeybMsgHook(void *proc)
;0B0:              ; 12C: AddKeybMsgHook_end(void *proc)
;0B4:              ; 12D: RemoveKeybMsgHook(void *proc)
00B8: 0xA07F8321   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
00BC: 0xA07F8345   ; 12F: getRGBcolor(int ColorIndex,void *dest)

00C0: 0xA07F8355   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
00C4: 0xA07F8373   ; 131: setColor(int a,int r,int g,int b,void *dest)
;0C8:              ; 132: 
00CC: 0xA07FCF8D   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
00D0: 0xA07FCFA3   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
00D4: 0xA07C3363   ; 135: IsGuiOnTop(int id)
00D8: 0xA07C34D1   ; 136: CreateGUI_ID(void *gui,int id)
00DC: 0xA07C34F3   ; 137: CreateGUI(void *gui)
00E0: 0xA07C3511   ; 138: CreateGUI_30or2(void *gui)
00E4: 0xA07C358D   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
00E8: 0xA07C35AF   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
00EC: 0xA07C35D1   ; 13B: GeneralFuncF1(int cmd)
00F0: 0xA07C35EF   ; 13C: GeneralFuncF0(int cmd)
00F4: 0xA07C360D   ; 13D: GeneralFunc_flag1(int id,int cmd)
00F8: 0xA07C362F   ; 13E: GeneralFunc_flag0(int id,int cmd)
00FC: 0xA07C377B   ; 13F: DirectRedrawGUI(void)

0100: 0xA07C3795   ; 140: DirectRedrawGUI_ID(int id)
0104: 0xA07C3875   ; 141: PendedRedrawGUI(void)
0108: 0xA07F58ED   ; 142: FindCSM(void *csm_q,int id)
010C: 0xA020AF9C   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0110: 0xA020C674   ; 144: GBS_StopTimer(GBSTMR *tmr)
0114: 0xA0207048   ; 145: GBS_GetCurCepid(void)
0118: 0xA020C108   ; 146: LockSched_2(void)
011C: 0xA020C190   ; 147: UnlockSched_2(void)
0120: 0xA07C2B39   ; 148: ShowMSG(int flag, int lgp_id)
0124: 0xA089B749   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0128: 0xA0898FBD   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
012C: 0xA0898F27   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0130: 0xA089B799   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0134: 0xA07C3381   ; 14D: GetTopGUI(void)
0138: 0xA08034B7   ; 14E: FindItemByID(GUI *gui,int id)
013C: 0xA08034E1   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0140: 0xA07F604F   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0144: 0xA07F75CF   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0148: 0xA07C26F1   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
014C: 0xA02095D0   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0150: 0xA020700C   ; 154: KillGBSproc(int cepid)
;154:              ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
;158:              ; 156: png_create_info_struct(png_structp png_ptr)
;15C:              ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
;160:              ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
;164:              ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
;168:              ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
;16C:              ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
;170:              ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
;174:              ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
;178:              ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
;17C:              ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

;180:              ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;184:              ; 161: png_init_io(png_structp png_ptr, int fp)
0188: 0xA0EF2FB4   ; 162: setjmp(jmp_buf jmpbuf)
018C: 0xA0956DBB   ; 163:  __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_!a только для x75!)
0190: 0xA07BF2A1   ; 164: PrepareEditControl(EDITCONTROL *)
0194: 0xA07BF5AF   ; 165:  __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0198: 0xA07BFF5D   ; 166:  __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
019C: 0xA07FD2A9   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
01A0: 0xA08A17D3   ; 168:  __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
01A4: 0xA08A1777   ; 169:  __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
01A8: 0xA08A1781   ; 16A:  __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
01AC: 0xA07CB808   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
01B0: 0xA07CAC9C   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
01B4: 0xA05FA637   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
01B8: 0xA055A127   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
01BC: 0xA055A91D   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

01C0: 0xA0508425   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;1C4:              ; 171: SUBPROC(void *,...)
+0
+0FD4000
05CC: 0xA0AD5955 ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA0AD5C27 ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA0AD5AD9 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA0AD5DA1 ; 176: __thumb int closesocket(int socket);
05DC: 0xA0AD5D1D ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA0AD5E4B ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA0AD6127 ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0B1D855 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA0B1D861 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA85B809C ; 817C: __arm int socklasterr(void);

05F4: 0xA07C3771 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA07C3793 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA07C37AD ; 17F: __thumb void DisableIDLETMR(void);

0600: 0xA08A1A71 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA08A19D1 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA08A1A0D ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA08A1A2B ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA07BF707 ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);

0614: 0xA020A308 ;185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA0AD3511 ;186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA0AD3F41 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);

0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000016 ; 818A: __adr int HeaderH(void);
062C: 0x00000016 ; 818B: __adr int SoftkeyH(void);


0630: 0xA020C520 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0A1D7CC ;18D: __arm int available0(int sock);
0638: 0xA0AED3E1 ;18E: __thumb void GPRS_OnOff(int on, int _1);

063C: 0xA07C62DF ;18F: __thumb int GetCurMenuItem(void *gui);

0640: 0xA020BBD0 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA020BCFC ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA020BE7C ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA020BED4 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA020BF30 ;194: __arm void MutexUnlock(MUTEX *mtx);

0654: 0xA07C77A1 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA07C3943 ;196: __thumb void RefreshGUI(void);
065C: 0xA07C77F3 ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA07C7901 ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA07C7773 ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA07C70C5 ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA08A1A21 ;19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA0822B6C ;19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA0822B34 ;19E: __arm void StartCpuUsageCount(void);

067C: 0xA02583B9 ;19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA02584EF ;1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA025932B ;1A1: __thumb int inflateEnd(z_streamp strm);
0688: 0xA02B9239 ;1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA0881E34 ;1A3: __arm int GetCurrentGPRSProfile(void);
0690: 0xA0881DD8 ;1A4: __arm int GetDisconnectTime(void);
0694: 0xA02B9263 ;1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA020B00C ;1A6: __arm int IsTimerProc(GBSTMR *);
0800: 0xA0FC7301 ; Run ScreenShooter on function 200: ScreenShoot()
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

