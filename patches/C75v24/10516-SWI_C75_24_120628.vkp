;C75v24
;Библиотека функций
;Function library
;(c) avkiev
;(r) Grizzzzly
;(p) m.ksy
;Version: 120628
;PatchID: 10516
;Details: https://patches.kibab.com/patches/details.php5?id=10516
/*
Необходима для работы эльфов (кроме библиотеки еще понадобится загрузчик эльфов)
*/

+10E4000
#pragma enable  old_equal_ff
0000: 0xA00404BC   ;   0: __arm void loopback0()
0004: 0xA00404BC   ;   1: __arm void loopback1()
0008: 0xA00404BC   ;   2: __arm void loopback2()
000C: 0xA00404BC   ;   3: __arm void loopback3()
0010: 0xA00404BC   ;   4: __arm void loopback4()
0014: 0xA020EB99   ;   5: __thumb DecToHex
0018: 0xA07CA548   ;   6: __arm int GetAkku(int param1,int param2)
001C: 0xA0A14A61   ;   7: __thumb GetLP
0020: 0xA07CB3DC   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA07EAC98   ;   9: __arm void SwitchPhoneOff(void)
0028: 0xA078070C   ;   A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ;   B: EP__arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ;   C: EP__arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0780660   ;   D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0780690   ;   E: __arm fflush
003C: 0xA07806C0   ;   F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA07804F0   ;  10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA10DF201   ;  11: API __thumb char *OpenReadCloseFile(char *path,void *ram)
0048: 0xA078040C   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0780588   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203C24   ;  14: __arm void *malloc(unsigned int size)
0054: 0xA0203C8C   ;  15: __arm void mfree(void *)
0058: 0xA0E4E635   ;  16: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA0E4FF1D   ;  17: __thumb char * strcat (char *,const char *)
0060: 0xA0E4FF3D   ;  18: __thumb char * strchr (const char *,int)
0064: 0xA0E4FF60   ;  19: __arm int  strcmp (const char *,const char *)
0068: 0xA0E4FFFD   ;  1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0E5007D   ;  1B: __thumb unsigned int strlen(char *)
0070: 0xA0771A39   ;  1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA07719ED   ;  1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA07B1129   ;  1E: __thumb IMGHDR *GetPITaddr(int num)
007C: 0xA02CFC11   ;  1F: __thumb DrawMainScreen

0080: 0xA02D2903   ;  20: __thumb DrawScreenSaver
0084: 0xA07B126F   ;  21: __thumb int GetImgHeight(int picture)
0088: 0xA07B127F   ;  22: __thumb int GetImgWidth(int picture)
008C: 0xA02A8EC9   ;  23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA07A7AF1   ;  24: __thumb DrawImage2
0094: 0xA02A8EA3   ;  25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA07A7A31   ;  26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA02A8825   ;  27: __thumb AddIconToIconbar
00A0: 0xA07CC600   ;  28: __arm getEELiteMaxID
00A4: 0xA077F120   ;  29: __arm getEEFullMaxID
00A8: 0xA07CC4BC   ;  2A: __arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA07CC5A4   ;  2B: __arm getEELiteBlockSizeVersion
00B0: 0xA077ED64   ;  2C: __arm int EEFullGetBlockInfo(unsigned int block,int *size,char *version)
00B4: 0xA0E6A970   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA0E6B8D0   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA0E6AF84   ;  2F: double fp_div(double divisor, double divident)

;0C0: 0xA07CC66C   ;  30: __arm WriteEELiteBlock
00C4: 0xA0E501C5   ;  31: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA02FEA8C   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02F47C0   ;  33: __arm PlaySound2
00D0: 0xA02B440C   ;  34: __arm PlaySoundLoop
00D4: 0xA054F149   ;  35: __thumb void AlarmClockRing(void)
00D8: 0xA04CCA45   ;  36: __thumb GetATCmdString
00DC: 0xA0556FCB   ;  37: __thumb OriginalATCGSN
00E0: 0xA04CC3E1   ;  38: __thumb PostAtCommand
00E4: 0xA04CDB17   ;  39: __thumb SendATAnswerStr
00E8: 0xA05171BF   ;  3A: __thumb mfree_high
00EC: 0xA0E4F311   ;  3B: __thumb MemChr
00F0: 0xA078078C   ;  3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA04DE743   ;  3D: __thumb void editOrNewTXTModule(char *file)
00F8: 0xA04C8DF5   ;  3E: __thumb LoadProcesses
00FC: 0xA07A8759   ;  3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA03290D9   ;  40: __thumb int GetVibraStatus()
0104: 0xA07EEDEB   ;  41: __thumb GetProvider
0108: 0xA02D301D   ;  42: __arm int IsScreenSaver(void)
010C: 0xA07B02B3   ;  43: __arm int IsUnlocked(void)
0110: 0xA080420D   ;  44: __thumb void TempLigntOn(void *)
0114: 0xA0348504   ;  45: __arm GetWavLen
0118: 0xA02D24D9   ;  46: __thumb int HasNewSMS()
011C: 0xA02D15A5   ;  47: __thumb int HasFlashSMS()
0120: 0xA02CDF9F   ;  48: __thumb int ReadNewSMS(void)
0124: 0xA04E0827   ;  49: __thumb int ReadFlashSMS(void)
0128: 0xA02F72C4   ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA08335C0   ;  4B: __arm void StartMidlet(char *midlet)
0130: 0xA0512005   ;  4C: __thumb GetMissedCallsCount
0134: 0xA020AF00   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA0777AA3   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA0777B01   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0777B0B   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0A9C0E1   ;  51: __thumb GetNetAccessMode
0148: 0xA07CBA88   ;  52: __arm char *GetIlluminationDataTable()
014C: 0xA0E4F335   ;  53: __thumb int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020EBD5   ;  54: __thumb int StrToInt(char *str)
0154: 0xA03290EF   ;  55: __thumb int SwitchVibraOnOff(void)
0158: 0xA10DF421   ;  56: API PlayVibra
015C: 0xA020B00C   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0E4F7B8   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA0E4F800   ;  59: __arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA07AFB2F   ;  5A: __thumb void KeypressOn(int key)
016C: 0xA07AFC5D   ;  5B: __thumb KeypressOff
0170: 0xA08840B4   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA03ACB83   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA03ACB51   ;  5E: __thumb GetMMIMemUsed
017C: 0xA0203C98   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA03292BD   ;  60: __thumb void ShowMainMenu()
0184: 0xA03336A3   ;  61: __thumb void ShowNativeMenu()
0188: 0xA0002070   ;  62: ;__unknown SetVibraStatus
018C: 0xA02CC24B   ;  63: __thumb MS_Wallpaper_Flush
0190: 0xA077850D   ;  64: __thumb TriggerUpdate
0194: 0xA07EC859   ;  65: __thumb void EndCall()
0198: 0xA0781AB7   ;  66: __thumb void EndCallBusy()
019C: 0xA02A8271   ;  67: __thumb int IsDirectCallActive()
01A0: 0xA02A59A7   ;  68: __thumb GetScreenSaverRAM
01A4: 0xA020C108   ;  69: __arm void LockSched_2(void)
01A8: 0xA020C190   ;  6A: __arm void UnlockSched_2(void)
01AC: 0xA0780444   ;  6B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0780480   ;  6C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA07803CC   ;  6D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0A2E8EF   ;  6E: __thumb int IsCalling(void)
01BC: 0xA02CCAF3   ;  6F: __thumb void RefreshGPRSTraffic()

01C0: 0xA02CCB11   ;  70: __thumb int *GetGPRSTrafficPointer()
01C4: 0xA07A6487   ;  71: __thumb DrawRoundRect
01C8: 0xA050E1BF   ;  72: __thumb SetCurrentSecondOfCall
01CC: 0xA0A2F107   ;  73: __thumb int GetTypeOfCall(int type)
01D0: 0xA032987B   ;  74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA07AD3C5   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA0841081   ;  76: __thumb SetWindowText
01DC: 0xA083E85F   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA0789DB7   ;  78: __thumb GetTimeFormat
01E4: 0xA07AC71B   ;  79: __thumb void  DrawObject_2(DRWOBJ *)
01E8: 0xA083E8F5   ;  7A: __thumb ClearWindowBuffer
01EC: 0xA02C2E45   ;  7B: __thumb GetProfileFilter
01F0: 0xA07D4754   ;  7C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA0A2E309   ;  7D: __thumb IsIncognitoCall
01F8: 0xA0A4D909   ;  7E: __thumb Rand
01FC: 0xA0002070   ;  7F: ;API IsPlayerOn

0200: 0xA054F9B9   ;  80: __thumb void int ShowCallList(int list, int zero)
0204: 0xA0E4FA90   ;  81: __arm int HexToDec(int hex)
0208: 0xA0002070   ;  82: ;__unknown GetCurrentTrackFilename
020C: 0xA02DFFC8   ;  83: __arm GetPathOfFoundFile
0210: 0xA07805C0   ;  84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208A05   ;  85: __thumb StrCmpNoCase
0218: 0xA077EC8C   ;  86: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA077EDD0   ;  87: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA10DF480   ;  88: ;__unknown GetAccessoryType
0224: 0xA0A14B97   ;  89: ;__unknown GetLangMesIntoWS
0228: 0xA078035C   ;  8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0780920   ;  8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA02A0F04   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *)
0234: 0xA10DF511   ;  8D: ;__unknown GetProfileName
0238: 0xA0780520   ;  8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0780558   ;  8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA07807FC   ;  90: __arm int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA07804C0   ;  91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA079FB68   ;  92: __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA07EACA4   ;  93: __arm void RebootPhone()
0250: 0xA02A0FC8   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: EP __arm int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ;  96: ;__unknown GetWavLenByContent
;25C: 0x00000000   ;  97: API CreatePath
0260: 0xA10DF451   ;  98: API void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA02F73F8   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA07D61E4   ;  9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA874B178   ;  9B: RamAudioParamsAddr
0270: 0xA057428F   ;  9C: ;__unknown CloseScreensaver
0274: 0xA05C2305   ;  9D: __thumb int GetMissedEventsPtr()
0278: 0xA10DF531   ;  9E: API int GetMissedEventCount(unsigned int Event)
027C: 0xA07A6353   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA0770F9B   ;  A0: __thumb int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA0208AE5   ;  A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA077152B   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA077FBAC   ;  A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07717AB   ;  A4: __thumb WSHDR * AllocWS_2(int len)
0294: 0xA07710DD   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA02CCAB9   ;  A6: __thumb void ResetGPRSTraffic()
029C: 0xA02CC905   ;  A7: __thumb char IsGPRSEnabled()
02A0: 0xA0A4FC3D   ;  A8: __thumb char IsGPRSConnected()
02A4: 0xA07B08D7   ;  A9: __thumb void KbdLock()
02A8: 0xA07B0B69   ;  AA: __thumb char *GetCurrentLocale()
02AC: 0xA00404BC   ;  AB: __arm void loopback171()
02B0: 0xA10DF1B1   ;  AC: API DrawText
02B4: 0xA10DF0A1   ;  AD: API StrAnsi2Uni
02B8: 0xA10DF0C1   ;  AE: API StrUni2Ansi
02BC: 0xA10DF051   ;  AF: API Hex2Int

02C0: 0xA10DF351   ;  B0: API DrawPicWithCanvas
02C4: 0xA10DF371   ;  B1: API DrawColorPicWithCanvas
02C8: 0xA10D3E29   ;  B2: API GetBuildCanvas
02CC: 0xA10DF301   ;  B3: API Seconds2iTime
02D0: 0xA0788F3B   ;  B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA020845B   ;  B5: __thumb char GetWeek(TDate*)
02D8: 0xA02C2801   ;  B6: __thumb char GetProfile()
02DC: 0xA02C26AF   ;  B7: __thumb char SetProfile(char)
02E0: 0xA0E4F974   ;  B8: __arm int sdiv(int denom,int number)
02E4: 0xA07B053B   ;  B9: __thumb void KbdUnlock()
02E8: 0xA0203C30   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA0E4F95C   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ;  BC: __arm int udiv(int divisor, int dividend)
02F4: 0xA0E4FA4C   ;  BD: __arm int DivBy10(int divident)
02F8: 0xA10D0C91   ;  BE: MP RunScaner
02FC: 0xA10D3001   ;  BF: MP SpellTime

0300: 0xA10D7601   ;  C0: MP MiniGPS
0304: 0xA10D0C51   ;  C1: MP RunDispatcher
0308: 0xA10D12A1   ;  C2: MP GetAllPatchesByInject
030C: 0xA10DF3A1   ;  C3: MP ProcessFiles
0310: 0xA10D0C01   ;  C4: MP GetBuffer
0314: 0xA02A76F7   ;  C5: char IsIdleUiOnTop()
0318: 0xA10DF500   ;  C6: __arm char GetAkkuCapacity()
;31C: 0xA0002070   ;  C7: __arm void CallLibFunByNumber(int num)
0320: 0xA84E96C0   ;  C8: __arm unsigned short *RamCap()
0324: 0xA84E96C2   ;  C9: RamLS
0328: 0xA84F60DC   ;  CA: __arm RAMNET * RamNet()
032C: 0xA8504B40   ;  CB: RamRingtoneStatus
0330: 0xA839744C   ;  CC: RamMissedCalls
0334: 0xA8397440   ;  CD: RamMissedSMS
0338: 0xA84C41AC   ;  CE: RamDateTime
033C: 0xA850D2F4   ;  CF: RamAlarm

0340: 0xA853BC44   ;  D0: RamAccPoint
0344: 0xA84BFF2C   ;  D1: RamScreensaver
0348: 0xA84C41D4   ;  D2: RamAutoTime
034C: 0xA84BFF1C   ;  D3: RamStby
0350: 0xA8397430   ;  D4: RamMissedMes
0354: 0xA84DBCD8   ;  D5: RamIsLocked
0358: 0xA84C2B50   ;  D6: RamNetOnline
035C: 0xA8517F2A   ;  D7: RamScreenBrightness
0360: 0xA84C3F59   ;  D8: RamMenuAnywhere
0364: 0xA84F2D14   ;  D9: RamShutdownMode
0368: 0xA853BCBC   ;  DA: RamIsShutdown
036C: 0xA84BFF5C   ;  DB: RamMainscreenAccuIcon
0370: 0xA85A8CFC   ;  DC: RamRandSeed
;374:              ;  DD: ;RamCurrentTrack
0378: 0xA84F3ECD   ;  DE: RamIsSimPresent
037C: 0xA84DBBF0   ;  DF: RamPressedKey

0380: 0xA84D0618   ;  E0: __arm void * RamScreenBuffer()
;384:              ;  E1: ;unsigned int RamMPlayer_CtrlCode()
0388: 0xA84DD870   ;  E2: RamKeyBuffer
038C: 0xA8502FEC   ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: FreeRAM
0394: 0x000012FC   ;  E5: LP_MonthsShort
0398: 0x000004FF   ;  E6: Pic_Big
039C: 0x0000047A   ;  E7: Pic_Little
03A0: 0x0000050D   ;  E8: Pic_Extra
03A4: 0x00000565   ;  E9: Pic_Profiles
03A8: 0x00000313   ;  EA: Pic_Vibra
03AC: 0x000004B6   ;  EB: Pic_Call
03B0: 0x0000056C   ;  EC: Pic_AdvNet
03B4: 0x000011EA   ;  ED: LP_MonthsLong
03B8: 0x00000427   ;  EE: LP_Weekdays
03BC: 0x0000057D   ;  EF: Pic_Calendar

03C0: 0x00000557   ;  F0: Pic_AccuGraph
03C4: 0xA02CFA21   ;  F1: __thumb void *BuildCanvas()
;3C8:              ;  F2: ;MP lpRAM_PIT
;3CC:              ;  F3: ;MP RAM_PIT_Cap
03D0: 0xA0E53A2D   ;  F4: __thumb size_t strcspn(const char *s1, const char *s2)
03D4: 0xA84D056C   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA84C4F08   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: EMPTY
03E0: 0xA0FD0050   ;  F8: MP Additional_PIT_address
03E4: 0x00000557   ;  F9: MP Additional_PIT_start
03E8: 0x000005BB   ;  FA: MP Additional_PIT_end
03EC: 0xA10D0800   ;  FB: Shortcuts Table
03F0: 0xA10D0A00   ;  FC: MP PictureRelocationTable
03F4: 0x0000F000   ;  FD: MP PictureRelocationBase
03F8: 0x00001E1E   ;  FE: MP NextPictureMagic
03FC: 0xA10E4000   ;  FF: __arm unsigned int AddrLibrary()

0400: 0xA020A770   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020970C   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209E0C   ; 102: __arm void GBS_AcceptMessage(void)
040C: 0xA0209B34   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA0209D04   ; 104: __arm void GBS_PendMessage(GBS_MSG *)
0414: 0xA020ABE0   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84BE398   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA0773A55   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA0773A67   ; 108: __thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA0773B2B   ; 109: __thumb void DoIDLE(void)
043C: 0xA02D105D   ; 10F: __thumb void freeUSSD()

0440: 0xA0208AE5   ; 110: __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA02D1099   ; 111: __thumb char GetTypeUSSD()
0448: 0xA02D10A9   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0E5004D   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA0E500C9   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA0E500F9   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA0E50149   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA0E501C5   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA0E501DD   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA0E50259   ; 119: deleted int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0E502D5   ; 11A: deleted int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0E4E5E1   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA0E4F335   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA0E4F7B8   ; 11D: __arm void  zeromem(void *dest,int n)
0478: 0xA0E4F800   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA07718CB   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA07718ED   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA0771911   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA07719A5   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA07711F7   ; 123: __thumb int  wstrlen (WSHDR *wshdr)
0490: 0xA0770F9B   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)
0494: 0xA07717AB   ; 125: __thumb WSHDR * AllocWS(int len)
0498: 0xA0771B9F   ; 126: __thumb void  CutWSTR (void *WSHDR,int len)
049C: 0xA0771743   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0771763   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA07710DD   ; 129: __thumb void  FreeWS (WSHDR *wshdr)
04A8: 0xA07AC71B   ; 12A: __thumb void  DrawObject (DRWOBJ *)
;4AC:              ; 12B: EP __thumb void  AddKeybMsgHook (void *proc)
;4B0:              ; 12C: EP __thumb int  AddKeybMsgHook_end (void *proc)
;4B4:              ; 12D: EP __unknown void  RemoveKeybMsgHook (void *proc)
04B8: 0xA07A8759   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA07A877D   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)

04C0: 0xA07A878D   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA07A87AB   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA0E4F8B8   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07AD3C5   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA07AD3DB   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA077829F   ; 135: __thumb int  IsGuiOnTop (int id)
04D8: 0xA077840D   ; 136: __thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA077842F   ; 137: __thumb int  CreateGUI (void *gui)
04E0: 0xA077844D   ; 138: __thumb int  CreateGUI_30or2 (void *gui)
04E4: 0xA07784C9   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA07784EB   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA077850D   ; 13B: __thumb void  GeneralFuncF1 (int cmd)
04F0: 0xA077852B   ; 13C: __thumb void  GeneralFuncF0 (int cmd)
04F4: 0xA0778549   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA077856B   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA07786B7   ; 13F: __thumb void DirectRedrawGUI (void)

0500: 0xA07786D1   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA07787B1   ; 141: __thumb void PendedRedrawGUI (void)
0508: 0xA07A5D25   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA020AF9C   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020C674   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)
0514: 0xA0207048   ; 145: __arm int GBS_GetCurCepid (void)
0518: 0xA020C108   ; 146: __arm void LockSched(void)
051C: 0xA020C190   ; 147: __arm void UnlockSched(void)
0520: 0xA0777A75   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA0841081   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA083E8F5   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA083E85F   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA08410D1   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA07782BD   ; 14D: __thumb GUI *GetTopGUI(void)
0538: 0xA07B38EF   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA07B3919   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA07A6487   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA07A7A07   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA077762D   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA02095D0   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: __arm void KillGBSproc(int cepid)
0554: 0xA0DC88FD   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0DC7CD1   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0DC9735   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0DC7BA5   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0DC8A3B   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0DC8321   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0DC86C3   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0DC932B   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0DC936D   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0DC7FC1   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0DC8237   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0DC8EC3   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000   ; 161: __thumb png_init_io(png_structp png_ptr, int fp)
0588: 0xA0E50504   ; 162: __arm setjmp(jmp_buf jmpbuf)
058C: 0xA0774D01   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA07741DD   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA07744EB   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0774E99   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA07AD6E1   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0847113   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA08470B7   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA08470C1   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA07805F8   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA077FA8C   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA05BFDDF   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0513F17   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA051470D   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA04D3DA9   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: EP __arm void SUBPROC(void *,...)
;5C8:              ; 172: EP __arm void REDRAW(void)
05CC: 0xA0A38F1D   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA0A391EF   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A390A1   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A39369   ; 176: __thumb int closesocket(int socket)
05DC: 0xA0A392E5   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA0A39413   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A396EF   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A77501   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A7750D   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA85A1C14   ; 17C: __arm int socklasterr(void)
05F4: 0xA077858D   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA07785AF   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA07785C9   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA0846FE5   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0846F45   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0846F81   ; 182: __thumb int EDIT_GetFocus(void *gui)
060C: 0xA0846F8B   ; 183: __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA0774523   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA020A308   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0A36AD9   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0A37509   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: __adr int ScreenW(void)
0624: 0x000000B0   ; 189: __adr int ScreenH(void)
0628: 0x00000012   ; 18A: __adr int HeaderH(void)
062C: 0x00000012   ; 18B: __adr int SoftkeyH(void)
0630: 0xA020C520   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA09AB5EC   ; 18D: __arm int available0(int sock)
0638: 0xA0A504E9   ; 18E: __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA077B0FB   ; 18F: __thumb int GetCurMenuItem(void *gui)

0640: 0xA020BBD0   ; 190: __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020BCFC   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020BE7C   ; 192: __arm void MutexLock(MUTEX *mtx)
064C: 0xA020BED4   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020BF30   ; 194: __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA077C5BD   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA077875F   ; 196: __thumb void RefreshGUI(void)
065C: 0xA077C60F   ; 197: __thumb void *AllocMenuItem(void *gui)
0660: 0xA077C71D   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA077C58F   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA077BEE1   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0846F95   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: EP __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA07D2674   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA07D263C   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA0258279   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA02583AF   ; 1A0: __thumb int inflate(z_streamp strm, int flush)
0684: 0xA02591EB   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA02BC589   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA082B158   ; 1A3: __arm int GetCurrentGPRSProfile(void)
0690: 0xA082B0FC   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA02BC5B3   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020B00C   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA0782C63   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA0DC87C1   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0DC97D3   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0DC8E8B   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0DC98FB   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0DC8225   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0DC9917   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0DCA66D   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0DC98D1   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0DCA603   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0DC9925   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0DC7C05   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num)
06CC: 0xA07A90BF   ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA07A6353   ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int IsNewSgold(void)
06D8: 0xA0A39C0F   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0A3EDC1   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8: EP __adr void *EXT_TOP(void)
;6E4:              ; 1B9: EP __adr void *PNG_TOP(void)
;6E8:              ; 1BA: EP __adr void *LIB_TOP(void)
;6EC:              ; 1BB: EP __adr void *DATA_N_SFB(void)
06F0: 0xA0DAD9CB   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0DAD6AF   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0DAD8AB   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0D32E7D   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0D32F0B   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA0D330D7   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0D2F66F   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA077971B   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA0779693   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA07B0F63   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA0846F6D   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0846F77   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0775051   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0774177   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA077416B   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA077415F   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0774149   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0774131   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0774219   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA02A0634   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA02A07B4   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA08470DD   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA08470E7   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0846FBD   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA0846FC7   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA07DDEA8   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA0DC9909   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0DCA6CF   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA084700D   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0847021   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA04DDDDB   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA878319C   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA077148D   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA07714AF   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA08470AD   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0847143   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA077D6F9   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA07AC807   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA077709F   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA0776F87   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA07766C9   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA08471D3   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA077B56B   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA078E320   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA0832CF4   ; 1E8: __arm int IsNoJava()
;7A4: in EL        ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type);
07A8: 0xA07B1763   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA84BF28E   ; 1EB: __arm char *RAM_IMSI()
07B0: 0xA07B17D7   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA07B1803   ; 1ED: __thumb int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ;__unknown ProgressCalculate(int current, int total)
07BC: 0xA07B1767   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA02E14EC   ; 1F0: __arm filecopy
07C4: 0xA02E33D8   ; 1F1: __arm filecopy_op_announce
07C8: 0xA07DDB7C   ; 1F2: __arm int devmenu_config_IsCheckboxOff(int chbox_id)
07CC: 0xA021AC38   ; 1F3: __arm GetSessionAge
07D0: 0xA84BF634   ; 1F4: __arm char *RamServiceProviderName()
07D4: 0xA0E4FB01   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA07B182F   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA10DF2A1   ; 1F7: API __unknown long GetFileSize(char *Filename)
;7E0:              ; 1F8: ;__unknown int GetPlayStatus(void)
;7E4:              ; 1F9: API __unknown void SendMP_cmd(cmd,substract)
07E8: 0xA84EE584   ; 1FA: char *RamVolumeStep()
07EC: 0xA84F2DEC   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA0773C81   ; 1FC: __thumb void CloseCSM(int id)
07F4: 0xA07A6337   ; 1FD: __thumb SetProp2Square_v2
;7F8:              ; 1FE: ;__unknown char *RamLighterPower()
;7FC:              ; 1FF: ;__unknown void MEDIA_PLAYLAST()

0800: 0xA10D7301   ; 200: API __thumb void ScreenShoot()
0804: 0xA07A7B17   ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA08DEECB   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA07A8F6F   ; 203: __thumb void SetPixel(int x,int y,char *color)
0810: 0xA083D19B   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA07A6311   ; 205: __thumb void SetProp2Square_v1(void)
0818: 0xA0E4F6DD   ; 206: __thumb void srand(unsigned int seed)
081C: 0xA0840933   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA07AC831   ; 208: __thumb int Get_WS_width(WSHDR *ws, int font)
0824: 0xA0773AD7   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0847053   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0847067   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA084707B   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA084708F   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA07744A5   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA077438B   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA0778289   ; 210: __thumb int GetCurGuiID(void)
0844: 0x000000A1   ; 211: __adr int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA03C305C   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA034981C   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA07719CD   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA0771A5D   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0770FF9   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA059D095   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA084F617   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA084F8CF   ; 219: __thumb void *AllocMLMenuItem(void *data)
0868: 0xA084715B   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0847165   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui)
0870: 0xA08471A1   ; 21C: __thumb int EDIT_IsBusy(void *gui)
0874: 0xA04D2259   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA0778665   ; 21E: __thumb void FocusGUI(int id)
087C: 0xA0778683   ; 21F: __thumb void UnfocusGUI(void)

0880: 0xA0053F2B   ; 220: __thumb int IsSliderClosed(void)
0884: 0xA0884094   ; 221: __arm void SetCpuClockLow(2)
0888: 0xA088407C   ; 222: __arm void SetCpuClockTempHi(2)
;88C:              ; 223: ;__unknown IsMediaPlayerInBackground
;890:              ; 224: ;__unknown CloseMediaPlayer
0894: 0xA02F74F8   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02F78D0   ; 226: __arm int PlayMelody_StopPlayback(int handle)
089C: 0xA02F7970   ; 227: __arm int PlayMelody_PausePlayback(int handle)
08A0: 0xA02F79B4   ; 228: __arm int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0E5052C   ; 229: __arm void longjmp(jmp_buf, int)
08A8: 0xA078459F   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt)
;8AC:              ; 22B: ;__unknown CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C: ;__unknown pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:              ; 22D: ;__unknown pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8: 0xA034A42C   ; 22E: ;__unknown OpenExplorer(ExplOpenDesc *)
08BC: 0xA84C41D0   ; 22F: __arm TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0788ECB   ; 230: __arm int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA84C4178   ; 231: __arm TAppointment *RamAppointment
08C8: 0xA020A538   ; 232: __arm void GBS_DestroyMessage(GBS_MSG *)
;8CC:              ; 233: ;__unknown void GetAllEmail()
;8D0:              ; 234: ;__unknown int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: ;__unknown int GetLunarYearID(int year)
;8D8:              ; 236: ;__unknown int GetLunarAnimal(int year)
;8DC:              ; 237: ;__unknown char *RamIconBar
08E0: 0xA0784549   ; 238: __thumb void SendAutoUSSDack(void)
08E4: 0xA077F090   ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA077F1DC   ; 23A: __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA004CC09   ; 23B: __thumb void DisableIconBar(int disable)
08F0: 0xA082B124   ; 23C: __arm int SetCurrentGPRSProfile(int profile)
08F4: 0xA0DAA745   ; 23D: __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA0DAA3B5   ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0DAA64D   ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0DAB0D5   ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07891E3   ; 241: __thumb void SetDateTime(TDate *, TTime *)
;908:              ; 242: API void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: API void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0D9F345   ; 244: __thumb int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0D9F3F5   ; 245: __thumb int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA0348504   ; 246: __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA088BF00   ; 247: __arm void NetOff()
;920:              ; 248: ;__unknown char *RamFormatTrack()
;924:              ; 249: ;__unknown char *RamFreq()
;928:              ; 24A: ;__unknown char *RamChannel()
092C: 0xA077CA73   ; 24B: __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02C8469   ; 24C: __thumb int GetPeripheryState (int device, int check_state)
0934: 0xA02F79F8   ; 24D: __arm int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA035C8B4   ; 24E: __arm void* Obs_GetById(int handle)
093C: 0xA030C1B8   ; 24F: __arm int Obs_GetPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA030C044   ; 250: __arm int Obs_GetDuration(void *playobj_3D0, int *pos_ms)
;944:              ; 251: ;__unknown char *RamDataSendFName()
;948:              ; 252: ;__unknown char *RamDataReceiveFName()
;94C:              ; 253: ;__unknown char *RamLastCallNum()
0950: 0xA034A468   ; 254: __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA077D6F5   ; 255: __thumb void MenuSetUserPointer(void *gui,void *user_pointer)
;958:              ; 256: ;__unknown isSetupTheme()
;95C:              ; 257: ;__thumb int isSendReceiveFile()
0960: 0xA07B1209   ; 258: __thumb int CalcBitmapSize(short w,short h, char typy)
0964: 0xA030B3CC   ; 259: __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber)
0968: 0xA030BD38   ; 25A: __arm Obs_DestroyObject(HObj hObj)
096C: 0xA030FF54   ; 25B: __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA030979C   ; 25C: __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA03098F4   ; 25D: __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA030EAF8   ; 25E: __arm int Obs_Start(HObj hObj)
097C: 0xA030651C   ; 25F: __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img)

0980: 0xA030A240   ; 260: __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0309DAC   ; 261: __arm int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA030E988   ; 262: __arm int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA0309C6C   ; 263: __arm int Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA0311498   ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA030EE3C   ; 265: __arm int Obs_Pause (HObj hObj)
0998: 0xA030F0E8   ; 266: __arm int Obs_Resume (HObj hObj)
099C: 0xA030EF64   ; 267: __arm int Obs_Stop (HObj hObj)
;9A0:              ; 268: ;__unknown int Obs_Prepare (HObj hObj)
;9A4:              ; 269: ;__unknown int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA030C15C   ; 26A: ???__arm int Obs_SetPosition (HObj hObj,int ms)
;9AC:              ; 26B: ;__unknown int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA03063B4   ; 26C: __arm int Obs_Sound_SetVolume (HObj hObj, char vol, char delta)
09B4: 0xA03066A8   ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol)
09B8: 0xA03067F4   ; 26E: ;__unknown int Obs_SetPurpose (HObj hObj,char purpose)
09BC: 0xA03069B4   ; 26F: int Obs_Sound_SetMaxFileSize(HObj hobj, int max_file_size);

09C0: 0xA0307128   ; 270: int Obs_Sound_SetAMRMode(HObj hobj, int data_rate);
09C4: 0xA03065A4   ; 271: int Obs_Sound_SetRecordingMode(HObj hobj, int rec_mode);
;9C8:              ; 272:
;9CC:              ; 273:
;9D0:              ; 274:
;9D4:              ; 275:
09D8: 0xA03103D4   ; 276: int Obs_SetOutput_File(HObj hObj, WSHDR *path); // SG => char *path
;9DC:              ; 277:
;9E0:              ; 278:
;9E4:              ; 279:
;9E8:              ; 27A:
;9EC:              ; 27B:
;9F0:              ; 27C:
;9F4:              ; 27D:
;9F8:              ; 27E:
;9FC:              ; 27F:

;A00:              ; 280:
0A04: 0xA85191C4   ; 281: __unknown char *RamIsRunJava()
0A08: 0xA84F39CC   ; 282: __unknown char *RamIsRunCamera()
0A0C: 0xA02EFF30   ; 283: _arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0A504D1   ; 284: __unknown int IsGPRS()
0A14: 0xA0002070   ; 285: __unknown int IsEDGE()
;A18:              ; 286: __unknown int GetSMSState()
;A1C:              ; 287: __unknown int BT_GetLocVisibility()
;A20:              ; 288: __unknown int GetCurrAudioPath()
0A24: 0xA0A9B445   ; 289: __unknown int isDecryption()
;A28:              ; 28A: __unknown char *RamIsFileCache()
;A2C:              ; 28B: __unknown char *RamTotalHeapSize()
;A30:              ; 28C: __unknown char *RamTemporaryHeapSize()
;A34:              ; 28D: __unknown GetBTNameDevice()
;A38:              ; 28E: __unknown char *RamActiveGPRSProfileName()
;A3C:              ; 28F: __unknown int *RamIsNumberTyping()

;A40:              ; 290: __unknown char *RamCallState()
;A44:              ; 291: __unknown int RefreshAlarmClock()
;A48:              ; 292: __unknown char *RamIsAlarmAutorepeatOn()
;A4C:              ; 293: __unknown char *RamAlarmclockHour()
;A50:              ; 294: __unknown char *RamAlarmclockMinute()
;A54:              ; 295: EMPTY
0A58: 0xA02C248B   ; 296: __thumb void getProfileNameByN(int n, WSHDR *ws, int _0)
;A5C:              ; 297: __unknown char *RamIsSoundRecord()
;A60:              ; 298: __unknown char *RamIsSoundRecordQuality()
;A64:              ; 299: __unknown char *RamExtendedCameraState()
;A68:              ; 29A: __unknown SwitchAudioToBTHeadset(TypeOfBTHeadset, unk_0xFFFE0001)
;A6C:              ; 29B: __unknown GetTypeOfBTHeadset
0A70: 0xA84BE32D   ; 29C: __unknown char *RamInputLanguage()
;A74:              ; 29D: __unknown char *RamDisplayLanguage()
;A78:              ; 29E: __unknown char *RamIsMuted
;A7C:              ; 29F: __unknown char *RamGetImei

0A80: 0xA04EEB81   ; 2A0: __unknown int GetAlarmclockState(int state)
;A84:              ; 2A1: EMPTY
;A88:              ; 2A2: EMPTY
0A8C: 0xA077B5F7   ; 2A3: __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0778C5B   ; 2A4: __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA084F491   ; 2A5: __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A04D9   ; 2A6: __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA077C1ED   ; 2A7: __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA077982B   ; 2A8: __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA07778F3   ; 2A9: __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0777865   ; 2AA: __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA07B52A9   ; 2AB: __thumb void *GetPopupUserPointer(void *gui)
;AB0:              ; 2AC: __unknown int DeleteSMS(int index, short *del_cnt)
;AB4:              ; 2AD: __unknown int SetSmsStatus(int index, int type)
0AB8: 0xA077CC81   ; 2AE: __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA07B6F19   ; 2AF: __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA077D56D   ; 2B0: __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA85157C4   ; 2B1: __unknown SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0A52999   ; 2B2: __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA04E7C25   ; 2B3: NativeAbData *AllocNativeAbData(void)
0AD0: 0xA04E7CAB   ; 2B4: int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA04E7E0F   ; 2B5: int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA04E81AB   ; 2B6: WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA04E7E23   ; 2B7: int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA04E828B   ; 2B8: int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA04E7131   ; 2B9: unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA07B71D3   ; 2BA: void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
;AEC:              ; 2BB: void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA07B3247   ; 2BC: void SetGUIDefinition(void *gui, const void *definition)
;AF4:              ; 2BD: __unknown int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
;AF8:              ; 2BE: __unknown int SetCursorTab(void *tab_gui, int n)
;AFC:              ; 2BF: __unknown int UpdateTab1stItem(void *tab_gui, int unk_0)

;B00:              ; 2C0: __unknown int GetCursorTab(void *tab_gui)
;B04:              ; 2C1: __unknown void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA07EEBED   ; 2C2: __thumb int GetSubprovider(WSHDR* ws)
0B0C: 0xA07EEE01   ; 2C3: __thumb int GetRoamingState()
;B10:              ; 2C4: __unknown int GetProfileVolumeSetting(int profile, int type)
0B14: 0xA04DB48B   ; 2C5: __thumb RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA020E1E7   ; 2C6: __thumb int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA020E239   ; 2C7: __thumb int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA020E737   ; 2C8: __thumb int GetSecondsFromTime(*TTime time)
0B24: 0xA020E121   ; 2C9: __thumb int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA020E25B   ; 2CA: __thumb int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA020E749   ; 2CB: __thumb void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA020871D   ; 2CC: __thumb void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA0208831   ; 2CD: __thumb void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA02082FD   ; 2CE: __thumb int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA020E6D9   ; 2CF: __thumb int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA020834D   ; 2D0: __thumb int GetDaysFromMonth(TDate *date)
0B44: 0xA020832D   ; 2D1: __thumb int IsLeapYear(TDate *date)
0B48: 0xA050621F   ; 2D2: __thumb StartNativeBrowserCore()
0B4C: 0xA04E8363   ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA04E7E39   ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA07F7E49   ; 2D5: __thumb void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA07B5EC7   ; 2D6: __thumb void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA07B6479   ; 2D7: __thumb void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA07B6403   ; 2D8: __thumb void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA07B64A1   ; 2D9: __thumb void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA07B64A5   ; 2DA: __thumb void *TViewGetUserPointer(void *gui)
0B6C: 0xA03C5F24   ; 2DB: void MediaSendCSM_Open()
0B70: 0xA10DF5A1   ; 2DC: void SaveMaxIllumination(int level)
0B74: 0xA10DF5B1   ; 2DD: void SetIlluminationoffTimeout(int time_sec)
0B78: 0xA0786BE3   ; 2DE: void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA0786BFF   ; 2DF: void IllumTimeRelease(int TimeMode, int Counter)
;B80:              ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA02A0C4C   ; 2E1: int GetExtUidByFileName_ws(WSHDR *path)
0B88: 0xA0771223   ; 2E2: int wstrcmp(WSHDR *ws1, WSHDR *ws2)
;B8C:              ; 2E3: int fexists(WSHDR* FileName)
;B90:              ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword)
;B94:              ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char * entry,char *keyword)
;B98:              ; 2E6: int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword)
;B9C:              ; 2E7: int SettingsAE_GetFlag(int *res,int set,char * entry,char *keyword)
;BA0:              ; 2E8: int SettingsAE_Update(int val,int set,char * entry,char *keyword)
;BA4:              ; 2E9: int SettingsAE_Read(int *res,int set,char * entry,char *keyword)
;BA8:              ; 2EA: void* SettingsAE_GetEntryList(int set)
;BAC:              ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag)
0BB0: 0xA07E6F9C   ; 2EC: int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA07E6FE8   ; 2ED: int i2c_receive(I2C_MSG *msg)
;BB8: in EL3.0     ; 2EE:
;BBC: in EL3.0     ; 2EF:

;EP3

;Nucleus RTOS API

0C00: 0xA020D6CC   ; 300: __arm NU_Create_Task
0C04: 0xA020D7E8   ; 301: __arm NU_Delete_Task
0C08: 0xA020D844   ; 302: __arm NU_Reset_Task
0C0C: 0xA020D864   ; 303: __arm NU_Terminate_Task
0C10: 0xA020D92C   ; 304: __arm NU_Resume_Task
0C14: 0xA020D974   ; 305: __arm NU_Suspend_Task
0C18: 0xA020D9B0   ; 306: __arm NU_Relinquish
0C1C: 0xA020D9D4   ; 307: __arm NU_Sleep
0C20: 0xA0214068   ; 308: __arm NU_Change_Priority
0C24: 0xA0214080   ; 309: __arm NU_Change_Preemption
0C28: 0xA021409C   ; 30A: __arm NU_Change_Time_Slice
0C2C: 0xA021A3C4   ; 30B: __arm NU_Check_Stack
0C30: 0xA0213CE4   ; 30C: __arm NU_Current_Task_Pointer
0C34: 0xA020DA94   ; 30D: __arm NU_Established_Tasks
0C38: 0xA020DD68   ; 30E: __arm NU_Task_Information
0C3C: 0xA020DABC   ; 30F: __arm NU_Task_Pointers

0C40: 0xA020D2E4   ; 310: __arm NU_Create_Mailbox
0C44: 0xA020D310   ; 311: __arm NU_Delete_Mailbox
0C48: 0xFFFFFFFF   ; 312: __arm NU_Reset_Mailbox
0C4C: 0xA020D330   ; 313: __arm NU_Send_To_Mailbox
0C50: 0xFFFFFFFF   ; 314: __arm NU_Broadcast_To_Mailbox
0C54: 0xA020D394   ; 315: __arm NU_Receive_From_Mailbox
0C58: 0xFFFFFFFF   ; 316: __arm NU_Established_Mailboxes
0C5C: 0xFFFFFFFF   ; 317: __arm NU_Mailbox_Information
0C60: 0xFFFFFFFF   ; 318: __arm NU_Mailbox_Pointers
0C64: 0xA0215ECC   ; 319: __arm NU_Create_Queue
0C68: 0xA0215F6C   ; 31A: __arm NU_Delete_Queue
0C6C: 0xFFFFFFFF   ; 31B: __arm NU_Reset_Queue
0C70: 0xFFFFFFFF   ; 31C: __arm NU_Send_To_Front_Of_Queue
0C74: 0xA0215F8C   ; 31D: __arm NU_Send_To_Queue
0C78: 0xFFFFFFFF   ; 31E: __arm NU_Broadcast_To_Queue
0C7C: 0xA0216030   ; 31F: __arm NU_Receive_From_Queue

0C80: 0xA02160E0   ; 320: __arm NU_Established_Queues
0C84: 0xA0216164   ; 321: __arm NU_Queue_Information
0C88: 0xA02160F4   ; 322: __arm NU_Queue_Pointers
0C8C: 0xFFFFFFFF   ; 323: __arm NU_Create_Pipe
0C90: 0xFFFFFFFF   ; 324: __arm NU_Delete_Pipe
0C94: 0xFFFFFFFF   ; 325: __arm NU_Reset_Pipe
0C98: 0xFFFFFFFF   ; 326: __arm NU_Send_To_Front_Of_Pipe
0C9C: 0xFFFFFFFF   ; 327: __arm NU_Send_To_Pipe
0CA0: 0xFFFFFFFF   ; 328: __arm NU_Broadcast_To_Pipe
0CA4: 0xFFFFFFFF   ; 329: __arm NU_Receive_From_Pipe
0CA8: 0xFFFFFFFF   ; 32A: __arm NU_Established_Pipes
0CAC: 0xFFFFFFFF   ; 32B: __arm NU_Pipe_Information
0CB0: 0xFFFFFFFF   ; 32C: __arm NU_Pipe_Pointers
0CB4: 0xA02130C4   ; 32D: __arm NU_Create_Semaphore
0CB8: 0xA02130FC   ; 32E: __arm NU_Delete_Semaphore
0CBC: 0xFFFFFFFF   ; 32F: __arm NU_Reset_Semaphore

0CC0: 0xA021311C   ; 330: __arm NU_Obtain_Semaphore
0CC4: 0xA021316C   ; 331: __arm NU_Release_Semaphore
0CC8: 0xFFFFFFFF   ; 332: __arm NU_Established_Semaphores
0CCC: 0xFFFFFFFF   ; 333: __arm NU_Semaphore_Information
0CD0: 0xFFFFFFFF   ; 334: __arm NU_Semaphore_Pointers
0CD4: 0xA0212704   ; 335: __arm NU_Create_Event_Group
0CD8: 0xA0212720   ; 336: __arm NU_Delete_Event_Group
0CDC: 0xA0212740   ; 337: __arm NU_Set_Events
0CE0: 0xA0212774   ; 338: __arm NU_Retrieve_Events
0CE4: 0xFFFFFFFF   ; 339: __arm NU_Established_Event_Groups
0CE8: 0xFFFFFFFF   ; 33A: __arm NU_Event_Group_Information
0CEC: 0xFFFFFFFF   ; 33B: __arm NU_Event_Group_Pointers
0CF0: 0xA02140B4   ; 33C: __arm NU_Control_Signals
0CF4: 0xA02140D4   ; 33D: __arm NU_Receive_Signals
0CF8: 0xA02140F4   ; 33E: __arm NU_Register_Signal_Handler
0CFC: 0xA0214120   ; 33F: __arm NU_Send_Signals

0D00: 0xA020D3FC   ; 340: __arm NU_Create_Partition_Pool
0D04: 0xA020D480   ; 341: __arm NU_Delete_Partition_Pool
0D08: 0xA020D4A0   ; 342: __arm NU_Allocate_Partition
0D0C: 0xA020D504   ; 343: __arm NU_Deallocate_Partition
0D10: 0xA020D53C   ; 344: __arm NU_Established_Partition_Pools
0D14: 0xA020D5C0   ; 345: __arm NU_Partition_Pool_Information
0D18: 0xA020D550   ; 346: __arm NU_Partition_Pool_Pointers
0D1C: 0xA020CFF0   ; 347: __arm NU_Create_Memory_Pool
0D20: 0xA020D080   ; 348: __arm NU_Delete_Memory_Pool
0D24: 0xA020D0A0   ; 349: __arm NU_Allocate_Memory
0D28: 0xA020D12C   ; 34A: __arm NU_Deallocate_Memory
0D2C: 0xA020D164   ; 34B: __arm NU_Established_Memory_Pools
0D30: 0xA020D1E8   ; 34C: __arm NU_Memory_Pool_Information
0D34: 0xA020D178   ; 34D: __arm NU_Memory_Pool_Pointers
0D38: 0xA021A200   ; 34E: __arm NU_Control_Interrupts
0D3C: 0xA021A22C   ; 34F: __arm NU_Local_Control_Interrupts

0D40: 0xA021A248   ; 350: __arm NU_Restore_Interrupts
0D44: 0xFFFFFFFF   ; 351: __arm NU_Setup_Vector
0D48: 0xA0213F74   ; 352: __arm NU_Register_LISR
0D4C: 0xA020820C   ; 353: __arm NU_Activate_HISR
0D50: 0xA020D778   ; 354: __arm NU_Create_HISR
0D54: 0xA020D824   ; 355: __arm NU_Delete_HISR
0D58: 0xA0213D0C   ; 356: __arm NU_Current_HISR_Pointer
0D5C: 0xA020DAA8   ; 357: __arm NU_Established_HISRs
0D60: 0xA020DC88   ; 358: __arm NU_HISR_Information
0D64: 0xA020DB2C   ; 359: __arm NU_HISR_Pointers
0D68: 0xA021A61C   ; 35A: __arm NU_Protect
0D6C: 0xA021A6A8   ; 35B: __arm NU_Unprotect
0D70: 0xA020DDF4   ; 35C: __arm NU_Create_Timer
0D74: 0xA020DE68   ; 35D: __arm NU_Delete_Timer
0D78: 0xA020DE88   ; 35E: __arm NU_Reset_Timer
0D7C: 0xA020DEEC   ; 35F: __arm NU_Control_Timer

0D80: 0xA0214148   ; 360: __arm NU_Established_Timers
0D84: 0xA02141CC   ; 361: __arm NU_Timer_Information
0D88: 0xA021415C   ; 362: __arm NU_Timer_Pointers
0D8C: 0xA021AC2C   ; 363: __arm NU_Set_Clock
0D90: 0xA021AC38   ; 364: __arm NU_Retrieve_Clock
0D94: 0xA02184E0   ; 365: __arm NU_Release_Information
0D98: 0xA0217B70   ; 366: __arm NU_License_Information
0D9C: 0xFFFFFFFF   ; 367: __arm NU_Disable_History_Saving
0DA0: 0xFFFFFFFF   ; 368: __arm NU_Enable_History_Saving
0DA4: 0xFFFFFFFF   ; 369: __arm NU_Make_History_Entry
0DA8: 0xFFFFFFFF   ; 36A: __arm NU_Retrieve_History_Entry
0DAC: 0xFFFFFFFF   ; 36B: __arm NU_Create_Driver
0DB0: 0xFFFFFFFF   ; 36C: __arm NU_Delete_Driver
0DB4: 0xFFFFFFFF   ; 36D: __arm NU_Request_Driver
0DB8: 0xFFFFFFFF   ; 36E: __arm NU_Resume_Driver
0DBC: 0xFFFFFFFF   ; 36F: __arm NU_Suspend_Driver

0DC0: 0xFFFFFFFF   ; 370: __arm NU_Established_Drivers
0DC4: 0xFFFFFFFF   ; 371: __arm NU_Driver_Pointers
0DC8: 0xFFFFFFFF   ; 372: __arm NU_IS_SUPERVISOR_MODE
0DCC: 0xA021A0A8   ; 373: __arm NU_SUPERVISOR_MODE
0DD0: 0xA021A148   ; 374: __arm NU_USER_MODE
0DD4: 0xA84F6844   ; 375: __arm NU_SUPERV_USER_VARIABLES


;<Reserved>


0E00: 0xA084ED47   ; 380: GetClipBoard()
0E04: 0xA084ED23   ; 381: CopyWsToClipboard(WSHDR *src)
0E08: 0xA084ECDD   ; 382: ClearClipboard(void)
0E0C: 0xA083E93D   ; 383: __swi __arm int PushDRWOBJOnLAYER(DRWOBJ*, LCDLAYER *);_101213
0E10: 0xA08405A3   ; 384: __swi __arm int LCDRedrawLAYER(LCDLAYER *);_101213
0E14: 0xA0206DD0   ; 385: GBSPROC *GetGBSProcAddress(short cepid);
0E18: 0xA0843131   ; 386: void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2); 
0E1C: 0xA07A55BD   ; 387: LCDLAYER *GetLCDLAYERByCurCepID()
0E20: 0xA0773DEF   ; 388: void SetDepthBuffer(char depth); 
0E24: 0xA0773D95   ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth); 
0E28: 0xA874CD3C   ; 38A: PCM_WAV_STRUCT *RamPCMWAVStruct()
0E2C: 0xA84BE78C   ; 38B: char *RamLastStoreString();

#pragma disable old_equal_ff
+0

;------------------------- end -------------------------
;Обновления:
;120228: +281,282,29C,2A0,2EC,2ED,300-375,380-389; *2D-2F; -30
;120313: +38A,38B; *33C-33F
;120628: +26F-271,276; *353
;------------------------- end -------------------------

;------------------------- end -------------------------

