;CX75v25
;Библиотека функций (SWI)
;Functions Library (SWI)
;(c) avkiev
;(r) Grizzzzly
;(p) sempai, NForce
;Version: 110111
;PatchID: 4736
;Details: https://patches.kibab.com/patches/details.php5?id=4736
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=cx75v25&f=fl_swi.rar

/*
Версия патча записана в формате "ГММДД". Индицирует дату обновления патча.
Эта новая библиотека нужна для Мастер-Патча v14, эльфпака v2.2 или выше
Этот патч сам по себе ничего не делает. Он предназначен для облегчения создания и портирования других патчей.
Требуется для многих патчей, написанных с использованием концепции "Мастер-Патч + Библиотека функций" (c) 1nvisible, avkiev
в архиве файл swi.blib, обновляeтся вместе с библиотекой и содержит её копию в BLIB-формате! этот файл можно использовать для обновления библиотеки при отсутствии кабеля для установки патча (ТОЛЬКО в том случае, если добавляются функции, если какая либо функция исправляется, ОБЯЗАТЕЛЬНО надо установить патч fl_swi.vkp) таким образом, если обновились через кабель, то лить на телефон blib библу нет смысла. 
следует положить blib-файл в 0:\ZBin\swi.blib
для этой версии и последующих необходим патч Подрезка кучи
=======
v110111:
+ 2EE-2F2
* 75, 76, 79, 7A
=======
v101010:
+ 2A0, 2EC, 2ED
* 148, 2CD
=======
v100731:
+ 99-9B, 9E, 232, 26C-26E, 2BA, 2BC, 2DC-2DD(api), 2DE, 2DF, 2E1, 2E2
* 25F, 2CC
=======
. . .
лог изменений в архиве
English:
Patch version is in "YMMDD" format. It indicates its update date.
For Master-Patch v14, ELFpack v2.2 or higher
It is auxiliary patch. It consists of 255 most useable function.
It is needed for many other patches, whitch are written using "Master-Patch+Functon Library" concept (c) 1nvisible, avkiev
*/

+0FD4000
#pragma enable old_equal_ff
0000: 0xA00404BC   ; 000: void loopback0()
0004: 0xA00404BC   ; 001: void loopback1()
0008: 0xA00404BC   ; 002: void loopback2()
000C: 0xA00404BC   ; 003: void loopback3()
0010: 0xA00404BC   ; 004: void loopback4()
0014: 0xA020EB99   ; 005: DecToHex
0018: 0xA081B5B4   ; 006: int GetAkku(int param1,int param2)
001C: 0xA0A85A11   ; 007: void GetLP(int LgpID, const char *buffer)
0020: 0xA081C448   ; 008: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0A9A134   ; 009: void SwitchPhoneOff()
0028: 0xA07CC5B0   ; 00A: int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;Handmaded functions
;02C: ; 00B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030: ; 00C: unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA07CC504   ; 00D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038:              ; 00E: 
003C: 0xA07CC564   ; 00F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA07CC394   ; 010: int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0FCF201   ; 011: OpenReadCloseFile
0048: 0xA07CC2B0   ; 012: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA07CC42C   ; 013: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203C24   ; 014: void *malloc(unsigned int size)
0054: 0xA0203C8C   ; 015: void mfree(void *)
0058: 0xA0EF3899   ; 016: int sprintf(char *buf, char *str, ...)
005C: 0xA0EF5181   ; 017: char *strcat(char *,const char *)
0060: 0xA0EF51A1   ; 018: char *strchr(const char *,int)
0064: 0xA0EF51C4   ; 019: int strcmp(const char *,const char *)
0068: 0xA0EF5261   ; 01A: char *strcpy(char *dest,const char *source)
006C: 0xA0EF52E1   ; 01B: unsigned int strlen(char *)
0070: 0xA07BD791   ; 01C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA07BD745   ; 01D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA0801A61   ; 01E: IMGHDR *GetPITaddr(int num)
007C: 0xA02CCDF1   ; 01F: int DrawMainScreen(void)

0080: 0xA02CFA39   ; 020: int DrawScreenSaver(void)
0084: 0xA0801BA7   ; 021: int GetImgHeight(int picture)
0088: 0xA0801BB7   ; 022: int GetImgWidth(int picture)
008C: 0xA02A944B   ; 023: void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA07F8429   ; 024: void DrawImage2(unsigned char x, unsigned char y, short picture)
0094: 0xA02A9425   ; 025: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA07F8369   ; 026: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA02A8D0D   ; 027: void AddIconToIconBar(void *data, int pic, short *num)
00A0: 0xA0F10CD8   ; 028: double fp_sint2fp(signed int i)
;0A4:              ; 029: 
00A8: 0xA081D528   ; 02A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0F10B78   ; 02B: signed int fp_fp2sint(double f)
00B0: 0xA07CAB4C   ; 02C: int EEFullGetBlockInfo(unsigned int block,int *size,char *version)
00B4: 0xA0F0FF38   ; 02D: double fp_add(double addend1, double addend2)
00B8: 0xA0F10E98   ; 02E: double fp_mul(double factor1, double factor2)
00BC: 0xA0F1054C   ; 02F: double fp_div(double divisor, double divident)

;0C0:              ; 030: 
00C4: 0xA0EF5429   ; 031: char *strrchr_2(const char *s,int c)
00C8: 0xA02FC5B8   ; 032: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02F1EB0   ; 033: PlaySound2
00D0: 0xA02B4AD4   ; 034: void PlaySoundLoop(int _0x2F, int param2, int duration)
00D4: 0xA058A99B   ; 035: void AlarmClockRing()
;0D8: ; 036: void SLI_SetState(unsigned char state)
;0DC: ; 037: void Ringtones_SetState(unsigned char state)
;0E0: ; 038: int Registry_GetHMIKeyID(char *Keyword)
;0E4: ; 039: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
;0E8: ; 03A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0EF4575   ; 03B: MemChr
00F0: 0xA07CC630   ; 03C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA050E9CF   ; 03D: editOrNewTXTModule
;0F8: ; 03E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA07F9091   ; 03F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA0326987   ; 040: int GetVibraStatus(void)
0104: 0xA08377DB   ; 041: int GetProvider(WSHDR* ws, int zero)
0108: 0xA02D0155   ; 042: int IsScreenSaver()
010C: 0xA0800BEB   ; 043: int IsUnlocked(void)
0110: 0xA085C009   ; 044: TempLigntOn
0114: 0xA0351900   ; 045: int GetWavLen(TWavLen *wl)
0118: 0xA02CF649   ; 046: int HasNewSMS()
011C: 0xA02CE785   ; 047: int HasFlashSMS()
0120: 0xA0510AB3   ; 048: int ReadNewSMS()
0124: 0xA02CB163   ; 049: int ReadFlashSMS()
0128: 0xA02F49B4   ; 04A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA088F438   ; 04B: StartMidlet
0130: 0xA05584AD   ; 04C: int GetMissedCallsCount()
0134: 0xA020AF00   ; 04D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA07C37FB   ; 04E: int MsgBoxError(int flag, int LgpId)
013C: 0xA07C3859   ; 04F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA07C3863   ; 050: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0B41CB5   ; 051: char GetNetAccessMode()
0148: 0xA081CAF4   ; 052: char *GetIlluminationDataTable()
014C: 0xA0EF4599   ; 053: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020EBD5   ; 054: int StrToInt(char *s, char **endp)
0154: 0xA032699D   ; 055: int SwitchVibraOnOff()
0158: 0xA0FCF421   ; 056: void PlayVibra(char VibraPower, unsigned int VibraDuration, char VibraIfOff)
015C: 0xA020B00C   ; 057: int IsTimerProc_2(GBSTMR *)
0160: 0xA0EF4A1C   ; 058: void zeromem_2(void *dest,int n)
0164: 0xA0EF4A64   ; 059: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0800467   ; 05A: void KeypressOn(int key)
016C: 0xA0800595   ; 05B: void KeypressOff(int key)
0170: 0xA08EE8AC   ; 05C: unsigned char GetCPUClock()
0174: 0xA03B548B   ; 05D: unsigned char GetCPULoad()
0178: 0xA03B5459   ; 05E: unsigned int GetMMIMemUsed()
017C: 0xA0203C98   ; 05F: int GetFreeRamAvail()

0180: 0xA0326BA7   ; 060: void ShowMainMenu()
0184: 0xA032B0CF   ; 061: void ShowNativeMenu()
;188: ; 062: SetVibraStatus
018C: 0xA02C93EB   ; 063: MS_Wallpaper_Flush
0190: 0xA07C4265   ; 064: TriggerUpdate
0194: 0xA0835249   ; 065: void EndCall(void)
0198: 0xA07CD62B   ; 066: void EndCallBusy(int param1, int param2)
019C: 0xA02A8759   ; 067: IsDirectCallActive
01A0: 0xA02A5E67   ; 068: GetScreenSaverRAM
01A4: 0xA020C108   ; 069: void LockSched_2(void)
01A8: 0xA020C190   ; 06A: void UnlockSched_2(void)
01AC: 0xA07CC2E8   ; 06B: int FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA07CC324   ; 06C: int FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA07CC270   ; 06D: int FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0AB026B   ; 06E: int IsCalling(void)
01BC: 0xA02C9C93   ; 06F: void RefreshGPRSTraffic()

01C0: 0xA02C9CB1   ; 070: int *GetGPRSTrafficPointer()
01C4: 0xA07F6DBF   ; 071: DrawRoundRect
01C8: 0xA0554667   ; 072: unsigned short GetCurrentSecondOfCall()
01CC: 0xA0AB0A83   ; 073: int GetTypeOfCall(int _1)
01D0: 0xA0327163   ; 074: void *GetFunctionPointer(char * _shortcut)
01D4: 0xA02C8979   ; 075: int IsCanvasBufferSet(char CanvasID)
01D8: 0xA02C89C5   ; 076: IMGHDR *GetCanvasBufferPicPtr(char CanvasID)
01DC: 0xA089A40B   ; 077: set2color_byPaletteAdr
01E0: 0xA07DA6EB   ; 078: GetTimeFormat
01E4: 0xA07FD027   ; 079: int DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00000000   ; 07A: GBS_Cmd_4200_UpdateScreen
01EC: 0xA02BFAF1   ; 07B: char GetProfileFilter(char profile_num)
01F0: 0xA08257C0   ; 07C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0AAFC85   ; 07D: IsIncognitoCall
01F8: 0xA0AEB155   ; 07E: int rand(void)
;1FC: ; 07F: IsPlayerOn

0200: 0xA058B1F9   ; 080: int ShowCallList(int list, int zero)
0204: 0xA0EF4CF4   ; 081: HexToDec
;208: ; 082: GetCurrentTrackFilename
020C: 0xA02DD144   ; 083: GetPathOfFoundFile
0210: 0xA07CC464   ; 084: int GetFileStats(const char *cFileName, FSTATS * StatBuffer, unsigned int *errornumber)
0214: 0xA0208A05   ; 085: int strcmpi(const char *s1, const char *s2)
0218: 0xA07CAA74   ; 086: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA07CABB8   ; 087: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA0FCF480   ; 088: char GetAccessoryType(void)
0224: 0xA0A85B47   ; 089: int GetLangMesIntoWS(int LgpID, WSHDR* ws, int zero)
0228: 0xA07CC200   ; 08A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA07CC7C4   ; 08B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA02A1014   ; 08C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0FCF511   ; 08D: void GetProfileName(WSHDR* ws)
0238: 0xA07CC3C4   ; 08E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA07CC3FC   ; 08F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA07CC6A0   ; 090: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA07CC364   ; 091: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA07F049C   ; 092: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0A9A140   ; 093: void RebootPhone()
0250: 0xA02A10D8   ; 094: int ExecuteFile (WSHDR *filepath, WSHDR *mimetype, void *param)
;254: ; 095: int UnRegExplorerExt(REGEXPLEXT const *) //Handmaded function
;258: ; 096: GetWavLenByContent
;25C: ; 097: CreatePath
0260: 0xA0FCF451   ; 098: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA02F4C44   ; 099: int PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct)
0268: 0xA0827304   ; 09A: int ChangeVolume(unsigned char Volume)
026C: 0xA8763B0C   ; 09B: RamAudioParamsAddr
;270: ; 09C: CloseScreensaver
0274: 0xA097E539   ; 09D: int GetMissedEventsPtr()
0278: 0xA0FCF531   ; 09E: int GetMissedEventCount(unsigned int Event)
027C: 0xA07F6C8B   ; 09F: void DrawRectangle_2(int x,int y,int x2,int y2,int flags,char *pen,char *brush)

0280: 0xA07BCCF3   ; 0A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA07BD623   ; 0A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA07BD283   ; 0A2: ws_GetCharByPosition
028C: 0xA07CBA50   ; 0A3: void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07BD503   ; 0A4: WSHDR *AllocWS_2(int len)
0294: 0xA07BCE35   ; 0A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA02C9C59   ; 0A6: void ResetGPRSTraffic()
029C: 0xA02C9AA5   ; 0A7: char IsGPRSEnabled()
02A0: 0xA0AED489   ; 0A8: char IsGPRSConnected()
02A4: 0xA080120F   ; 0A9: void KbdLock()
02A8: 0xA08014A1   ; 0AA: char *GetCurrentLocale()
02AC: 0xA00404BC   ; 0AB: void loopback171()
02B0: 0xA0FCF1B1   ; 0AC: DrawText
02B4: 0xA0FCF0A1   ; 0AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; 0AE: StrUni2Ansi
02BC: 0xA0FCF051   ; 0AF: Hex2Int

02C0: 0xA0FCF351   ; 0B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ; 0B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; 0B2: GetBuildCanvas
02CC: 0xA0FCF301   ; 0B3: long Seconds2iTime(int timeval)
02D0: 0xA07D986F   ; 0B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA020845B   ; 0B5: char GetWeek(TDate *)
02D8: 0xA02BF4AD   ; 0B6: char GetProfile()
02DC: 0xA02BF35B   ; 0B7: char SetProfile(char)
02E0: 0xA0EF4BD8   ; 0B8: int sdiv(int denom,int number)
02E4: 0xA0800E73   ; 0B9: void KbdUnlock()
02E8: 0xA0203C30   ; 0BA: void *realloc(void *ptr, int size)
02EC: 0xA0EF4BC0   ; 0BB: void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ; 0BC: int divide(int divisor, int dividend)
02F4: 0xA0EF4CB0   ; 0BD: int DivBy10(int divident)
02F8: 0xA0FC0C91   ; 0BE: RunScaner //MPv14
02FC: 0xA0FC3001   ; 0BF: void SpellTime()

0300: 0xA0FC7601   ; 0C0: MiniGPS
0304: 0xA0FC0C51   ; 0C1: RunDispatcher
0308: 0xA0FC12A1   ; 0C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; 0C3: ProcessFiles
0310: 0xA0FC0C01   ; 0C4: void *GetBuffer(int patch_id)
0314: 0xA02A7BD9   ; 0C5: char IsIdleUiOnTop()
0318: 0xA0FCF500   ; 0C6: char GetAkkuCapacity()
;31C: ; 0C7: SWI_C7
0320: 0xA850D368   ; 0C8: unsigned short *RamCap()
0324: 0xA850D36A   ; 0C9: unsigned short *RamLS()
0328: 0xA851A9D4   ; 0CA: RAMNET *RamNet()
032C: 0xA851DE78   ; 0CB: char *RamRingtoneStatus()
0330: 0xA8411778   ; 0CC: char *RamMissedCalls()
0334: 0xA841176C   ; 0CD: char *RamMissedSMS()
0338: 0xA84D12C0   ; 0CE: RamDateTime
033C: 0xA852662C   ; 0CF: char *RamAlarm()

0340: 0xA85594E4   ; 0D0: char *RamAccPoint()
0344: 0xA84CB508   ; 0D1: RamScreensaver
0348: 0xA84D12E8   ; 0D2: char *RamAutoTime()
034C: 0xA84CB50C   ; 0D3: char *RamStby()
0350: 0xA841175C   ; 0D4: char *RamMissedMes()
0354: 0xA84FF8EC   ; 0D5: char *RamIsLocked()
0358: 0xA84CFC64   ; 0D6: char *RamNetOnline()
035C: 0xA8533136   ; 0D7: char *RamScreenBrightness()
0360: 0xA84D106D   ; 0D8: RamMenuAnywhere
0364: 0xA8517350   ; 0D9: RamShutdownMode
0368: 0xA8559938   ; 0DA: RamIsShutdown
036C: 0xA84CB538   ; 0DB: RamMainscreenAccuIcon
0370: 0xA85BF250   ; 0DC: int *RamRandSeed(void)
;374: ; 0DD: RamCurrentTrack
0378: 0xA85187D1   ; 0DE: RamIsSimPresent
037C: 0xA84FF804   ; 0DF: char *RamPressedKey()

0380: 0xA84E8CAC   ; 0E0: char *RamScreenBuffer()
;384: ; 0E1: unsigned int RamMPlayer_CtrlCode()
0388: 0xA85014E0  ;  0E2: RamKeyBuffer
038C: 0xA851BC60   ; 0E3: char *RamProfileNum()
0390: 0xA8000000   ; 0E4: void *FreeRAM() //Cut heap
0394: 0x0000130D   ; 0E5: LP_MonthsShort
0398: 0x000004FF   ; 0E6: Pic_Big0
039C: 0x0000047A   ; 0E7: Pic_Little0
03A0: 0x0000050D   ; 0E8: Pic_Extra
03A4: 0x00000565   ; 0E9: Pic_Profiles
03A8: 0x00000313   ; 0EA: Pic_Vibra
03AC: 0x000004B6   ; 0EB: Pic_Call
03B0: 0x0000056C   ; 0EC: Pic_AdvNet
03B4: 0x000011FB   ; 0ED: LP_MonthsLong
03B8: 0x0000042C   ; 0EE: LP_Weekdays
03BC: 0x0000057D   ; 0EF: Pic_Calendar

03C0: 0x00000557   ; 0F0: Pic_AccuGraph
03C4: 0xA02CCC01   ; 0F1: void *BuildCanvas()
;3C8: ; 0F2: lpRAM_PIT
;3CC: ; 0F3: RAM_PIT_Cap
03D0: 0xA0EF8DE9   ; 0F4: size_t strcspn(const char *s1, const char *s2)
03D4: 0xA84E8C00   ; 0F5: Ram_LCD_Overlay_Layer
03D8: 0xA84D201C   ; 0F6: RAM_LCD_Layer_Base_Ptr
;3DC: ; 0F7:
03E0: 0xA0FD0050   ; 0F8: Additional_PIT_address
03E4: 0x00000557   ; 0F9: Additional_PIT_start
03E8: 0x000005BB   ; 0FA: Additional_PIT_end
03EC: 0xA0FC0800   ; 0FB: 
03F0: 0xA0FC0A00   ; 0FC: PictureRelocationTable
03F4: 0x0000F000   ; 0FD: PictureRelocationBase
03F8: 0x00001E1E   ; 0FE: NextPictureMagic
03FC: 0xA0FD4000   ; 0FF: unsigned int AddrLibrary()

0400: 0xA020A770   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020970C   ; 101: int GBS_ReceiveMessage(GBS_MSG *)
0408: 0xA0209E0C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0209B34   ; 103: void GBS_ClearMessage(void)
0410: 0xA0209D04   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA020ABE0   ; 105: void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84C9964   ; 106: CSMROOT *CSM_root()
041C: 0xA07BF7AD   ; 107: int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA07BF7BF   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA07BF883   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA02CE23D   ; 10F: void freeUSSD()
0440: 0xA0208AE5   ; 110: char *wstrcopy(char *dst, char *src)
0444: 0xA02CE279   ; 111: char GetTypeUSSD()
0448: 0xA02CE289   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0EF52B1   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0EF532D   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0EF535D   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0EF53AD   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0EF5429   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0EF5441   ; 118: char *strstr(const char *s1,const char *s2)
;0464: 0xA0EF54BD   ; 119: int strtol(const char *nptr,char **endptr,int base)
;0468: 0xA0EF5539   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0EF3845   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0EF4599   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0EF4A1C   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0EF4A64   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA07BD623   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)
0480: 0xA07BD645   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA07BD669   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA07BD6FD   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA07BCF4F   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA07BCCF3   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA07BD503   ; 125: WSHDR *AllocWS(int len)
0498: 0xA07BD8F7   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA07BD49B   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07BD4BB   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA07BCE35   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA07FD053   ; 12A: void DrawObject(DRWOBJ *)

;Handmaded functions
;4AC: ; 12B: void AddKeybMsgHook(void *proc)
;4B0: ; 12C: int AddKeybMsgHook_end(void *proc)
;4B4: ; 12D: void RemoveKeybMsgHook(void *proc)

04B8: 0xA07F9091   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA07F90B5   ; 12F: void getRGBcolor(int ColorIndex,void *dest)
04C0: 0xA07F90C5   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA07F90E3   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0EF4B1C   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07FDCFD   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA07FDD13   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA07C3FF7   ; 135: int IsGuiOnTop(int id)
04D8: 0xA07C4165   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA07C4187   ; 137: int CreateGUI(void *gui)
04E0: 0xA07C41A5   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA07C4221   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA07C4243   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA07C4265   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA07C4283   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA07C42A1   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA07C42C3   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA07C440F   ; 13F: void DirectRedrawGUI(void)
0500: 0xA07C4429   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA07C4509   ; 141: void PendedRedrawGUI(void)
0508: 0xA07F665D   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA020AF9C   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020C674   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0207048   ; 145: int GBS_GetCurCepid(void)
0518: 0xA020C108   ; 146: void LockSched(void)
051C: 0xA020C190   ; 147: void UnlockSched(void)
0520: 0xA07C37EB   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA089CC2D   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA089A4A1   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA089A40B   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)
0530: 0xA089CC7D   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,const char *Pen,const char *Brush)
0534: 0xA07C4015   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0804227   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0804251   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)
0540: 0xA07F6DBF   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA07F833F   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA07C3385   ; 152: int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA02095D0   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: void KillGBSproc(int cepid)
0554: 0xA0E6C639   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0E6BA0D   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0E6D471   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0E6B8E1   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0E6C777   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0E6C05D   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0E6C3FF   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0E6D067   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0E6D0A9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0E6BCFD   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0E6BF73   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA0E6CBFF   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0EF5768   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA07C0A59   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA07BFF35   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA07C0243   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA07C0BF1   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA07FE019   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA08A2CBF   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)
05A4: 0xA08A2C63   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA08A2C6D   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA07CC49C   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA07CB930   ; 16C: int str_2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05FB1E3   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA055A3BF   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA055ABB5   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)
05C0: 0xA050861D   ; 170: int MakeVoiceCall(char *number,int _0x10, int _0x20C0)

;Handmaded functions
;5C4: ; 171: void SUBPROC(void *,...)
;5C8: ; 172: void REDRAW(void)

05CC: 0xA0AD62A9   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0AD657B   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0AD642D   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0AD66F5   ; 176: int closesocket(int socket)
05DC: 0xA0AD6671   ; 177: int shutdown(int socket,int how)
05E0: 0xA0AD679F   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0AD6A7B   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0B1DD59   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0B1DD65   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA85B8144   ; 17C: int socklasterr(void)
05F4: 0xA07C42E5   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA07C4307   ; 17E: void RestartIDLETMR(void)
05FC: 0xA07C4321   ; 17F: void DisableIDLETMR(void)
0600: 0xA08A2B91   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA08A2AF1   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA08A2B2D   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA08A2B37   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA07C027B   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA020A308   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0AD3E65   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0AD4895   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000012   ; 18A: int HeaderH(void)
062C: 0x00000012   ; 18B: int SoftkeyH(void)
0630: 0xA020C520   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0A1EAA4   ; 18D: int available0(int sock)
0638: 0xA0AEDD35   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA07C6E53   ; 18F: int GetCurMenuItem(void *gui)
0640: 0xA020BBD0   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA020BCFC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA020BE7C   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA020BED4   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020BF30   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA07C8315   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA07C44B7   ; 196: void RefreshGUI(void)
065C: 0xA07C8367   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA07C8475   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA07C82E7   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA07C7C39   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA08A2B41   ; 19B: void EDIT_SetFocus(void *gui, int item)

;Handmaded function
;670: ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)

0674: 0xA08236E0   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA08236A8   ; 19E: void StartCpuUsageCount(void)
067C: 0xA02583B9   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)
0680: 0xA02584EF   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA025932B   ; 1A1: int inflateEnd(z_streamp strm)
0688: 0xA02B9235   ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0882F54   ; 1A3: int GetCurrentGPRSProfile(void)
0690: 0xA0882EF8   ; 1A4: int GetDisconnectTime(void)
0694: 0xA02B925F   ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020B00C   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA07CE82B   ; 1A7: char *Get_CC_NC()
06A0: 0xA0E6C4FD   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0E6D50F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0E6CBC7   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0E6D637   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0E6BF61   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0E6D653   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0E6E3A9   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0E6D60D   ; 1AF: void png_set_strip_16(png_structp png_ptr)
06C0: 0xA0E6E33F   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA0E6D661   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0E6B941   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA07F99F7   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA07F6C8B   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000000   ; 1B5: int isnewSGold(void)
06D8: 0xA0AD6F9B   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0ADC14D   ; 1B7: unsigned int str2ip(const char *)

;Handmaded functions
;6E0: ; 1B8: void *EXT_TOP(void)
;6E4: ; 1B9: void *PNG_TOP(void)
;6E8: ; 1BA: void *LIB_TOP(void)
;6EC: ; 1BB: void *DATA_N_SFB(void)

06F0: 0xA0E51707   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0E513EB   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0E515E7   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0DD511D   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)
0700: 0xA0DD51AB   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0DD5377   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0DD190F   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA07C5473   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA07C53EB   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA080189B   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA08A2B19   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA08A2B23   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA07C0DA9   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA07BFECF   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA07BFEC3   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA07BFEB7   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA07BFEA1   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA07BFE89   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA07BFF71   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA02A0744   ; 1CF: REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)
0740: 0xA02A08C4   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA08A2C89   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA08A2C93   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA08A2B69   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA08A2B73   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0832EAC   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0E6D645   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0E6E40B   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA08A2BB9   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA08A2BCD   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA050E067   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8799798   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA07BD1E5   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA07BD207   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA08A2C59   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA08A2CEF   ; 1DF: void *EDIT_GetUserPointer(void *gui)
0780: 0xA07C9451   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA07FD13F   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA07C2DF7   ; 1E2: int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA07C2CDF   ; 1E3: int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA07C2421   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA08A2D7F   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA07C72C3   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA07DEC54   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA088EB68   ; 1E8: int IsNoJava()

;Handmaded function
;7A4: ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)

07A8: 0xA080209B   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA84CA86A   ; 1EB: char *RAM_IMSI()
07B0: 0xA080210F   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA080213B   ; 1ED: int IsDynIconBusy(int picture)
;7B8: ; 1EE: int ProgressCalculate(int current, int total)
07BC: 0xA080209F   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)
07C0: 0xA02DE668   ; 1F0: filecopy
07C4: 0xA02E0554   ; 1F1: filecopy_op_announce
07C8: 0xA0832B80   ; 1F2: int devmenu_config_IsCheckboxOff(int CheckboxID)
07CC: 0xA021AC38   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA84CAC10   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0EF4D65   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA0802167   ; 1F6: IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA0FCF2A1   ; 1F7: long GetFileSize(char *Filename)
;7E0: ; 1F8: int GetPlayStatus(void)
;7E4: ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA851290C   ; 1FA: char *RamVolumeStep()
07EC: 0xA85176F0   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA07BF9D9   ; 1FC: void CloseCSM(int id)
07F4: 0xA07F6C6F   ; 1FD: SetProp2Square_v2
;7F8: ; 1FE: char *RamLighterPower()
;7FC: ; 1FF: void MEDIA_PLAYLAST()
0800: 0xA0FC7301   ; 200: ScreenShoot
0804: 0xA07F844F   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA095237F   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA07F98A7   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0898D47   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA07F6C49   ; 205: SetProp2Square_v1
0818: 0xA0EF4941   ; 206: void srand(unsigned int seed)
081C: 0xA089C4DF   ; 207: void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA07FD169   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA07BF82F   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA08A2BFF   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA08A2C13   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA08A2C27   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA08A2C3B   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA07C01FD   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA07C00E3   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)
0840: 0xA07C3FE1   ; 210: int GetCurGuiID(void)
0844: 0x000000A1   ; 211: int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA03D9320   ; 212: int CardExplGetCurItem(void *csm)
084C: 0xA0352DB8   ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA07BD725   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA07BD7B5   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA07BCD51   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05D7DC1   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA08AB1C3   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA08AB47B   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA08A2D07   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA08A2D11   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA08A2D4D   ; 21C: int EDIT_IsBusy(void *gui)
0874: 0xA0506ACD   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA07C43BD   ; 21E: void FocusGUI(int id)
087C: 0xA07C43DB   ; 21F: void UnfocusGUI(void)
;880: ; 220: IsSliderClosed
0884: 0xA08EE88C   ; 221: void SetCpuClockLow(int param)
0888: 0xA08EE874   ; 222: void SetCpuClockHi(int param)
;88C: ; 223: IsMediaPlayerInBackground
;890: ; 224: CloseMediaPlayer
0894: 0xA02F4DAC   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02F522C   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA02F52CC   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA02F5310   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0EF5790   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA07D0167   ; 22A: void FreeGSMTXTpkt(void *pkt)
;8AC: ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0: ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4: ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA03539C8   ; 22E: int OpenExplorer(ExplOpenDesc *)
08BC: 0xA84D12E4   ; 22F: TDateTimeSettings *RamDateTimeSettings
08C0: 0xA07D97FF   ; 230: int GetTimeZoneShift(int timeZone)
08C4: 0xA84D128C   ; 231: TAppointment *RamAppointment
08C8: 0xA020A538   ; 232: void GBS_DestroyMessage(GBS_MSG *)
;8CC: ; 233: void GetAllEmail()
;8D0: ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4: ; 235: int GetLunarYearID(int year)
;8D8: ; 236: int GetLunarAnimal(int year)
;8DC: ; 237: char *RamIconBar
08E0: 0xA07D0111   ; 238: void SendAutoUSSDack(void)
08E4: 0xA07CAE78   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA07CAFC4   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA00404BC   ; 23B: void DisableIconBar(int disable)
08F0: 0xA0882F20   ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA0E4E481   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0E4E0F1   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0E4E389   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)
0900: 0xA0E4EE11   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07D9B17   ; 241: void SetDateTime(TDate *, TTime *)
;908: ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C: ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0E43081   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0E43131   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA0351900   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
;91C: ; 247:
;920: ; 248:
;924: ; 249:
;928: ; 24A:
092C: 0xA07C87CB   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02C558D   ; 24C: int GetPeripheryState (int device, int check_state)
0934: 0xA02F5354   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA0366DB0   ; 24E: void* GetPlayObjById(int handle)
093C: 0xA0309E78   ; 24F: int Obs_GetPosition(HObj hObj, int *pos_ms)
0940: 0xA0309D04   ; 250: int Obs_GetDuration(HObj hObj, int *pos_ms)
0944: 0xA83CCFB0   ; 251: unsigned int *RamSizeOfPart()
0948: 0xA83CCF40   ; 252: unsigned int *RamSizeOfRecievedSendFile()
;94C: ; 253:
0950: 0xA0353A04   ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA07C944D   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xA83CD00C   ; 256: char *RamNameOfRecievedSendFile()
095C: 0xA83CCF12   ; 257: char *RamIsSendReceiveBT()
0960: 0xA0801B41   ; 258: int CalcBitmapSize(short w,short h, char type)
0964: 0xA030908C   ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA03099F8   ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA030DC14   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA030745C   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA03075B4   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA030C7B8   ; 25E: int Obs_Start(HObj hObj)
097C: 0xA030807C   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)
0980: 0xA0307F00   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0307A6C   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA030C648   ; 262: int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA030792C   ; 263: int Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA030F158   ; 264: int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA030CAFC   ; 265: int Obs_Pause (HObj hObj)
0998: 0xA030CDA8   ; 266: int Obs_Resume (HObj hObj)
099C: 0xA030CC24   ; 267: int Obs_Stop (HObj hObj)
;9A0:              ; 268: int Obs_Prepare (HObj hObj)
;9A4:              ; 269: int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0309E1C   ; 26A: int Obs_SetPosition (HObj hObj,int ms)
;9AC:              ; 26B: int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA0303F24   ; 26C: int Obs_Sound_SetVolumeEx (HObj hObj, char vol)
09B4: 0xA03046C8   ; 26D: int Obs_Sound_GetVolume (HObj hObj, char *vol)
09B8: 0xA03043F0   ; 26E: int Obs_Sound_SetPurpose (HObj hObj,char purpose)
;9BC: ; 26F:
;9C0: ; 270:
;9C4: ; 271:
;9C8: ; 272:
;9CC: ; 273:
;9D0: ; 274:
;9D4: ; 275:
;9D8: ; 276:
;9DC: ; 277:
;9E0: ; 278:
;9E4: ; 279:
;9E8: ; 27A:
;9EC: ; 27B:
;9F0: ; 27C:
;9F4: ; 27D:
;9F8: ; 27E:
;9FC: ; 27F:
;A00: ; 280:
;A04: ; 281:
;A08: ; 282:
0A0C: 0xA02ED374   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
;A10: ; 284:
;A14: ; 285:
;A18: ; 286:
;A1C: ; 287:
;A20: ; 288:
;A24: ; 289:
;A28: ; 28A:
;A2C: ; 28B:
;A30: ; 28C:
0A34: 0xA8528F8C   ; 28D: char *RamBTNameDevice()
;A38: ; 28E:
;A3C: ; 28F:
;A40: ; 290:
;A44: ; 291:
;A48: ; 292:
;A4C: ; 293:
;A50: ; 294:
;A54: ; 295:
0A58: 0xA02BF137   ; 296: void getProfileNameByN(int n, WSHDR *ws, int entry_of_name)
;A5C: ; 297:
;A60: ; 298:
;A64: ; 299:
;A68: ; 29A:
;A6C: ; 29B:
;A70: ; 29C:
;A74: ; 29D:
;A78: ; 29E:
;A7C: ; 29F:
0A80: 0xA051EDED   ; 2A0: int GetAlarmclockState(int state)
;A84: ; 2A1:
;A88: ; 2A2:
0A8C: 0xA07C734F   ; 2A3: void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA07C49B3   ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA08AB03D   ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A05E9   ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA07C7F45   ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA07C5583   ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA07C364B   ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA07C35BD   ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0805BE1   ; 2AB: void *GetPopupUserPointer(void *gui)
;AB0: ; 2AC: int DeleteSMS(int index, short *del_cnt)
;AB4: ; 2AD: int SetSmsStatus(int index, int type)
0AB8: 0xA07C89D9   ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA0807851   ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)
0AC0: 0xA07C92C5   ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
;AC4: ; 2B1: SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0AF01E5   ; 2B2: int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA0517EAD   ; 2B3: NativeAbData *AllocNativeAbData(void)
0AD0: 0xA0517F33   ; 2B4: int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA0518097   ; 2B5: int GetNativeAbDataType(NativeAbData *nab, int n)
0AD8: 0xA0518433   ; 2B6: WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA05180AB   ; 2B7: int GetNativeAbDataStatus(NativeAbData *nab, int n)
0AE0: 0xA0518513   ; 2B8: int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA05173BD   ; 2B9: unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0807B0B   ; 2BA: void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
;AEC: ; 2BB: void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0803B7F   ; 2BC: void SetGUIDefinition(void *gui, const void *definition)
;AF4: ; 2BD: int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
;AF8: ; 2BE: int SetCursorTab(void *tab_gui, int n)
;AFC: ; 2BF: int UpdateTab1stItem(void *tab_gui, int unk_0)
;B00: ; 2C0: int GetCursorTab(void *tab_gui)
;B04: ; 2C1: void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA08375DD   ; 2C2: int GetSubprovider(WSHDR* ws)
0B0C: 0xA08377F1   ; 2C3: int GetRoamingState()
;B10: ; 2C4: int GetProfileVolumeSetting(int profile, int type)
;B14: ; 2C5: RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA020E1E7   ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA020E239   ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA020E737   ; 2C8: int GetSecondsFromTime(TTime *time)
0B24: 0xA020E121   ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA020E25B   ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA020E749   ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA02087D7   ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA020891B   ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA02082FD   ; 2CE: int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA020E6D9   ; 2CF: int CmpTimes(TTime *time1, TTime *time2)
0B40: 0xA020834D   ; 2D0: int GetDaysFromMonth(TDate *date)
0B44: 0xA020832D   ; 2D1: int IsLeapYear(TDate *date)
;B48: ; 2D2:
0B4C: 0xA05185EB   ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA05180C1   ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA0840839   ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA08067FF   ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA0806DB1   ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA0806D3B   ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA0806DD9   ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA0806DDD   ; 2DA: void *TViewGetUserPointer(void *gui)
0B6C: 0xA03DFC38   ; 2DB: void SendMedia(WSHDR *file, WSHDR *path)
0B70: 0xA0FCF5A1   ; 2DC: void SaveMaxIllumination(int level)
0B74: 0xA0FCF5B1   ; 2DD: int SetIlluminationoffTimeout(int time_sec)
0B78: 0xA07D7517   ; 2DE: void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA07D7533   ; 2DF: void IllumTimeRelease(int TimeMode, int Counter)
;B80: ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA02A0D5C   ; 2E1: int GetExtUidByFileName_ws(WSHDR *path)
0B88: 0xA07BCF7B   ; 2E2: int wstrcmp(WSHDR *ws1, WSHDR *ws2)
;B8C: ; 2E3: int fexists(WSHDR* FileName)
;B90: ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char * entry,char *keyword)
;B94: ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char * entry,char *keyword)
;B98: ; 2E6: int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword)
;B9C: ; 2E7: int SettingsAE_GetFlag(int *res,int set,char * entry,char *keyword)
;BA0: ; 2E8: int SettingsAE_Update(int val,int set,char * entry,char *keyword)
;BA4: ; 2E9: int SettingsAE_Read(int *res,int set,char * entry,char *keyword)
;BA8: ; 2EA: void* SettingsAE_GetEntryList(int set)
;BAC: ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag)
0BB0: 0xA0A96438   ; 2EC: int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA0A96484   ; 2ED: int i2c_receive(I2C_MSG *msg)
0BB8: 0xA02072DC   ; 2EE: unsigned int GetMemUsedByCepID(short cepid)
0BBC: 0xA0203D1C   ; 2EF: unsigned int GetFreePermMemory(void)
0BC0: 0xA089A4E9   ; 2F0: int PushDRWOBJOnLAYER(DRWOBJ*, LCDLAYER *)
0BC4: 0xA089C14F   ; 2F1: int LCDRedrawLAYER(LCDLAYER *)
0BC8: 0xA0206DD0   ; 2F2: GBSPROC *GetGBSProcAddress(short cepid)
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

