;CX75v25
;Большая Библиотека Функций
;Big Function Library
;(c) avkiev
;(r) sempai, NForce
;(p) Grizzzzly
;Version: 9
;PatchID: 6331
;Details: https://patches.kibab.com/patches/details.php5?id=6331
/*

*/
+0FD4000
#pragma enable old_equal_ff
;000: 0x   ; f000: SWI_0
;004: 0x   ; f001: SWI_1
;008: 0x   ; f002: SWI_2
;00C: 0x   ; f003: SWI_3
;010: 0x   ; f004: SWI_4
014: 0xA020EB99   ; f005: DecToHex
018: 0xA081B5B4   ; f006: GetAkku
01C: 0xA0A85A11   ; f007: GetLP
020: 0xA081C448   ; f008: SetIllumination
024: 0xA0A9A134   ; f009: SwitchPhoneOff
;
028: 0xA07CC5B0   ; f010: fopen
;02C: 0xA07CC5F0   ; f011: fread
02C: 0xA0FD9401   ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;030: 0xA07CC6D8   ; f012: fwrite
030: 0xA0FD9451   ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
034: 0xA07CC504   ; f013: fclose
038: 0xA07CC534   ; f014: fflush
03C: 0xA07CC564   ; f015: lseek
040: 0xA07CC394   ; f016: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
044: 0xA0FCF201   ; f017: OpenReadCloseFile
048: 0xA08DF2D4   ; f018: GetFileAttrib
04C: 0xA08DEDE0   ; f019: SetFileAttrib
;
050: 0xA0203C24   ; f020: malloc
054: 0xA0203C8C   ; f021: mfree
058: 0xA0EF3899   ; f022: sPrintf
05C: 0xA0EF5181   ; f023: strcat
060: 0xA0EF51A1   ; f024: strchr
064: 0xA0EF51C4   ; f025: strcmp
068: 0xA0EF5261   ; f026: strcopy
06C: 0xA0EF52E1   ; f027: StrLen
070: 0xA07BD791   ; f028: wsAppendChar
074: 0xA07BD745   ; f029: wsInsertChar
;
078: 0xA0801A61   ; f030: GetPITaddr
07C: 0xA02CCDF1   ; f031: DrawMainScreen
080: 0xa0CD3EE1   ; f032: DrawScreenSaver
084: 0xA0801BA7   ; f033: GetImgHeight
088: 0xA0801BB7   ; f034: GetImgWidth
08C: 0xA02A944B   ; f035: DrawImg
090: 0xA07F8429   ; f036: DrawImage2
094: 0xA02A9425   ; f037: DrawCanvas
098: 0xa07F8369   ; f038: DrawImgBW
09C: 0xa02A8D0D   ; f039: AddIconToIconbar
;
0A0: 0xA081D66C   ; f040: getEELiteMaxID
0A4: 0xA07CAF08   ; f041: getEEFullMaxID
0A8: 0xA081D528   ; f042: GetEELiteBlockAddress
0AC: 0xA081D610   ; f043: getEELiteBlockSizeVersion
0B0: 0xA07CAB4C   ; f044: getEEFullBlockSizeVersion
0B4: 0xA081D6A0   ; f045: StartWriteEELiteBlock
0B8: 0xA081D71C   ; f046: FinishWriteEELiteBlock
0BC: 0xA081D678   ; f047: DeleteEELiteBlock
0C0: 0xA081D6D8   ; f048: WriteEELiteBlock
0C4: 0xA0EF5429   ; f049: strrchr
;
0C8: 0xA02FC5B8   ; f050: PlaySound
0CC: 0xA02F1EB0   ; f051: PlaySound2
0D0: 0xA02B4AD4   ; f052: PlaySoundLoop
0D4: 0xA058A99B   ; f053: AlarmClockRing
0D8: 0xA04F2F39   ; f054: GetATCmdString
0DC: 0xA0594D0B   ; f055: OriginalATCGSN
0E0: 0xA04F28D5   ; f056: PostAtCommand
0E4: 0xA04F4027   ; f057: SendATAnswerStr
0E8: 0xA08FD7CD   ; f058: mfree_high
0EC: 0xA0EF4575   ; f059: MemChr
;
0F0: 0xA07CC630   ; f060: SetFileSize
0F4: 0xA050E9CF   ; f061: editOrNewTXTModule
0F8: 0xA04EF0E5   ; f062: LoadProcesses
0FC: 0xA07F9091   ; f063: GetPaletteAdrByColorIndex
100: 0xa0326987   ; f064: GetVibraStatus
104: 0xa08377DB   ; f065: GetProvider
108: 0xA02D0155   ; f066: IsScreenSaver
10C: 0xA0800BEB   ; f067: IsUnlocked
110: 0xA085C009   ; f068: TempLigntOn
114: 0xa0351900   ; f069: GetWavLen
;
118: 0xa02CF649   ; f070: HasNewSMS
11C: 0xa02CE785   ; f071: HasFlashSMS
120: 0xa02CB163   ; f072: ReadNewSMS
124: 0xa0510AB3   ; f073: ReadFlashSMS
128: 0xa02F49B4   ; f074: PlayFile
12C: 0xA088F438   ; f075: StartMidlet
130: 0xa05584AD   ; f076: GetMissedCallsCount
134: 0xA020AF00   ; f077: CallAfterTimer
138: 0xA07C37EB   ; f078: ShowMsgInR1_3
13C: 0xA07C37FB   ; f079: ShowMsgInR1_4
;
140: 0xA07C3863   ; f080: ShowMsgInR1_7
144: 0xA0B41CB5   ; f081: GetNetAccessMode
148: 0xA081CAF4   ; f082: GetIlluminationDataTable
14C: 0xa0EF4599   ; f083: memcmp
150: 0xA020EBD5   ; f084: StrToInt
154: 0xA0D78E23   ; f085: SwitchVibraOnOff
;158: 0x   ; f086: PlayVibra
15C: 0xa020B00C   ; f087: IsCallAfterTimerStillRunning
160: 0xA0219F1C   ; f088: ClearMemory
164: 0xa0EF4A64   ; f089: memcpy
;
168: 0xa0800467   ; f090: KeypressOn
16C: 0xa0800595   ; f091: KeypressOff
170: 0xa03B5451   ; f092: GetCPUClock
174: 0xa03B548B   ; f093: GetCPULoad
178: 0xa03B5459   ; f094: GetMMIMemUsed
17C: 0xa03B5463   ; f095: GetNonPermMemAvail
180: 0xA0326BA7   ; f096: ShowMainMenu
184: 0xA032B0CF   ; f097: ShowNativeMenu
;188: 0x   ; f098: SetVibraStatus
18C: 0xa02C93EB   ; f099: MS_Wallpaper_Flush

;
190: 0xa062773C   ; f100: TriggerUpdate
194: 0xa0835249   ; f101: EndCall
198: 0xa07CD62B   ; f102: EndCallBusy
19C: 0xa02A8759   ; f103: IsDirectCallActive
1A0: 0xa02A5E67   ; f104: GetScreenSaverRAM
1A4: 0xa020C108   ; f105: LockSched
1A8: 0xa020C190   ; f106: UnlockSched
1AC: 0xa07CC2E8   ; f107: FindFirstFile
1B0: 0xa07CC324   ; f108: FindNextFile
1B4: 0xa07CC270   ; f109: FindClose
;
1B8: 0xa0AB026B   ; f110: IsCalling
1BC: 0xa02C9C93   ; f111: RefreshGPRSTraffic
1C0: 0xa02C9CB1   ; f112: GetGPRSTrafficPointer
1C4: 0xa07F6DBF   ; f113: DrawRoundRect
1C8: 0xa0554667   ; f114: SetCurrentSecondOfCall
1CC: 0xa0AB0A83   ; f115: GetTypeOfCall
1D0: 0xa0327163   ; f116: GetFunctionPointer
1D4: 0xa07FDCFD   ; f117: StoreXYWHtoRECT
1D8: 0xa089CC2D   ; f118: SetWindowText
1DC: 0xa089A40B   ; f119: set2color_byPaletteAdr
;
1E0: 0xa07DA6ED   ; f120: GetTimeFormat
1E4: 0xa07FD053   ; f121: DrawObject
1E8: 0xa089A4A1   ; f122: ClearWindowBuffer
1EC: 0xa02BFAF1   ; f123: GetProfileFilter
1F0: 0xA08257C0   ; f124: SetVibration
1F4: 0xA0AAFC85   ; f125: IsIncognitoCall
1F8: 0xA0AEB155   ; f126: Rand
;1FC: 0x   ; f127: IsPlayerOn
200: 0xA058B1F9   ; f128: GetCallsList
204: 0xA0EF4CF4   ; f129: HexToDec
;
;208: 0x   ; f130: GetCurrentTrackFilename
20C: 0xA02DD144   ; f131: GetPathOfFoundFile
210: 0xA07CC464   ; f132: GetFileStats
214: 0xA0208A15   ; f133: StrCmpNoCase
218: 0xA07CAA74   ; f134: ReadEEPROMData
21C: 0xA07CABB8   ; f135: WriteEEPROMData
;220: 0x   ; f136: GetAccessoryType
;224: 0x   ; f137: GetLangMesIntoWS
228: 0xA07CC200   ; f138: GetFreeFlexSpace
22C: 0xA07CC7C4   ; f139: GetTotalFlexSpace
;
230: 0xA02A1014   ; f140: RegExplorerExt(REGEXPLEXT
;234: 0x   ; f141: GetProfileName
238: 0xA07CC3C4   ; f142: fmove
23C: 0xA07CC3FC   ; f143: rmdir
240: 0xA07CC6A0   ; f144: truncate
244: 0xA07CC364   ; f145: isdir
248: 0xA07CC464   ; f146: stat
;24C: 0x   ; f147: 
250: 0xA02A10D8   ; f148: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;254: 0x   ; f149: 
;
;258: 0x   ; f150: 
;25C: 0x   ; f151: 
;260: 0x   ; f152: 
;264: 0x   ; f153: 
;268: 0x   ; f154: 
;26C: 0x   ; f155: 
;270: 0x   ; f156: 
;274: 0x   ; f157: 
;278: 0x   ; f158: 
27C: 0xA07F6C8B   ; f159: DrawRect
;
280: 0xa07BCCF3   ; f160: wsprintf
284: 0xa0208AE5   ; f161: wstrcpy
288: 0xa07BD283   ; f162: Unicode_GetCharByPosition
28C: 0xA07CBA50   ; f163: ws_2str
290: 0xA07BD503   ; f164: wsAlloc
294: 0xA07BCE35   ; f165: wsFree
;298: 0x   ; f166: 
;29C: 0x   ; f167: 
;2A0: 0x   ; f168: 
;2A4: 0x   ; f169: 
;
2A8: 0xA0FCF001   ; f170: OpenWriteCloseFile
2AC: 0xA0002070   ; f171: SWI_AB
2B0: 0xA0FCF1B1   ; f172: DrawText
2B4: 0xA0FCF0A1   ; f173: StrAnsi2Uni
2B8: 0xA0FCF0C1   ; f174: StrUni2Ansi
2BC: 0xA0FCF051   ; f175: Hex2Int
2C0: 0xA0FCF351   ; f176: DrawPicWithCanvas
2C4: 0xA0FCF371   ; f177: DrawColorPicWithCanvas
2C8: 0xA0FC3E29   ; f178: GetBuildCanvas
2CC: 0xA0FCF301   ; f179: Seconds2iTime
;
2D0: 0xA07D986F   ; f180: GetDateTime
2D4: 0xA020845B   ; f181: GetWeek
2D8: 0xA02BF4AD   ; f182: GetProfile
2DC: 0xA02BF35B   ; f183: SetProfile
2E0: 0xA0EF4BD8   ; f184: dwMODdw
2E4: 0xA0800E73   ; f185: KbdUnlock
2E8: 0xA0EF4BC0   ; 0B8: __arm void *memset(void *s, int c, int n);
2EC: 0xA0203C98   ; 0B9: __arm void *realloc(void *ptr, int size);
2F0: 0xA0219FE8   ; 0BA: __arm int divide(int divisor, int dividend);
2F4: 0xA0EF4CAC   ; 0BB: __arm  int DivBy10(int divident);
;
2F8: 0xA0FC0C91   ; f190: RunScaner (MPv14)
2FC: 0xA0FC3001   ; f191: SpellTime
300: 0xA0FC7601   ; f192: MiniGPS
304: 0xA0FC0C51   ; f193: RunDispatcher
308: 0xA0FC12A1   ; f194: GetAllPatchesByInject
30C: 0xA0FCF3A1   ; f195: ProcessFiles
310: 0xA0FC0C01   ; f196: GetBuffer
;314: 0x   ; f197: PIT_Manager_Core
;318: 0x   ; f198: 
;31C: 0x   ; f199: CallLibFunByNumber

;
320: 0xA850D368   ; f200: RamCap
324: 0xA850D36a   ; f201: RamLS
328: 0xA851A9D4   ; f202: RamNet
32C: 0xA851A9Da   ; f203: RamNetRX
330: 0xA8411778   ; f204: RamMissedCalls
334: 0xA841176C   ; f205: RamMissedSMS
338: 0xA84D12c0   ; f206: RamDateTime
33C: 0xA852662C   ; f207: RamAlarm
;340: 0x   ; f208: RamAccPoint
344: 0xA84CB508   ; f209: RamScreensaver
;
;348: 0x   ; f210: RamAutoTime
34C: 0xA84CB50c   ; f211: RamStby
350: 0xA841175c   ; f212: RamMissedMes
354: 0xA84FF8F4   ; f213: RamIsLocked
358: 0xA84CFC64   ; f214: RamNetOnline
;35C: 0x   ; f215: RamScreenBrightness
360: 0xA84D10DD   ; f216: RamMenuAnywhere
364: 0xA8517350   ; f217: RamShutdownMode
368: 0xA8559938   ; f218: RamIsShutdown
36C: 0xA84CB538   ; f219: RamMainscreenAccuIcon
;
370: 0xA85BFD90   ; f220: RamRandSeed
374: 0xA899F2BC   ; f221: RamCurrentTrack
;378: 0x   ; f222: 
37C: 0xA84FF804   ; f223: RamPressedKey
380: 0xA84E8CB0   ; f224: RamScreenBuffer
;384: 0x   ; f225: 
;388: 0x   ; f226: 
38C: 0xA851BC60   ; f227: RamProfileNum
390: 0xA8780000   ; f228: FreeRAM
394: 0x0000130d   ; f229: LP_MonthsShort
;
398: 0x000004FF   ; f230: Pic_Big0
39C: 0x0000047A   ; f231: Pic_Little0
3A0: 0x0000050D   ; f232: Pic_Extra
3A4: 0x00000565   ; f233: Pic_Profiles
3A8: 0x00000313   ; f234: Pic_Vibra
3AC: 0x000004B6   ; f235: Pic_Call
3B0: 0x0000056C   ; f236: Pic_AdvNet
3B4: 0x000011fb   ; f237: LP_MonthsLong
3B8: 0x0000042c   ; f238: LP_Weekdays
3BC: 0x0000057D   ; f239: Pic_Calendar
;
3C0: 0x00000557   ; f240: Pic_AccuGraph
3C4: 0xA02CCC01   ; f241: BuildCanvas
;3C8: 0x   ; f242: lpRAM_PIT
;3CC: 0x   ; f243: RAM_PIT_Cap
;3D0: 0x   ; f244: 
;3D4: 0x   ; f245: 
;3D8: 0x   ; f246: 
;3DC: 0x   ; f247: 
3E0: 0xA0FD0050 ; f248: Additional_PIT_address
3E4: 0x00000557 ; f249: Additional_PIT_start
3E8: 0x000005BB ; f250: Additional_PIT_end
3EC: 0xA0FC0800 ; f251: 
3F0: 0xA0FC0A00 ; f252: PictureRelocationTable
3F4: 0x0000F000 ; f253: PictureRelocationBase
3F8: 0x00001E1E ; f254: NextPictureMagic
;3FC: 0x   ; f255: 

;High Library

0400: 0xA020A770   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020970C   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209E0C   ; 102: GBS_AcceptMessage(void)
040C: 0xA0209B34   ; 103: GBS_ClearMessage(void)
0410: 0xA0209D04   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA020ABE0   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84C9964   ; 106: CSM_root()
041C: 0xA07BF7AD   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA07BF7BF   ; 108: FindCSMbyID(int id)
0424: 0xA07BF883   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA02CE23D   ; 10F: freeUSSD()

0440: 0xA0208AE5   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA02CE279   ; 111: GetTypeUSSD()
0448: 0xA02CE289   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0EF52B1   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0EF532D   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0EF535D   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0EF53AD   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0EF5429   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0EF5441   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0EF54BD   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0EF5539   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0EF3845   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0EF4599   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0EF4A1C   ; 11D: zeromem(void *dest,int n)
0478: 0xA0EF4A64   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA07BD623   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA07BD645   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA07BD669   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA07BD6FD   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA07BCF4F   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA07BCCF3   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA07BD503   ; 125: AllocWS(int len)
0498: 0xA07BD8F7   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA07BD49B   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07BD4BB   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA07BCE35   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA07FD053   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA0002070   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA0FFF06F   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA0FFF09F   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA07F9091   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA07F90B5   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA07F90C5   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA07F90E3   ; 131: setColor(int a,int r,int g,int b,void *dest)
;4C8:              ; 132: 
04CC: 0xA07FDCFD   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA07FDD13   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA07C3FF7   ; 135: IsGuiOnTop(int id)
04D8: 0xA07C4165   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA07C4187   ; 137: CreateGUI(void *gui)
04E0: 0xA07C41A5   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA07C4221   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA07C4243   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA07C4265   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA07C4283   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA07C42A1   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA07C42C3   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA07C440F   ; 13F: DirectRedrawGUI(void)

0500: 0xA07C4429   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA07C4509   ; 141: PendedRedrawGUI(void)
0508: 0xA07F665D   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA020AF9C   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020C674   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0207048   ; 145: GBS_GetCurCepid(void)
0518: 0xA020C108   ; 146: LockSched(void)
051C: 0xA020C190   ; 147: UnlockSched(void)
0520: 0xA07C37CD   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA089CC2D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA089A4A1   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA089A40B   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA089CC7D   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA07C4015   ; 14D: GetTopGUI(void)
0538: 0xA0804227   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0804251   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA07F6DBF   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA07F833F   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA07C3385   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA02095D0   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: KillGBSproc(int cepid)
0554: 0xA0E6C4FD   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0E6BA0D   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA0E6D471   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0E6B8E1   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0E6C725   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0EB80E7   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0E6C3FF   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0E6D067   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0E6D0A9   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0E6D471   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA0E6BF73   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0E6CBFF   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0EF5768   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA07C0A59   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA07BFF35   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA07C0243   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA07C0BF1   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA07FE019   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA08A2CBF   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA08A2C63   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA08A2C6D   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA07CC49C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA07CB930   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA05FB1E3   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA055A3BF   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA055ABB5   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA050861D   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)

05CC: 0xA0AD62A9 ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA0AD657B ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA0AD642D ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA0AD66F5 ; 176: __thumb int closesocket(int socket);
05DC: 0xA0AD6671 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA0AD679F ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA0AD6A7B ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0B1DD59 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA0B1DD65 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA85B8144 ; 817C: __arm int socklasterr(void);

05F4: 0xA07C42E5 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA07C4307 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA07C4321 ; 17F: __thumb void DisableIDLETMR(void);

0600: 0xA08A2B91 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA08A2AF1 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA08A2B2D ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA08A2B4B ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA07C027B ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);

0614: 0xA020A308 ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA0AD3E65 ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA0AD4895 ;187: __thumb int RequestLMANConnect(LMAN_DATA *);

0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000016 ; 818A: __adr int HeaderH(void);
062C: 0x00000016 ; 818B: __adr int SoftkeyH(void);


0630: 0xA020C520 ;18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0A1EAA4 ;18D: __arm int available0(int sock);
0638: 0xA0AEDD35 ;18E: __thumb void GPRS_OnOff(int on, int _1);

063C: 0xA07C6E53 ;18F: __thumb int GetCurMenuItem(void *gui);

0640: 0xA020BBD0 ;190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA020BCFC ;191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA020BE7C ;192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA020BED4 ;193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA020BF30 ;194: __arm void MutexUnlock(MUTEX *mtx);

0654: 0xA07C8315 ;195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA07C44B7 ;196: __thumb void RefreshGUI(void);
065C: 0xA07C8367 ;197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA07C8475 ;198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA07C82E7 ;199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA07C7C39 ;19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA08A2B41 ;19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
;0674: 0x ;19D: __arm long long getCpuUsedTime_if_ena(void);
;0678: 0x ;19E: __arm void StartCpuUsageCount(void);

067C: 0xA02583B9 ;19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA02584EF ;1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA025932B ;1A1: __thumb int inflateEnd(z_streamp strm);

#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

