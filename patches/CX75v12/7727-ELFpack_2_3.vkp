;CX75v12
;ELFpack
;ELFpack
;(c) Rst7/CBSIE, BoBa, Kren
;(p) Geka
;Version: 2.3
;PatchID: 7727
;Details: https://patches.kibab.com/patches/details.php5?id=7727
/*
ELFpack v2.3 (C)2007 by Rst7/CBSIE, BoBa, Kren
Release 20.07.2007
CX75v12

Много доделок/переделок, подробности в логе на SVN

*/

+0FD4000
#pragma enable  old_equal_ff
0000: 0xA0002070   ;   0: __arm void loopback0()
0004: 0xA0002070   ;   1: __arm void loopback1()
0008: 0xA0002070   ;   2: __arm void loopback2()
000C: 0xA0002070   ;   3: __arm void loopback3()
0010: 0xA0002070   ;   4: __arm void loopback4()
0014: 0xA020EAF5   ;   5: __thumb DecToHex
0018: 0xA0818DF0   ;   6: __arm int GetAkku(int param1,int param2)
001C: 0xA0A81D65   ;   7: __thumb GetLP
0020: 0xA0819C84   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0A9646C   ;   9: __arm void SwitchPhoneOff(void)
0028: 0xA07CA1DC   ;   A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ;   B: EP__arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ;   C: EP__arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA07CA130   ;   D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA07CA160   ;   E: __arm fflush
003C: 0xA07CA190   ;   F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA07C9FC0   ;  10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0FCF201   ;  11: API __thumb char *OpenReadCloseFile(char *path,void *ram)
0048: 0xA07C9EDC   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA07CA058   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203B60   ;  14: __arm void *malloc(unsigned int size)
0054: 0xA0203BC8   ;  15: __arm void mfree(void *)
0058: 0xA0EEF30D   ;  16: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA0EF0BF5   ;  17: __thumb char * strcat (char *,const char *)
0060: 0xA0EF0C15   ;  18: __thumb char * strchr (const char *,int)
0064: 0xA0EF0C38   ;  19: __arm int  strcmp (const char *,const char *)
0068: 0xA0EF0CD5   ;  1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0EF0D55   ;  1B: __thumb unsigned int strlen(char *)
0070: 0xA07BB429   ;  1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA07BB3DD   ;  1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA07FF29D   ;  1E: __thumb IMGHDR *GetPITaddr(int num)
007C: 0xA02CCB9B   ;  1F: ;__thumb DrawMainScreen

0080: 0xA0CCFE2F   ;  20: ;__thumb DrawScreenSaver
0084: 0xA07FF3E3   ;  21: __thumb int GetImgHeight(int picture)
0088: 0xA07FF3F3   ;  22: __thumb int GetImgWidth(int picture)
008C: 0xA02A92CF   ;  23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA07F5CA9   ;  24: __thumb DrawImage2
0094: 0xA02A92A9   ;  25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA07F5BE9   ;  26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA02A8B93   ;  27: __thumb AddIconToIconbar
00A0: 0xA081AEA8   ;  28: ;__arm getEELiteMaxID
00A4: 0xA07C8B34   ;  29: ;__arm getEEFullMaxID
00A8: 0xA081AD64   ;  2A: ;__arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA081AE4C   ;  2B: ;__arm getEELiteBlockSizeVersion
00B0: 0xA07C8778   ;  2C: ;__arm getEEFullBlockSizeVersion
00B4: 0xA081AEDC   ;  2D: ;__arm StartWriteEELiteBlock
00B8: 0xA081AF58   ;  2E: ;__arm FinishWriteEELiteBlock
00BC: 0xA081AEB4   ;  2F: ;__arm DeleteEELiteBlock

00C0: 0xA081AF14   ;  30: ;__arm WriteEELiteBlock
00C4: 0xA0EF0E9D   ;  31: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA02FBC58   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02F1A58   ;  33: __arm PlaySound2
00D0: 0xA02B4900   ;  34: __arm PlaySoundLoop
00D4: 0xA0589CFB   ;  35: __thumb void AlarmClockRing(void)
00D8: 0xA04F27C9   ;  36: ;__thumb GetATCmdString
00DC: 0xA059406F   ;  37: ;__thumb OriginalATCGSN
00E0: 0xA04F2165   ;  38: ;__thumb PostAtCommand
00E4: 0xA04F389F   ;  39: ;__thumb SendATAnswerStr
00E8: 0xA04EDAE5   ;  3A: __thumb mfree_high
00EC: 0xA0EEFFE9   ;  3B: __thumb MemChr
00F0: 0xA07CA25C   ;  3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA050E1C3   ;  3D: __thumb void editOrNewTXTModule(char *file)
00F8: 0xA04EE9A1   ;  3E: __thumb LoadProcesses
00FC: 0xA07F6911   ;  3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA0326027   ;  40: __thumb int GetVibraStatus()
0104: 0xA0834DBB   ;  41: __thumb char GetProvider(WSHDR *ws, int zero)
0108: 0xA02CFEC5   ;  42: __arm int IsScreenSaver(void)
010C: 0xA07FE43B   ;  43: __arm int IsUnlocked(void)
0110: 0xA08595DD   ;  44: __thumb void TempLigntOn(void *)
0114: 0xA0350EF4   ;  45: __arm GetWavLen
0118: 0xA02CF3F5   ;  46: __thumb int HasNewSMS()
011C: 0xA02CE531   ;  47: __thumb int HasFlashSMS()
0120: 0xA02CAF7B   ;  48: __thumb int ReadNewSMS(void)
0124: 0xA051026F   ;  49: __thumb int ReadFlashSMS(void)
0128: 0xA02F4054   ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA088C9F4   ;  4B: __arm void StartMidlet(char *midlet)
0130: 0xA0557911   ;  4C: __thumb GetMissedCallsCount
0134: 0xA020AE5C   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA07C1423   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA07C1481   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA07C148B   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0B3DC1D   ;  51: __thumb GetNetAccessMode
0148: 0xA081A330   ;  52: __arm char *GetIlluminationDataTable()
014C: 0xA0EF000D   ;  53: __thumb int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020EB31   ;  54: __thumb int StrToInt(char *str)
0154: 0xA032603D   ;  55: __thumb int SwitchVibraOnOff(void)
0158: 0xA0FCF421   ;  56: API PlayVibra
015C: 0xA020AF68   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0EF0490   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA0EF04D8   ;  59: __arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA07FDCB7   ;  5A: __thumb void KeypressOn(int key)
016C: 0xA07FDDE5   ;  5B: __thumb KeypressOff
0170: 0xA08EBB90   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA03B4923   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA03B48F1   ;  5E: __thumb GetMMIMemUsed
017C: 0xA0203BD4   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA0326247   ;  60: __thumb void ShowMainMenu()
0184: 0xA032A757   ;  61: __thumb void ShowNativeMenu()
;188:              ;  62: __unknown SetVibraStatus
018C: 0xA02C91F7   ;  63: __thumb MS_Wallpaper_Flush
0190: 0xA07C1E91   ;  64: __thumb TriggerUpdate
0194: 0xA0832829   ;  65: __thumb void EndCall()
0198: 0xA07CB257   ;  66: __thumb void EndCallBusy()
019C: 0xA02A85E1   ;  67: __thumb int IsDirectCallActive()
01A0: 0xA02A5D5B   ;  68: __thumb GetScreenSaverRAM
01A4: 0xA020C064   ;  69: __arm void LockSched_2(void)
01A8: 0xA020C0EC   ;  6A: __arm void UnlockSched_2(void)
01AC: 0xA07C9F14   ;  6B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA07C9F50   ;  6C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA07C9E9C   ;  6D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0AAC5A3   ;  6E: __thumb int IsCalling(void)
01BC: 0xA02C9A9F   ;  6F: __thumb void RefreshGPRSTraffic()

01C0: 0xA02C9ABD   ;  70: __thumb int *GetGPRSTrafficPointer()
01C4: 0xA07F463F   ;  71: __thumb DrawRoundRect
01C8: 0xA0553ACB   ;  72: __thumb SetCurrentSecondOfCall
01CC: 0xA0AACDBB   ;  73: __thumb int GetTypeOfCall(int type)
01D0: 0xA03267EB   ;  74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA07FB54D   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA089A1A9   ;  76: __thumb SetWindowText
01DC: 0xA0897987   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA07D81C3   ;  78: __thumb int GetTimeFormat()
01E4: 0xA07FA8D3   ;  79: __thumb void  DrawObject_2(DRWOBJ *)
01E8: 0xA0897A1D   ;  7A: __thumb ClearWindowBuffer
01EC: 0xA02BFA09   ;  7B: __thumb GetProfileFilter
01F0: 0xA0822FC0   ;  7C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA0AABFBD   ;  7D: __thumb IsIncognitoCall
01F8: 0xA0AE70BD   ;  7E: __thumb Rand
01FC: 0x00000000   ;  7F: API IsPlayerOn

0200: 0xA058A559   ;  80: __thumb void int ShowCallList(int list, int zero)
0204: 0xA0EF0768   ;  81: __arm int HexToDec(int hex)
;208:              ;  82: __unknown GetCurrentTrackFilename
020C: 0xA02DCE6C   ;  83: __arm GetPathOfFoundFile
0210: 0xA07CA090   ;  84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208941   ;  85: __thumb StrCmpNoCase
0218: 0xA07C86A0   ;  86: __arm ReadEEPROMData
021C: 0xA07C87E4   ;  87: __arm WriteEEPROMData
;220:              ;  88: __unknown GetAccessoryType
;224:              ;  89: __unknown GetLangMesIntoWS
0228: 0xA07C9E2C   ;  8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA07CA3F0   ;  8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA02A0F2C   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *)
;234:              ;  8D: __unknown GetProfileName
0238: 0xA07C9FF0   ;  8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA07CA028   ;  8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA07CA2CC   ;  90: __arm int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA07C9F90   ;  91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA07EDD1C   ;  92: __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA0A96478   ;  93: __arm void RebootPhone()
0250: 0xA02A0FF0   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: EP __arm int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ;  96: __unknown GetWavLenByContent
025C: 0x00000000   ;  97: API CreatePath
0260: 0x00000000   ;  98: API void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA02F42E4   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA0824B04   ;  9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA8763898   ;  9B: RamAudioParamsAddr
;270:              ;  9C: __unknown CloseScreensaver
0274: 0xA097ADD5   ;  9D: __thumb int GetMissedEventsPtr()
0278: 0x00000000   ;  9E: API int GetMissedEventCount(unsigned int Event)
027C: 0xA07F450B   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA07BA98B   ;  A0: __thumb int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA0208A21   ;  A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA07BAF1B   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA07C967C   ;  A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07BB19B   ;  A4: __thumb WSHDR * AllocWS_2(int len)
0294: 0xA07BAACD   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA02C9A65   ;  A6: __thumb void ResetGPRSTraffic()
029C: 0xA02C98B1   ;  A7: __thumb char IsGPRSEnabled()
02A0: 0xA0AE93F1   ;  A8: __thumb char IsGPRSConnected()
02A4: 0xA07FEA4B   ;  A9: __thumb void KbdLock()
02A8: 0xA07FECDD   ;  AA: __thumb char *GetCurrentLocale()
02AC: 0xA0002070   ;  AB: __arm void loopback171()
02B0: 0xA0FCF1B1   ;  AC: API DrawText
02B4: 0xA0FCF0A1   ;  AD: API StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: API StrUni2Ansi
02BC: 0xA0FCF051   ;  AF: API Hex2Int

02C0: 0xA0FCF351   ;  B0: API DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1: API DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: API GetBuildCanvas
02CC: 0xA0FCF301   ;  B3: API Seconds2iTime
02D0: 0xA07D7347   ;  B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA0208397   ;  B5: __thumb char GetWeek(TDate*)
02D8: 0xA02BF2D5   ;  B6: __thumb char GetProfile()
02DC: 0xA02BF183   ;  B7: __thumb char SetProfile(char)
02E0: 0xA0EF064C   ;  B8: __arm int sdiv(int denom,int number)
02E4: 0xA07FE6C3   ;  B9: __thumb void KbdUnlock()
02E8: 0xA0203B6C   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA0EF0634   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0219F54   ;  BC: __arm int udiv(int divisor, int dividend)
02F4: 0xA0EF0724   ;  BD: __arm int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE: MP RunScaner
02FC: 0xA0FC3001   ;  BF: MP SpellTime

0300: 0xA0FC7601   ;  C0: MP MiniGPS
0304: 0xA0FC0C51   ;  C1: MP RunDispatcher
0308: 0xA0FC12A1   ;  C2: MP GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3: MP ProcessFiles
0310: 0xA0FC0C01   ;  C4: MP GetBuffer
0314: 0x00000000   ;  C5: MP PIT_Manager_Core
0318: 0xA0A82A2C   ;  C6: __arm char GetAkkuCapacity()
031C: 0x00000000   ;  C7: __arm void CallLibFunByNumber(int num)
0320: 0xA850D31C   ;  C8: __arm unsigned short *RamCap()
0324: 0xA850D31E   ;  C9: __arm RamLS
0328: 0xA851A984   ;  CA: __arm RAMNET * RamNet()
034C: 0xA84CB4B4   ;  D3: RamStby
0364: 0xA8517300   ;  D9: RamShutdownMode
036C: 0xA84CB4F4   ;  DB: RamMainscreenAccuIcon
0378: 0xA8518781   ;  DE: RamIsSimPresent
037C: 0xA84FF7B8   ;  DF: RamPressedKey

0380: 0xA84E8C60   ;  E0: __arm void * RamScreenBuffer()
;384:              ;  E1: __unknown RamMPlayer_CtrlCode()
0388: 0xA8501494   ;  E2: RamKeyBuffer
038C: 0xA851BC10   ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: FreeRAM
0394: 0x000012FC   ;  E5: LP_MonthsShort
0398: 0x000004FF   ;  E6: Pic_Big
039C: 0x0000047A   ;  E7: Pic_Little
03A0: 0x0000050D   ;  E8: Pic_Extra
03A4: 0x00000565   ;  E9: Pic_Profiles
03A8: 0x00000313   ;  EA: Pic_Vibra
03AC: 0x000004B6   ;  EB: Pic_Call
03B0: 0x0000056C   ;  EC: Pic_AdvNet
03B4: 0x000011EA   ;  ED: LP_MonthsLong
03B8: 0x00000427   ;  EE: LP_Weekdays
03BC: 0x0000057D   ;  EF: Pic_Calendar

03C0: 0x00000557   ;  F0: Pic_AccuGraph
03C4: 0xA02CC985   ;  F1: __thumb void *BuildCanvas()
03C8: 0x00000000   ;  F2: MP lpRAM_PIT
03CC: 0x00000000   ;  F3: MP RAM_PIT_Cap
03D0: 0x00000585   ;  F4: MP Pic_Lani
03E0: 0xA0FD0050   ;  F8: MP Additional_PIT_address
03E4: 0x00000557   ;  F9: MP Additional_PIT_start
03E8: 0x000005BB   ;  FA: MP Additional_PIT_end
03F0: 0xA0FC0A00   ;  FC: MP PictureRelocationTable
03F4: 0x0000F000   ;  FD: MP PictureRelocationBase
03F8: 0x00001E1E   ;  FE: MP NextPictureMagic
03FC: 0xA0FD4000   ;  FF: __arm unsigned int AddrLibrary()

0400: 0xA020A6CC   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0209668   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209D68   ; 102: __arm void GBS_AcceptMessage(void)
040C: 0xA0209A90   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA0209C60   ; 104: __arm void GBS_PendMessage(GBS_MSG *)
0414: 0xA020AB3C   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA84C9920   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA07BD3D5   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA07BD3E7   ; 108: __thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA07BD4AB   ; 109: __thumb void DoIDLE(void)
043C: 0xA02CDFE9   ; 10F: __thumb void freeUSSD()

0440: 0xA0208A21   ; 110: __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA02CE025   ; 111: __thumb char GetTypeUSSD()
0448: 0xA02CE035   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0EF0D25   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA0EF0DA1   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA0EF0DD1   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA0EF0E21   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA0EF0E9D   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA0EF0EB5   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA0EF0F31   ; 119: deleted int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0EF0FAD   ; 11A: deleted int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0EEF2B9   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA0EF000D   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA0EF0490   ; 11D: __arm void  zeromem(void *dest,int n)
0478: 0xA0EF04D8   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA07BB2BB   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA07BB2DD   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA07BB301   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA07BB395   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA07BABE7   ; 123: __thumb int  wstrlen (WSHDR *wshdr)
0490: 0xA07BA98B   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)
0494: 0xA07BB19B   ; 125: __thumb WSHDR * AllocWS(int len)
0498: 0xA07BB58F   ; 126: __thumb void  CutWSTR (void *WSHDR,int len)
049C: 0xA07BB133   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07BB153   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA07BAACD   ; 129: __thumb void  FreeWS (WSHDR *wshdr)
04A8: 0xA07FA8D3   ; 12A: __thumb void  DrawObject (DRWOBJ *)
;4AC:              ; 12B: EP __thumb void  AddKeybMsgHook (void *proc)
;4B0:              ; 12C: EP __thumb int  AddKeybMsgHook_end (void *proc)
;4B4:              ; 12D: EP __unknown void  RemoveKeybMsgHook (void *proc)
04B8: 0xA07F6911   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA07F6935   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)

04C0: 0xA07F6945   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA07F6963   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA0EF0590   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07FB54D   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA07FB563   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA07C1C23   ; 135: __thumb int  IsGuiOnTop (int id)
04D8: 0xA07C1D91   ; 136: __thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA07C1DB3   ; 137: __thumb int  CreateGUI (void *gui)
04E0: 0xA07C1DD1   ; 138: __thumb int  CreateGUI_30or2 (void *gui)
04E4: 0xA07C1E4D   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA07C1E6F   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA07C1E91   ; 13B: __thumb void  GeneralFuncF1 (int cmd)
04F0: 0xA07C1EAF   ; 13C: __thumb void  GeneralFuncF0 (int cmd)
04F4: 0xA07C1ECD   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA07C1EEF   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA07C203B   ; 13F: __thumb void DirectRedrawGUI (void)

0500: 0xA07C2055   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA07C2135   ; 141: __thumb void PendedRedrawGUI (void)
0508: 0xA07F3EDD   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA020AEF8   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020C5D0   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)
0514: 0xA0206F84   ; 145: __arm int GBS_GetCurCepid (void)
0518: 0xA020C064   ; 146: __arm void LockSched(void)
051C: 0xA020C0EC   ; 147: __arm void UnlockSched(void)
0520: 0xA07C13F5   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA089A1A9   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0897A1D   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0897987   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA089A1F9   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA07C1C41   ; 14D: __thumb GUI *GetTopGUI(void)
0538: 0xA0801A63   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA0801A8D   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA07F463F   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA07F5BBF   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA07C0FAD   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA020952C   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0206F48   ; 154: __arm void KillGBSproc(int cepid)
0554: 0xA0E680AD   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0E67481   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0E68EE5   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0E67355   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0E681EB   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0E67AD1   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0E67E73   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0E68ADB   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0E68B1D   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0E67771   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0E679E7   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0E68673   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000   ; 161: __thumb png_init_io(png_structp png_ptr, int fp)
0588: 0xA0EF11DC   ; 162: __arm setjmp(jmp_buf jmpbuf)
058C: 0xA07BE681   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA07BDB5D   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA07BDE6B   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA07BE819   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA07FB869   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA08A0233   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA08A01D7   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA08A01E1   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA07CA0C8   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA07C955C   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA05F915F   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0559823   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA055A019   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0507E91   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: EP __arm void SUBPROC(void *,...)
;5C8:              ; 172: EP __arm void REDRAW(void)
05CC: 0xA0AD2211   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA0AD24E3   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0AD2395   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0AD265D   ; 176: __thumb int closesocket(int socket)
05DC: 0xA0AD25D9   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA0AD2707   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0AD29E3   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0B19CC1   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0B19CCD   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA85B7F68   ; 17C: __arm int socklasterr(void)
05F4: 0xA07C1F11   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA07C1F33   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA07C1F4D   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA08A0105   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA08A0065   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA08A00A1   ; 182: __thumb int EDIT_GetFocus(void *gui)
060C: 0xA08A00AB   ; 183: __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA07BDEA3   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA020A264   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0ACFDCD   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0AD07FD   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: __adr int ScreenW(void)
0624: 0x000000B0   ; 189: __adr int ScreenH(void)
0628: 0x00000016   ; 18A: __adr int HeaderH(void)
062C: 0x00000016   ; 18B: __adr int SoftkeyH(void)
0630: 0xA020C47C   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA0A1B024   ; 18D: __arm int available0(int sock)
0638: 0xA0AE9C9D   ; 18E: __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA07C4A7F   ; 18F: __thumb int GetCurMenuItem(void *gui)

0640: 0xA020BB2C   ; 190: __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020BC58   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020BDD8   ; 192: __arm void MutexLock(MUTEX *mtx)
064C: 0xA020BE30   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020BE8C   ; 194: __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA07C5F41   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA07C20E3   ; 196: __thumb void RefreshGUI(void)
065C: 0xA07C5F93   ; 197: __thumb void *AllocMenuItem(void *gui)
0660: 0xA07C60A1   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA07C5F13   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA07C5865   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA08A00B5   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: EP __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA0820EE0   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA0820EA8   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA02582D1   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0258407   ; 1A0: __thumb int inflate(z_streamp strm, int flush)
0684: 0xA0259243   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA02B9061   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA0880510   ; 1A3: __arm int GetCurrentGPRSProfile(void)
0690: 0xA08804B4   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA02B908B   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020AF68   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA07CC457   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA0E67F71   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0E68F83   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0E6863B   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0E690AB   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0E679D5   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0E690C7   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0E69E1D   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0E69081   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0E69DB3   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0E690D5   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0E673B5   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num)
06CC: 0xA07F7277   ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA07F450B   ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int IsNewSgold(void)
06D8: 0xA0AD2F03   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0AD80B5   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8: EP __adr void *EXT_TOP(void)
;6E4:              ; 1B9: EP __adr void *PNG_TOP(void)
;6E8:              ; 1BA: EP __adr void *LIB_TOP(void)
;6EC:              ; 1BB: EP __adr void *DATA_N_SFB(void)
06F0: 0xA0E4D18B   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0E4CE6F   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0E4D06B   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0DD0BA1   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0DD0C2F   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA0DD0DFB   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0DCD393   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA07C309F   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA07C3017   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA07FF0D7   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA08A008D   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA08A0097   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA07BE9D1   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA07BDAF7   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA07BDAEB   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA07BDADF   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA07BDAC9   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA07BDAB1   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA07BDB99   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA02A065C   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA02A07DC   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA08A01FD   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA08A0207   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA08A00DD   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA08A00E7   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0830654   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA0E690B9   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0E69E7F   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA08A012D   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA08A0141   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA050D857   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8799514   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA07BAE7D   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA07BAE9F   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA08A01CD   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA08A0263   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA07C707D   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA07FA9BF   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA07C0A1F   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA07C0907   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA07C0049   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA08A02F3   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA07C4EEF   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA07DC72C   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA088C124   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: EP __arm IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA07FF8D7   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA84CA826   ; 1EB: __arm char *RAM_IMSI()
07B0: 0xA07FF94B   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA07FF977   ; 1ED: __thumb int IsDynIconBusy(int picture)
;7B8:              ; 1EE: __unknown ProgressCalculate(int current, int total)
07BC: 0xA07FF8DB   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA02DE391   ; 1F0: __thumb filecopy
07C4: 0xA02E027D   ; 1F1: __thumb filecopy_op_announce
07C8: 0xA0830328   ; 1F2: __arm int devmenu_config_IsCheckboxOff
07CC: 0xA021ABA4   ; 1F3: __arm GetSessionAge
07D0: 0xA84CABCC   ; 1F4: __arm char *RamServiceProviderName()
07D4: 0xA0EF07D9   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA07FF9A3   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
;7DC:              ; 1F7: API __unknown long GetFileSize(char *Filename)
;7E0:              ; 1F8: __unknown int GetPlayStatus(void)
;7E4:              ; 1F9: API __unknown void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: __unknown char *RamVolumeStep()
07EC: 0xA85176A0   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA07BD601   ; 1FC: __thumb void CloseCSM(int id)
;7F4:              ; 1FD: __unknown RamCurrentArtist
;7F8:              ; 1FE: __unknown char *RamLighterPower()
;7FC:              ; 1FF: __unknown void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: API __thumb void ScreenShoot()
0804: 0xA07F5CCF   ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA094F493   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA07F7127   ; 203: __thumb void SetPixel(int x,int y,char *color)
0810: 0xA08962C3   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA07F44C9   ; 205: __thumb void SetProp2Square_v1(void)
0818: 0xA0EF03B5   ; 206: __thumb void srand(unsigned int seed)
081C: 0xA0899A5B   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA07FA9E9   ; 208: __thumb int Get_WS_width(WSHDR *ws, int font)
0824: 0xA07BD457   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA08A0173   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA08A0187   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA08A019B   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA08A01AF   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA07BDE25   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA07BDD0B   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

;840:              ; 210: __unknown int GetCurGuiID(void)
0844: 0x000000A1   ; 211: __adr int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA03D8454   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA03523AC   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA07BB3BD   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA07BB44D   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA07BA9E9   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05D5CF9   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA08A870F   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA08A89C7   ; 219: __thumb void *AllocMLMenuItem(void *data)
0868: 0xA08A027B   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA08A0285   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui)
0870: 0xA08A02C1   ; 21C: __thumb int EDIT_IsBusy(void *gui)
0874: 0xA0506345   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
#pragma disable old_equal_ff
+0

;FSWI_PATCH1
0x00092BE4: 1A0000EA DCF09FE5
;FSWI_PATCH3,FSWI_PATCH2
0x00092CC7: A100000000 002481FDA0
;PATCH_GET_REGEXT1
0x002A067C: 81C282E0 99DE34EB
;PATCH_GET_REGEXT2
0x002A0690: 810282E0 99DE34EB
;PATCH_GET_EXT
0x002A086C: 857288E0 18DE34EB
;REG_FILE
0x002A0E94: F0452DE920608DE2 04F01FE51882FDA0
;PATCH_REGEXPL
0x002A0F7C: C4FFFFEB 63DC34EB
;PATCH_PROPERTY2
0x00353BEC: 070092E8 151132EB
;PATCH_BIG_ICON
0x003545DC: 010080E2 300F32EB
;PATCH_PROPERTY1
0x003D39E4: 0400A0E1 931130EB
;PATCH_CARD_EXPL
0x003D6C6C: CEA80FFA 9A0630EB
;PATCH_ONCREATE,PATCH_ONCLOSE
0x004A3314: B1762AA0F3782AA0 C48FFDA06C8DFDA0
;PATCH_NO_BROWSE_TXT
0x005981DC: 8CF0E0EA C046C046
;PATCH_KEYB_MSG,PATCH_KEYB_MSGJ
0x007F41F4: E86A0CF0EBFF0028 004A1047A980FDA0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x007FF29C: 10B5041C 00490847
0x007FF2A0: FFF7F5FF 6C80FDA0
;PATCH_ESI
0x00A81EA0: 0C1C111C0E4A9042 004B18470480FDA0
;SWILIB_FUNC00B,SWILIB_FUNC00C
#pragma enable old_equal_ff
0x00FD402C: DD84FDA0
0x00FD4030: 1985FDA0
;SWILIB_FUNC095
0x00FD4254: D882FDA0
;SWILIB_FUNC12B_12D
0x00FD44AC: 8C83FDA0
0x00FD44B0: 0084FDA05084FDA0
;SWILIB_FUNC171,SWILIB_FUNC172
0x00FD45C4: 3C8DFDA0188DFDA0
;SWILIB_FUNC19C
0x00FD4670: 618DFDA0
;SWILIB_FUNC1B8_1BB
0x00FD46E0: E4824CA8E8824CA8A0824CA8F4824CA8
;SWILIB_FUNC1E9
0x00FD47A4: 7C92FDA0
;CODE,INITTAB,DATA_C,CONFIG_DATA_ID
0x00FD8000: 11FF2FE1203EA0E10A0053E31040BD08
0x00FD8010: 2904000A14309FE5003093E50140A0E1
0x00FD8020: 0210A0E108209FE5020050E113FF2FE1
0x00FD8030: 549BFDA0102700000400A0E10140A0E3
0x00FD8040: 184080E51EFF2FE1180095E5000050E3
0x00FD8050: 070092E81EFF2F01500400EB0000A0E3
0x00FD8060: 180085E58DDF8DE2F080BDE810402DE9
0x00FD8070: 0040A0E1010600EB000050E31080BD18
0x00FD8080: 0400A0E114C09FE500C09CE53CFF2FE1
0x00FD8090: 040050E108C09FE500C09CE51CFF2FE1
0x00FD80A0: 589BFDA05C9BFDA07068718800F0F6F9
0x00FD80B0: 022809D0311CE86A044A126890470028
0x00FD80C0: 02D1034800680047F8BD0000649BFDA0
0x00FD80D0: 609BFDA040709FE5007097E52480A0E3
0x00FD80E0: 987527E01EFF2FE12CC09FE500C09CE5
0x00FD80F0: 2420A0E392C12CE01EFF2FE118009FE5
0x00FD8100: 000090E52420A0E3920120E01EFF2FE1
0x00FD8110: 105094E510508DE53E0000EAE4824CA8
0x00FD8120: 1EFF2FE100109DE5200011E3192F8F02
0x00FD8130: 0400000AC70050E3B200DE0014E08D05
0x00FD8140: 01E08EE251208FE250109FE5001091E5
0x00FD8150: 000051E348109F05803CC0E3400D53E3
0x00FD8160: 0900008A800C10E300402D090040FD08
0x00FD8170: 03C191E704C08D150300001A01007CE3
0x00FD8180: 20209F0504008D0514208DE50100BDE8
0x00FD8190: 00F069E10F80FDE81CFF2FE160470000
0x00FD81A0: A0824CA80040FDA0EC91FDA004E02DE5
0x00FD81B0: 00200FE1000000EF00100FE1C01081E3
0x00FD81C0: 01F021E10000A0E10000A0E10000A0E1
0x00FD81D0: 7AFF17EE0000A0E10000A0E10000A0E1
0x00FD81E0: FAFFFF1A0000A0E39A0F07EE0000A0E1
0x00FD81F0: 0000A0E10000A0E10000A0E1150F07EE
0x00FD8200: 0000A0E10000A0E10000A0E10000A0E1
0x00FD8210: 02F021E104F09DE4F74F2DE930809DE5
0x00FD8220: 34909DE538A09DE53CB09DE540409DE5
0x00FD8230: 0370A0E1B90300EB0050A0E1460100EF
0x00FD8240: 0060A0E3006085E5047085E504009DE5
0x00FD8250: 080085E50C80C5E508009DE5BE00C5E1
0x00FD8260: 1090C5E500009DE5140085E518A085E5
0x00FD8270: 1CB085E50800A0E3140000EF001097E5
0x00FD8280: 212EA0E10A0052E30010940501108112
0x00FD8290: 001080E5046080E5200085E5470100EF
0x00FD82A0: F78FBDE800402DE90810A0E1202EA0E1
0x00FD82B0: 0A0052E3010080120080BD180100A0E1
0x00FD82C0: CF0100EF000050E30080BD08200090E5
0x00FD82D0: 000090E50080BDE8F0412DE9A0409FE5
0x00FD82E0: 0060A0E19C009FE510D04DE2007090E5
0x00FD82F0: 0050A0E3088087E2010000EA015085E2
0x00FD8300: 248088E2000094E5000055E1FF81BD08
0x00FD8310: 040096E5001098E5010050E1F6FFFF1A
0x00FD8320: 0C0098E50F20A0E30D10A0E1A30000EF
0x00FD8330: 001096E50D00A0E1190000EF000050E3
0x00FD8340: EDFFFF1A2400A0E3907526E0140096E5
0x00FD8350: 290100EF200096E5150000EF000094E5
0x00FD8360: 2410A0E3010040E2000084E5050040E0
0x00FD8370: 910002E0241086E20600A0E11E0100EF
0x00FD8380: FF81BDE890814CA8E4824CA8F0402DE9
0x00FD8390: 0040B0E10100001A0000A0E3F080BDE8
0x00FD83A0: 30519FE50C00A0E30560A0E1140000EF
0x00FD83B0: 0070B0E1F7FFFF0A460100EF0000A0E3
0x00FD83C0: 000087E5044087E5158000EF080087E5
0x00FD83D0: 000095E5000050E30100001A030000EA
0x00FD83E0: 0060A0E1000096E5000050E3FBFFFF1A
0x00FD83F0: 007086E5470100EF0100A0E3F080BDE8
0x00FD8400: F0402DE90040B0E10500000AC4509FE5
0x00FD8410: 0C00A0E3006095E5140000EF0070B0E1
0x00FD8420: 0100001A0000A0E3F080BDE8460100EF
0x00FD8430: 006087E5044087E5158000EF080087E5
0x00FD8440: 007085E5470100EF0100A0E3F080BDE8
0x00FD8450: 30402DE97C409FE50450A0E1000000EA
0x00FD8460: 0540A0E1005095E5000055E33080BD08
0x00FD8470: 041095E5000051E1F8FFFF1A460100EF
0x00FD8480: 000095E5000084E5470100EF081095E5
0x00FD8490: 0500A0E131FF2FE13080BDE8E1B50E4F
0x00FD84A0: 0D00002600E001263F68002F11D07A68
0x00FD84B0: 1000F9D00098290090470128F3D00228
0x00FD84C0: 08D00328F0D1012E01D1022002E00020
0x00FD84D0: 00E0300001B0E0BD64824CA8FBB51500
0x00FD84E0: 002403E00199AD1B08180190002D0ED0
0x00FD84F0: 8026F600B54200DA2E000098054F029B
0x00FD8500: 01993F683200B8472418B042EAD02000
0x00FD8510: 03B0F0BD689BFDA0FBB51500002403E0
0x00FD8520: 0199AD1B08180190002D0ED08026F600
0x00FD8530: B54200DA2E000098054F029B01993F68
0x00FD8540: 3200B8472418B042EAD0200003B0F0BD
0x00FD8550: 6C9BFDA070402DE934D04DE20040A0E1
0x00FD8560: 0150A0E11020A0E30D10A0E120008DE2
0x00FD8570: 270100EF0060A0E10400A0E1120200EF
0x00FD8580: 0520A0E10010A0E10400A0E1130200EF
0x00FD8590: 000095E52E20A0E3B010D0E10500A0E1
0x00FD85A0: DD0100EFFF10A0E3FF1C81E3010050E1
0x00FD85B0: 0B00000A001095E5012080E2B010D1E1
0x00FD85C0: 003041E00510A0E10600A0E1140200EF
0x00FD85D0: 0600A0E1D00100EFCF0100EF34D08DE2
0x00FD85E0: 7080BDE80000A0E334D08DE27080BDE8
0x00FD85F0: 30402DE945DF4DE2068100EF080090E5
0x00FD8600: 0C4090E5000054E30F00000A8020A0E3
0x00FD8610: 0D10A0E1400F8DE2270100EF0050A0E1
0x00FD8620: 0510A0E10400A0E1C9FFFFEB000050E3
0x00FD8630: 1C309015000053130300000A141090E5
0x00FD8640: FC2084E20500A0E133FF2FE145DF8DE2
0x00FD8650: 3080BDE830B5084C0D00E26A110001D0
0x00FD8660: 29009047032D06D1606A0025656215DF
0x00FD8670: 206A256215DF30BD68824CA810402DE9
0x00FD8680: 45DF4DE2068100EF080090E50C4090E5
0x00FD8690: 000054E30D00000A8020A0E30D10A0E1
0x00FD86A0: 400F8DE2270100EF0010A0E10400A0E1
0x00FD86B0: A7FFFFEB000050E31C00901500005013
0x00FD86C0: 0300000A0100A0E345DF8DE21080BDE8
0x00FD86D0: 0000A0E345DF8DE21080BDE8F34F2DE9
0x00FD86E0: 54B19FE550DF4DE278919DE56C619DE5
0x00FD86F0: 70719DE574819DE50240A0E10350A0E1
0x00FD8700: 2C20A0E30410A0E10B00A0E11E0100EF
0x00FD8710: 000059E30000991500A0A0E300005013
0x00FD8720: 0700000A04108DE2042089E2043092E4
0x00FD8730: 01A08AE2013083E2043081E400005AE1
0x00FD8740: F9FFFF1ACCFFFFEB000050E30300001A
0x00FD8750: 01A08AE20D00A0E10010A0E30A1180E7
0x00FD8760: 00A08DE5280094E5010080E20001A0E1
0x00FD8770: 140000EF24008BE5280094E51C10A0E3
0x00FD8780: 010080E2910000E0140000EF20008BE5
0x00FD8790: 280094E5241094E50021A0E124009BE5
0x00FD87A0: 040080E21E0100EF280094E51C10A0E3
0x00FD87B0: 910002E020009BE5201094E51C0080E2
0x00FD87C0: 1E0100EF74109FE520009BE51C20A0E3
0x00FD87D0: 1E0100EF24009BE564109FE50530A0E1
0x00FD87E0: 001080E5080094E50B20A0E12C008BE5
0x00FD87F0: 280094E5010080E228008BE544009FE5
0x00FD8800: 08008BE518009BE5100080E318008BE5
0x00FD8810: 0D00A0E101002DE900012DE9010087E2
0x00FD8820: 01002DE940002DE954119DE550019DE5
0x00FD8830: 520100EF56DF8DE2F08FBDE868824CA8
0x00FD8840: 909BFDA0F085FDA05586FDA0F04F2DE9
0x00FD8850: 0C619FE50C819FE50040A0E108019FE5
0x00FD8860: 04D04DE20050A0E3067040E00D30A0E1
0x00FD8870: 8020A0E3801CA0E30400A0E10A0000EF
0x00FD8880: 00A0A0E101007AE31300000A0D30A0E1
0x00FD8890: 0720A0E10810A0E10B0000EF0090A0E1
0x00FD88A0: 0D00A0E101002DE904308DE20220A0E3
0x00FD88B0: 0010A0E30A00A0E10F0000EF00B0A0E1
0x00FD88C0: 04108DE20A00A0E10D0000EF0B0059E1
0x00FD88D0: 04D08DE2070059011700000A0720A0E1
0x00FD88E0: 0610A0E10800A0E11E0100EF0D30A0E1
0x00FD88F0: 602FA0E30210A0E3C01F81E30400A0E1
0x00FD8900: 0A0000EF00A0A0E101007AE31100000A
0x00FD8910: 0D30A0E10720A0E10810A0E10C0000EF
0x00FD8920: 070050E10550E0110D10A0E10A00A0E1
0x00FD8930: 0D0000EF000055E30400004A0010D4E5
0x00FD8940: 58009FE5301041E2001080E5044080E5
0x00FD8950: 0500A0E1F28FBDE80550E0E10500A0E1
0x00FD8960: F28FBDE8009DFDA094814CA8D09DFDA0
0x00FD8970: 01C08FE21CFF2FE110B5084C20001C30
0x00FD8980: FFF764EF002807D52000FFF760EF0028
0x00FD8990: 02D503480021016010BDC046AC9BFDA0
0x00FD89A0: 98824CA800402DE91D0100EF0080BDE8
0x00FD89B0: 7FB5FFB00025ED430595642166A8FFF7
0x00FD89C0: F2EF7F9800246B46802211020ADF0190
0x00FD89D0: 002801D528003EE16B46342209A90BDF
0x00FD89E0: 342805D0019869460DDF0120C04332E1
0x00FD89F0: 09989A49884204D0019869460DDF0220
0x00FD8A00: F4E709A8808D0B2802D30820C04322E1
0x00FD8A10: 049416AD083511E0306801280AD12868
0x00FD8A20: 0599884200D20590E9684018844201D2
0x00FD8A30: 2868441804982035401C0490049809A9
0x00FD8A40: 898D884227DA08A801B4119805990AAE
0x00FD8A50: 768D01AB00227143411802980FDF1199
0x00FD8A60: 059A0AAB5B8D01B05A438918884204D0
0x00FD8A70: 019869460DDF0320B8E701982E00083E
0x00FD8A80: 6B46202231000BDF2028C5D001986946
0x00FD8A90: 0DDF0420BAE70598251A280014DF0400
0x00FD8AA0: 04D1019869460DDF0D209FE72900FFF7
0x00FD8AB0: 7AEF0020049016A8083053E028680128
0x00FD8AC0: 02D0022817D0B0E002988268002A44D0
0x00FD8AD0: 006805996B46401A211801980BDF0299
0x00FD8AE0: 8968884239D0019869460DDF200015DF
0x00FD8AF0: 0A20C043AFE00298806814DF03900028
0x00FD8B00: 06D1019869460DDF200015DF06206DE7
0x00FD8B10: 02980399826801986B460BDF02998968
0x00FD8B20: 884208D0019869460DDF039815DF2000
0x00FD8B30: 15DF07206AE7039866AA05E0192902DA
0x00FD8B40: 436889005350083001680029F6D17899
0x00FD8B50: 002000292ED1039815DF0498401C0490
0x00FD8B60: 029820300290059841420791049809A9
0x00FD8B70: 898D884260DA029D684601B4083D6968
0x00FD8B80: 01AB029800220FDF696801B0884295D0
0x00FD8B90: 019869460DDF200015DF052026E7039D
0x00FD8BA0: EB189A18059B5218116862581219D21A
0x00FD8BB0: 6250401C789AC1009142CCD20299779B
0x00FD8BC0: 0968039D4A42C100AD186D18ED186D68
0x00FD8BD0: 2D062D0E0695FF2DEBD0FD2DDFD0079D
0x00FD8BE0: 069E6519002EE4D0022E02D0172E09D0
0x00FD8BF0: 12E0039EF3189A18521811686A581219
0x00FD8C00: 6A50D6E7039EF3189A18059B52181168
0x00FD8C10: 6A581219D21AF3E7019869460DDF2000
0x00FD8C20: 15DF039815DF0C2063E7019869460DDF
0x00FD8C30: 200015DF0B20D9E6019869460DDF00F0
0x00FD8C40: FDFA079D0F9E829B819A80997F98A419
0x00FD8C50: 6419A04700207FB004B070BD7F454C46
0x00FD8C60: 10B5A0B0694614007E22A3DF00230022
0x00FD8C70: 21006846FFF79CFE002801D0002000E0
0x00FD8C80: 012020B010BD000000402DE910D04DE2
0x00FD8C90: 0D00A0E1530100EF000050E30F80BD08
0x00FD8CA0: F230DDE104009DE5010053E30500001A
0x00FD8CB0: 08209DE5000052E30F80BD080C109DE5
0x00FD8CC0: 32FF2FE10F80BDE801002DE9F420DDE1
0x00FD8CD0: FC1FA0E30900A0E3420C80E3000100EF
0x00FD8CE0: 04D08DE20F80BDE800402DE91C209FE5
0x00FD8CF0: 1C109FE50000A0E301002DE98030A0E3
0x00FD8D00: 0700A0E3440C80E3050100EF0180BDE8
0x00FD8D10: 888CFDA0C89CFDA000402DE9460100EF
0x00FD8D20: 410100EF9010A0E30900A0E3420C80E3
0x00FD8D30: 000100EF470100EF0080BDE800402DE9
0x00FD8D40: 04002DE90030A0E10700A0E3440C80E3
0x00FD8D50: 0120A0E10110A0E3000100EF0180BDE8
0x00FD8D60: 10B514008847200015DF10BD10402DE9
0x00FD8D70: 0040A0E10700A0E3440C80E3540100EF
0x00FD8D80: 0C009FE5001090E50400A0E11040BDE8
0x00FD8D90: 9AFCFFEA4C9BFDA030402DE9A0409FE5
0x00FD8DA0: AFDF4DE20410A0E1BD008DE2400F80E2
0x00FD8DB0: 1A0000EF88129FE56F0F8DE2001091E5
0x00FD8DC0: 301081E2BC11CDE51B0000EF0050A0E1
0x00FD8DD0: 101084E26F0F8DE2170000EF0D20A0E1
0x00FD8DE0: 6F1F8DE204008DE26B0000EF000050E3
0x00FD8DF0: 0E00000A6F0F8DE20010A0E30010C5E7
0x00FD8E00: AD108DE2170000EF0030A0E30020A0E3
0x00FD8E10: 0210A0E16F0F8DE2E4FEFFFA0D10A0E1
0x00FD8E20: 04008DE26C0000EF000050E3F0FFFF1A
0x00FD8E30: 0D10A0E104008DE26D0000EFAFDF8DE2
0x00FD8E40: 3080BDE8E49BFDA010B58BB06A460024
0x00FD8E50: E44301A984DFA04201D1200000E00298
0x00FD8E60: 0BB010BDF0402DE948419FE548519FE5
0x00FD8E70: 78D04DE2007094E50510A0E105008DE2
0x00FD8E80: 1A0000EFB8119FE5000057E3001091E5
0x00FD8E90: 301081E20410CDE50300000A0000A0E3
0x00FD8EA0: 000084E50700A0E1150000EF04008DE2
0x00FD8EB0: E4FFFFFA0070E0E3070050E13B00000A
0x00FD8EC0: 400C50E30300000A101085E20100A0E3
0x00FD8ED0: 480100EF190000EA0D30A0E18020A0E3
0x00FD8EE0: 801CA0E304008DE20A0000EF0060A0E1
0x00FD8EF0: 070056E12D00000A400CA0E3140000EF
0x00FD8F00: 0070A0E10D30A0E1402CA0E30710A0E1
0x00FD8F10: 0600A0E10B0000EF400C50E30D10A0E1
0x00FD8F20: 0600A0E10700000A0D0000EF281085E2
0x00FD8F30: 0100A0E3480100EF0700A0E1150000EF
0x00FD8F40: 78D08DE2F080BDE80D0000EF6C109FE5
0x00FD8F50: 0060A0E30700A0E10620E0E1003090E5
0x00FD8F60: 020053E10900000A00C091E502005CE1
0x00FD8F70: 0C0053110700000A0620A0E13C1085E2
0x00FD8F80: 44008DE2160000EF44108DE2E7FFFFEA
0x00FD8F90: 003091E5003080E5016086E2041081E2
0x00FD8FA0: 040080E2400D56E3EBFFFFBA007084E5
0x00FD8FB0: 78D08DE2F080BDE8A0824CA8FC9BFDA0
0x00FD8FC0: 0040FDA070402DE964509FE564609FE5
0x00FD8FD0: 0040A0E143FFFFEB64FEFFEBA0FFFFEB
0x00FD8FE0: CA0200EB0610A0E1010085E21A0000EF
0x00FD8FF0: 1C1086E2210085E21A0000EF40009FE5
0x00FD9000: 000090E5300080E22000C5E50000C5E5
0x00FD9010: 340086E28C0000EF1C009FE5710100EF
0x00FD9020: 18009FE5001090E50400A0E1F3FBFFEB
0x00FD9030: 7080BDE8A4824CA8509CFDA0988DFDA0
0x00FD9040: 509BFDA098824CA8A82801D10E487047
0x00FD9050: AA2801D10D487047AF2801D10C487047
0x00FD9060: B82801D10B487047BA2801D10A487047
0x00FD9070: BF2801D109487047C02804DBFF2802DC
0x00FD9080: D4218900401870470104000004040000
0x00FD9090: 07040000510400005404000057040000
0x00FD90A0: 30B504000D0004E0FFF7CEFF01002800
0x00FD90B0: 1CDF2078641C0028F6D130BD30402DE9
0x00FD90C0: 0040A0E10150A0E10010A0E30500A0E1
0x00FD90D0: 260100EF0510A0E10400A0E1EFFFFFFA
0x00FD90E0: 3080BDE830402DE90040A0E10F00A0E3
0x00FD90F0: 250100EF0050A0E1071F8FE2240100EF
0x00FD9100: 0020A0E30510A0E10400A0E1940000EF
0x00FD9110: 0500A0E1290100EF3080BDE874787400
0x00FD9120: F0432DE96C409FE56C609FE5460100EF
0x00FD9130: 005094E5007096E5018085E22410A0E3
0x00FD9140: 910800E0140000EF0090A0E12400A0E3
0x00FD9150: 900801E00900A0E11D0100EF000057E3
0x00FD9160: 0600000A2400A0E3900502E00710A0E1
0x00FD9170: 0900A0E11E0100EF0700A0E1150000EF
0x00FD9180: 008084E5009086E5470100EF2410A0E3
0x00FD9190: 919520E0F083BDE890814CA8E4824CA8
0x00FD91A0: 70402DE90040A0E10150A0E1FF00A0E3
0x00FD91B0: 250100EF0060A0E10410A0E11F0100EF
0x00FD91C0: 5C10A0E30600A0E11C0000EF0510A0E1
0x00FD91D0: 0600A0E1210100EF0600A0E1C0FFFFEB
0x00FD91E0: 0600A0E1290100EF7080BDE810402DE9
0x00FD91F0: 40409FE520D04DE20030A0E10020A0E1
0x00FD9200: 0410A0E10D00A0E1160000EF0D00A0E1
0x00FD9210: 6FC6DFEB020000EF0230A0E30220A0E3
0x00FD9220: 0C1084E2FF00A0E3FF0C80E3DFC6DFEB
0x00FD9230: 20D08DE21080BDE8A49CFDA0004B1847
0x00FD9240: AC81FDA000B5080014DF00BD00B50800
0x00FD9250: 15DF00BD30402DE904D04DE20140A0E1
0x00FD9260: 0250A0E15E0100EF0D30A0E10520A0E1
0x00FD9270: 0410A0E10B0000EF3180BDE8F04F2DE9
0x00FD9280: 28D04DE20150A0E10060A0E300608DE5
0x00FD9290: 04608DE514308DE28020A0E3801CA0E3
0x00FD92A0: 0A0000EF0040A0E1010070E31701000A
0x00FD92B0: 0080A0E30670A0E10690A0E114308DE2
0x00FD92C0: 0820A0E320108DE20B0000EF080050E3
0x00FD92D0: 0501001A0810A0E320008DE2B20100EF
0x00FD92E0: 000050E30001000A4C049FE501002DE9
0x00FD92F0: 48049FE501002DE90000A0E301002DE9
0x00FD9300: 0030A0E10020A0E10010A0E130049FE5
0x00FD9310: A80100EF0C008DE5000050E30CD08DE2
0x00FD9320: F100000A560100EF04008DE5000050E3
0x00FD9330: 0400001A0020A0E30210A0E10D00A0E1
0x00FD9340: 570100EFE80000EA00009DE5620100EF
0x00FD9350: 000050E30020A01304108D12F6FFFF1A
0x00FD9360: E0239FE500009DE50410A0E1A90100EF
0x00FD9370: 00009DE50810A0E3580100EF04109DE5
0x00FD9380: 00009DE5590100EF0000A0E301002DE9
0x00FD9390: 01002DE901002DE91C008DE201002DE9
0x00FD93A0: 28008DE201002DE918109DE520308DE2
0x00FD93B0: 14009DE51C208DE25A0100EF000055E3
0x00FD93C0: 14D08DE20500001A10009DE5000050E3
0x00FD93D0: 74039F15FF50A0030000901501508012
0x00FD93E0: 18009DE5080050E3010000AA00009DE5
0x00FD93F0: D60100EF00009DE504109DE51020A0E3
0x00FD9400: AC0100EF000050E30100000A00009DE5
0x00FD9410: AD0100EF18009DE5100050E30100001A
0x00FD9420: 00009DE5AF0100EF18009DE5080050E3
0x00FD9430: 010000AA00009DE5B00100EF10009DE5
0x00FD9440: 030050E30100001A00009DE5AB0100EF
0x00FD9450: 10009DE5040050E3000050130100001A
0x00FD9460: 00009DE5B10100EF00009DE50120A0E3
0x00FD9470: FF10A0E3AE0100EF04109DE500009DE5
0x00FD9480: AA0100EF00009DE504109DE55F0100EF
0x00FD9490: 140000EF0080A0E10800A0E3140000EF
0x00FD94A0: 1C008DE50090A0E108009DE5FF0055E3
0x00FD94B0: 2A00001A070080E2A051A0E10C009DE5
0x00FD94C0: 95000BE00B00A0E1140000EF0070A0E1
0x00FD94D0: 0B10A0E11D0100EF07A0A0E100B0A0E3
0x00FD94E0: 120000EA001188E00020D1E5000052E3
0x00FD94F0: 0120D105000052030210D10500005103
0x00FD9500: 0400001AA0118AE00020D1E507C000E2
0x00FD9510: 332C82E10020C1E5010080E208109DE5
0x00FD9520: 010050E1EEFFFF3A0AA085E001B08BE2
0x00FD9530: 0C009DE500005BE10600002A00009DE5
0x00FD9540: 0020A0E30810A0E1600100EF0600A0E1
0x00FD9550: 8030A0E3F0FFFFEA0100A0E3530000EA
0x00FD9560: 0C109DE5E4A19FE5910000E0015055E2
0x00FD9570: 0200000A015055E22500000A4C0000EA
0x00FD9580: 140000EF0070A0E10750A0E100B0A0E3
0x00FD9590: 000000EA01B08BE20C009DE500005BE1
0x00FD95A0: 1900002A00009DE50020A0E30810A0E1
0x00FD95B0: 600100EF0600A0E11CC0A0E3080000EA
0x00FD95C0: 0020D1E50130D1E50210D1E5E02002E2
0x00FD95D0: A3310CE0022083E1211382E10110C5E4
0x00FD95E0: 010080E208109DE5010050E1E8FFFF2A
0x00FD95F0: 00309AE5001188E00320D1E5030052E1
0x00FD9600: EEFFFF2AC010A0E3F3FFFFEA0500A0E3
0x00FD9610: 260000EA8000A0E1140000EF0070A0E1
0x00FD9620: 0750A0E100B0A0E3000000EA01B08BE2
0x00FD9630: 0C009DE500005BE11B00002A00009DE5
0x00FD9640: 0020A0E30810A0E1600100EF0600A0E1
0x00FD9650: 7ECEA0E30A0000EA0020D1E5F83CA0E3
0x00FD9660: 022403E00130D1E50210D1E583310CE0
0x00FD9670: 022083E1A111A0E1021081E1B210C5E0
0x00FD9680: 010080E208109DE5010050E1E6FFFF2A
0x00FD9690: 00309AE5001188E00320D1E5030052E1
0x00FD96A0: ECFFFF2AE01CA0E3F3FFFFEA0800A0E3
0x00FD96B0: B200C9E108009DE50000C9E50C009DE5
0x00FD96C0: 0100C9E5047089E504109DE500009DE5
0x00FD96D0: 5D0100EF0020A0E304108DE20D00A0E1
0x00FD96E0: 570100EF000057E30B00001A0800A0E1
0x00FD96F0: 150000EF0700A0E1150000EF0900A0E1
0x00FD9700: 150000EF14108DE20400A0E10D0000EF
0x00FD9710: 0000A0E328D08DE2F08FBDE80800A0E1
0x00FD9720: 150000EF14108DE20400A0E10D0000EF
0x00FD9730: 1C009DE528D08DE2F08FBDE84D92FDA0
0x00FD9740: 4592FDA0E09CFDA05492FDA020824CA8
0x00FD9750: C0814CA807E0412A02DB5B2A00DA2032
0x00FD9760: 491C0270401C0A78002AF4D100210170
0x00FD9770: 704700008C309FE510002DE90F20A0E3
0x00FD9780: 0A0051E30A00003A93C184E00AC0A0E3
0x00FD9790: A441A0E19C0404E0044041E0022284E1
0x00FD97A0: 93418CE0ACC1A0E10C10A0E10A0051E3
0x00FD97B0: F4FFFF2A301081E20110C0E4020000EA
0x00FD97C0: 301081E20110C0E42222A0E10F1002E2
0x00FD97D0: 0A0051E3F9FFFF3A2E10A0E30110C0E4
0x00FD97E0: 7010A0E30110C0E46E10A0E30110C0E4
0x00FD97F0: 6710A0E30110C0E40010A0E30010C0E5
0x00FD9800: 1000BDE81EFF2FE1CDCCCCCCF0402DE9
0x00FD9810: F4529FE50040A0E10560A0E1460100EF
0x00FD9820: 0070A0E3000000EA0670A0E1006096E5
0x00FD9830: 000056E30E00000A040096E50410A0E1
0x00FD9840: 190000EF000050E3F6FFFF1A000057E3
0x00FD9850: 0400000A000096E5000087E5000095E5
0x00FD9860: 000086E5006085E5470100EF080096E5
0x00FD9870: F080BDE8470100EF0000A0E3F080BDE8
0x00FD9880: F04F2DE980429FE570A29FE540DF4DE2
0x00FD9890: 0050A0E1250EA0E10A0050E30E00001A
0x00FD98A0: 0510A0E10D00A0E1A9FFFFFA0D00A0E1
0x00FD98B0: D5FFFFEB0050B0E10000000A530000EA
0x00FD98C0: 0010A0E30D00A0E16BFEFFEB0050B0E1
0x00FD98D0: 5B00001A0C008AE24D0000EA460100EF
0x00FD98E0: 080094E5000000EA000090E5000050E3
0x00FD98F0: 0800000A041090E5050051E1F9FFFF1A
0x00FD9900: 086090E5000056E3F6FFFF0A470100EF
0x00FD9910: 0600A0E13E0000EA470100EF040094E5
0x00FD9920: 000050E37300000A2000A0E34E0C80E3
0x00FD9930: 000055E11D00002A8000A0E3C0619FE5
0x00FD9940: 031005E28110A0E130B1A0E1040094E5
0x00FD9950: AB90A0E1258180E00070D8E507001BE1
0x00FD9960: 1400000A070019E11000000A0A10A0E1
0x00FD9970: 01008DE276FFFFFA002096E50510A0E1
0x00FD9980: 302082E20020CDE579FFFFEB0D00A0E1
0x00FD9990: 9DFFFFEB0050B0E11C00001A0010A0E3
0x00FD99A0: 0D00A0E134FEFFEB0050A0E1240000EA
0x00FD99B0: 0000A0E3160000EA460100EF0000D8E5
0x00FD99C0: 00008BE10000C8E5470100EF0A10A0E1
0x00FD99D0: 01008DE25EFFFFFA002096E50510A0E1
0x00FD99E0: 302082E20020CDE561FFFFEB0D00A0E1
0x00FD99F0: 85FFFFEB0050B0E10700000A460100EF
0x00FD9A00: 0000D8E5000089E10000C8E5470100EF
0x00FD9A10: 0500A0E140DF8DE2F08FBDE80010A0E3
0x00FD9A20: 0D00A0E114FEFFEB0050B0E1DFFFFF0A
0x00FD9A30: 460100EF0000D8E5000089E10000C8E5
0x00FD9A40: 470100EF0C00A0E3140000EF0060A0E1
0x00FD9A50: 0D00A0E11B0000EF010080E2140000EF
0x00FD9A60: 040086E50D10A0E11A0000EF085086E5
0x00FD9A70: 460100EF000094E50050A0E30070A0E3
0x00FD9A80: 000086E5006084E50400A0E1004094E5
0x00FD9A90: 000054E30100001A470100EF140000EA
0x00FD9AA0: 60109FE5017087E2001091E5070051E1
0x00FD9AB0: F4FFFF2A005080E5470100EF080094E5
0x00FD9AC0: 000050E30300000A040090E5150000EF
0x00FD9AD0: 080094E5150000EF040094E5150000EF
0x00FD9AE0: 0400A0E1004094E5150000EF000054E3
0x00FD9AF0: F1FFFF1A080096E540DF8DE2F08FBDE8
0x00FD9B00: E89CFDA098824CA8F0814CA8E8824CA8
0x00FD9B10: 30402DE92C509FE58840A0E3040095E5
0x00FD9B20: 4C4D84E3000050E30200001A0400A0E1
0x00FD9B30: 140000EF040085E5040095E50410A0E1
0x00FD9B40: 1D0100EF3080BDE8E8824CA8F3782AA0
0x00FD9B50: B1762AA0A91EA8A08FF27FA0A5F27FA0
0x00FD9B60: FF417FA0D11180A01CA27CA004A37CA0
0x00FD9B70: D000000094814CA8009DFDA0CEF2EAF0
0x00FD9B80: FBF2FC20F120EFEEECEEF9FCFE000000
0x00FD9B90: 000000007C9BFDA0FF7F000000000000
0x00FD9BA0: 000000000300000078050000303A5C5A
0x00FD9BB0: 42696E5C6574635C456C665061636B2E
0x00FD9BC0: 6263666700000000343A5C5A42696E5C
0x00FD9BD0: 6574635C456C665061636B2E62636667
0x00FD9BE0: 000000003A5C5A42696E5C4461656D6F
0x00FD9BF0: 6E735C002A2E656C660000003A5C5A62
0x00FD9C00: 696E5C7377692E626C696200496C6C65
0x00FD9C10: 67616C206C6962726172792073697A65
0x00FD9C20: 2100000043616E27742072656164206C
0x00FD9C30: 696272617279210046756E6374696F6E
0x00FD9C40: 20256420636F6E666C69637421000000
0x00FD9C50: 3A5C5A42696E5C696D675C656C665F73
0x00FD9C60: 6D616C6C2E706E67000000003A5C5A42
0x00FD9C70: 696E5C696D675C656C665F6269672E70
0x00FD9C80: 6E670000A09CFDA055000000FF077805
0x00FD9C90: D09CFDA0D89CFDA0618CFDA000000000
0x00FD9CA0: 656C6600256428253033582900000000
0x00FD9CB0: 01014E6F2066756E6374696F6E20696E
0x00FD9CC0: 206C6962A100000048454C5045520000
0x00FD9CD0: A4824CA800000000C4824CA800000000
0x00FD9CE0: 312E322E350000003A5C5A42696E5C69
0x00FD9CF0: 6D675C0000000100FC9CFDA0FF000000
0x00FD9D00: 01000000416C7068612D6368616E2074
0x00FD9D10: 68726573686F6C640000000000000000
0x00FD9D20: 0000000000000000FF00000080000000
0x00FD9D30: 01000000504E47206361636865207369
0x00FD9D40: 7A650000000000000000000000000000
0x00FD9D50: 0000000014000000C800000032000000
0x00FD9D60: 0500000044656661756C74206269742D
0x00FD9D70: 64657074680000000000000000000000
0x00FD9D80: 00000000000000000200000001000000
0x00FD9D90: 38206269747300000000000000000000
0x00FD9DA0: 00000000000000000000000000000000
0x00FD9DB0: 31362062697473000000000000000000
0x00FD9DC0: 00000000000000000000000000000000
#pragma disable old_equal_ff

;------------------------- end -------------------------

