;S68v52
;Библиотека Функций
;Function Library
;(c) dimonp25, sim_emrom, hotter
;(r) Smelter
;Version: 110615
;PatchID: 10839
;Details: https://patches.kibab.com/patches/details.php5?id=10839
/*
Найдено на просторах архивов allsiemens.
Есть ошибки!

*/

; S68v52
; Functions library
; made by dimonp25 and sim_emrom, using Smelter (c) avkiev; updated by Hotter
; 2011.06.15

+0074000
#pragma enable  old_equal_ff
0000: 0xA0002070   ;   0: void loopback0()
0004: 0xA0002070   ;   1: void loopback1()
0008: 0xA0002070   ;   2: void loopback2()
000C: 0xA0002070   ;   3: void loopback3()
0010: 0xA0002070   ;   4: void loopback4()
0014: 0xA023A50D   ;   5: DecToHex
0018: 0xA016DE88   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: (API) GetLP
0020: 0xA0179F18   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA01FC9CC   ;   9: void SwitchPhoneOff()
0028: 0xA021DBDC   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA021DC9C   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA021DDCC   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA021DB30   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA021DB60   ;   E: __arm fflush
003C: 0xA021DB90   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA021D7D4   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: (API) OpenReadCloseFile
0048: 0xA021D634   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA021D928   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094084   ;  14: malloc(unsigned int size)
0054: 0xA0093ED0   ;  15: mfree(void *)
0058: 0xA0FBF64D   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FC101D   ;  17: char *strcat (char *,const char *)
0060: 0xA0FC103D   ;  18: char *strchr (const char *,int)
0064: 0xA0FC1060   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FC10FD   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FC117D   ;  1B: unsigned int strlen(const char *)
0070: 0xA01BA17D   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01BA131   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA07FBBFD   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA02D6413   ;  1F: DrawMainScreen

0080: 0xA02D78AB   ;  20: DrawScreenSaver
0084: 0xA07FBD27   ;  21: int GetImgHeight(int picture)
0088: 0xA07FBD37   ;  22: int GetImgWidth(int picture)
008C: 0xA0267F91   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA087BC53   ;  24: __thumb DrawImage2
0094: 0xA02674F3   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA087BB7D   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA0267719   ;  27: AddIconToIconbar
00A0: 0xA01a90e4   ;  28: getEELiteMaxID
00A4: 0xA01a8270   ;  29: getEEFullMaxID
00A8: 0xA01a8668   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA01a8ff4   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA01a7d04   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
00B4: 0xA01a9268   ;  2D: StartWriteEELiteBlock
00B8: 0xA01a9560   ;  2E: FinishWriteEELiteBlock
00BC: 0xA01a914c   ;  2F: DeleteEELiteBlock

00C0: 0xA01a9448   ;  30: WriteEELiteBlock
00C4: 0xA0FC12C5   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA024D858   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02441B0   ;  33: PlaySound2
00D0: 0xA0981CEC   ;  34: void PlaySoundLoop(int _0x2F, int param2, int duration)
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA0247630   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA02F9253   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA02F8E65   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA02F6DF7   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FC0301   ;  3B: MemChr
00F0: 0xA021DCDC   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA02F88F1   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA07F6F61   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA02562DD   ;  40: GetVibraStatus
0104: 0xA079F91B   ;  41: GetProvider
0108: 0xA02D7897   ;  42: int IsScreenSaver()
010C: 0xA07A7883   ;  43: int IsUnlocked(void)
0110: 0xA07A1999   ;  44: TempLightOn
0114: 0xA006F241   ;  45: (API) int GetWavLen(char *filename)
;118:              ;  46: int HasNewSMS()
011C: 0xA0266813   ;  47: __thumb int HasFlashSMS()
0120: 0xA0B7E297   ;  48: __thumb int ReadNewSMS(void)
;124:              ;  49: ReadFlashSMS
0128: 0xA0246028   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA09090D8   ;  4B: StartMidlet
0130: 0xA082E021   ;  4C: int GetMissedCallsCount()
0134: 0xA00931E8   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA07FD7A1   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA07FD801   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA07FD80B   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0B93A53   ;  51: GetNetAccessMode
0148: 0xA8D07E20   ;  52: char *GetIlluminationDataTable()
014C: 0xA0FC0325   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA0299301   ;  54: int StrToInt(char *s, char **endp)
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: (API) PlayVibra
015C: 0xA00932F8   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0FC0798   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FC083C   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA07A7141   ;  5A: KeypressOn(int key)
016C: 0xA07A7253   ;  5B: KeypressOff(int key)
0170: 0xA031AB45   ;  5C: unsigned char GetCPUClock()
0174: 0xA031AB7F   ;  5D: unsigned char GetCPULoad()
0178: 0xA031AB4D   ;  5E: GetMMIMemUsed
017C: 0xA00940EC   ;  5F: int GetFreeRamAvail()

0180: 0xA0316749   ;  60: ShowMainMenu
0184: 0xA02A59D3   ;  61: ShowNativeMenu
0188: 0xA02562A5   ;  62: SetVibraStatus
018C: 0xA0268D11   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
;S75v52 has these-->
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
01A0: 0xA02D7871   ;  68: SS_RAM *GetScreenSaverRAM(void)
01A4: 0xA009A9EC   ;  69: void LockSched_2(void)
01A8: 0xA009AAD8   ;  6A: void UnlockSched_2(void)
01AC: 0xA021D6AC   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA021D72C   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA021D5F4   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0B32B19   ;  6E: int IsCalling()
01BC: 0xA07D7BE8   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA07D7C18   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA087B5FF   ;  71: __thumb DrawRoundRect
;S75v52 has these-->
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0B3331B   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02A0B95   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA0269229   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA02691D9   ;  76: GetCanvasBufferPicPtr(char CanvasID)
01DC: 0xA07F7417   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA07A52BD   ;  78: GetTimeFormat
01E4: 0xA07A69ED   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01717DB   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0B324DB   ;  7D: IsIncognitoCall
01F8: 0xA0B31B95   ;  7E: int rand(void)
01FC: 0xA02EEA2D   ;  7F: IsPlayerOn

0200: 0xA04CAB85   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FC0B90   ;  81: HexToDec
0208: 0xA02EEB49   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA021D9A0   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA023A865   ;  85: int strcmpi(const char *s1, const char *s2)
0218: 0xA01A7B24   ;  86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA01A7DB4   ;  87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA006EF00   ;  88: (API) char GetAccessoryType(void)
0224: 0xA07A9B58   ;  89: GetLangMesIntoWS
0228: 0xA021D584   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA021DE38   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA026F335   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA02D0EB7   ;  8D: GetProfileName
0238: 0xA021D83C   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA021D8C0   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA021DD54   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA021D76C   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0863FEC   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA01FC9D8   ;  93: void RebootPhone()
0250: 0xA026F4D1   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA026F413   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA027E963   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: (API) CreatePath
0260: 0xA006F211   ;  98: (API) void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA0246298   ;  99: __arm short PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct);
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA02D7D7D   ;  9C: CloseScreensaver
0274: 0xA02D202F   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: (API) int GetMissedEventCount(unsigned int Event)
027C: 0xA087B4CB   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA07EE885   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01BA06F   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA01B9A55   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA021E31C   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA07EF349   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01B9829   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA07D7BC0   ;  A6: void ResetGPRSTraffic()
029C: 0xA0B878D1   ;  A7: char IsGPRSEnabled()
02A0: 0xA0B33CD9   ;  A8: char IsGPRSConnected()
02A4: 0xA07A806B   ;  A9: void KbdLock()
02A8: 0xA088BF89   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002070   ;  AB: void loopback171()
02B0: 0xA0FCF1B1   ;  AC: API DrawText
02B4: 0xA0FCF0A1   ;  AD: API StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: API StrUni2Ansi
02BC: 0xA031A949   ;  AF: Hex2Int

02C0: 0xA0FCF351   ;  B0: API DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: (API) DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: API GetBuildCanvas
02CC: 0xA006F551   ;  B3: (API) long Seconds2iTime(int timeval)
02D0: 0xA07A3E33   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA02394CF   ;  B5: char GetWeek(TDate *)
02D8: 0xA0255AAB   ;  B6: char GetProfile()
02DC: 0xA0255B0B   ;  B7: char SetProfile(char)
02E0: 0xA0FC09B0   ;  B8: int sdiv(int denom,int number)
02E4: 0xA07A7B4F   ;  B9: void KbdUnlock()
02E8: 0xA0094090   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC0998   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC0A88   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FC0B4C   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: (MP) RunScaner
02FC: 0xA0063001   ;  BF: (MP) void SpellTime()

0300: 0xA0FC7601   ;  C0: (MP) MP MiniGPS
0304: 0xA0060C51   ;  C1: (Disp) RunDispatcher
0308: 0xA0FC12A1   ;  C2: (MP) MP GetAllPatchesByInject
030C: 0xA006F091   ;  C3: (API) ProcessFiles
0310: 0xA0060C01   ;  C4: (MP) void *GetBuffer(int patch_id)
0314: 0xA02D1FD7   ;  C5: char IsIdleUiOnTop()
0318: 0xA016A5D4   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D036D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D036FA   ;  C9: unsigned short *RamLS()
0328: 0xA8E28C12   ;  CA: RAMNET *RamNet()
032C: 0xA8D73CB0   ;  CB: RamRingtoneStatus
0330: 0xA8DE369C   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8D181C4   ;  CE: char *RamDateTime()
033C: 0xA8E83244   ;  CF: char *RamAlarm()

0340: 0xA8D64E8C   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
0348: 0xA8D181EC   ;  D2: char *RamAutoTime()
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8DCD390   ;  D4: char *RamMissedMes()
0354: 0xA8D338E4   ;  D5: RamIsLocked
0358: 0xA8DA690C   ;  D6: RamNetOnline
035C: 0xA8DA79E8   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: 
0368: 0xA8D67844   ;  DA: RamIsShutdown
036C: 0xA8E81ACC   ;  DB: RamMainscreenAccuIcon
0370: 0xA8DC6A74   ;  DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8D7303C   ;  DE: RamIsSimPresent
037C: 0xA8D338BC   ;  DF: char *RamPressedKey()

0380: 0xA8D282D0   ;  E0: char *RamScreenBuffer()
0384: 0xA8E32BC0   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8D80010   ;  E4: void *FreeRAM()
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA02CFBD9   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8D28224   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8DA802C   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A04   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA00918C0   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009200C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091D14   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091EF8   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092EB0   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB3688   ; 106: CSMROOT *CSM_root()
041C: 0xA07F5913   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA07F5925   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA07F59E1   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA02661F1   ; 10F: void freeUSSD()

0440: 0xA023A915   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA026622D   ; 111: char GetTypeUSSD()
0448: 0xA026623D   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FC114D   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FC11C9   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC11F9   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC1249   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC12C5   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FC1305   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FC132D   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC13A9   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FBF5F9   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FC0325   ; 11C: int memcmp(const void *m1, const void *m2, int n)
0474: 0xA0FC0798   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FC083C   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01BA06F   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01BA091   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01BA0B5   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01BA0E9   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01B98F7   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA07EE885   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA07EF349   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01BA2E1   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01B9EFF   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01B9F79   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01B9829   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA07A6A19   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA07F5ABD   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA07F5AC5   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA07F5ACD   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA07F6F61   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA07F6F85   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA07F6F95   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA07F6FB3   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC08F4   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07FB7F9   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA07FB80F   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA07FE0FB   ; 135: int IsGuiOnTop(int id)
04D8: 0xA07FE21F   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA07FE22F   ; 137: int CreateGUI(void *gui)
04E0: 0xA07FE23D   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA07FE277   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA07FE287   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA07FE297   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA07FE2A5   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA07FE2B3   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA07FE2C3   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA07FE357   ; 13F: void DirectRedrawGUI(void)

0500: 0xA07FE36F   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA07FE363   ; 141: void PendedRedrawGUI(void)
0508: 0xA0879727   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093288   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B08C   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0098A74   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009A9EC   ; 146: void LockSched(void)
051C: 0xA009AAD8   ; 147: void UnlockSched(void)
0520: 0xA07FD783   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA07F9279   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA07F74AD   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA07F7417   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)
0530: 0xA07F92C3   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA07FE109   ; 14D: GUI *GetTopGUI(void)
0538: 0xA08918ED   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0891939   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA087B5FF   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA087BB53   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)
0548: 0xA07FD313   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091778   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA00989EC   ; 154: void KillGBSproc(int cepid)
0554: 0xA012EBB5   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA012DF71   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA012FA29   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA012DE45   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA012ECF3   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA012E5CD   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA012E973   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA012F5E3   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA012F625   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA012E269   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA012E4E3   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA012F17B   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E1D28   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC15B4   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0885AC7   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0884F05   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0885215   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0885C63   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA088288D   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA088BB6B   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)
05A4: 0xA088BB01   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA088BB0D   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA021DA18   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA021E228   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA047DD78   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0449594   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA044A408   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA07DB721   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0B47245   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0B4773D   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0B47541   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0B47A71   ; 176: int closesocket(int socket)
05DC: 0xA0B47979   ; 177: int shutdown(int socket,int how)
05E0: 0xA0B47B63   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0B47FD1   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0B4EC41   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0B4EC4D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E1FA9C   ; 17C: int *socklasterr(void)
05F4: 0xA07FE2D3   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA07FE2E3   ; 17E: void RestartIDLETMR(void)
05FC: 0xA07FE2EF   ; 17F: void DisableIDLETMR(void)

0600: 0xA088BA05   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA088B95D   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA088B9A5   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA088B3F5   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA088524F   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0092534   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0B139B1   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0B14AC1   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009AF14   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA086FBDC   ; 18D: int available0(int sock)
0638: 0xA0B8786B   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0801A73   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A0C4   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A228   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009A594   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009A5F0   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009A6F8   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA08031DD   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA07FE3E5   ; 196: void RefreshGUI(void)
065C: 0xA080323D   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0803355   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA08031AF   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0802B4F   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA088B3E9   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01942C8   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA0194260   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012A819   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012A94F   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA012B78B   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int csd_or_gprs)
0698: 0xA00932F8   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA07E0375   ; 1A7: char *Get_CC_NC()
06A0: 0xA012EA79   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA012FACB   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA012F143   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA012FBE5   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA012E4D1   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA012FBE5   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01316F1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA012FBC9   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0131687   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA012FC1D   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA012DEA5   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA087D46F   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA087B4CB   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0B48A45   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0B1D731   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F3DE73   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3DB57   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3DD53   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0EC96B1   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0EC973F   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0EC990B   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0EC5EA3   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA07FFA01   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA07FF969   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA08A1128   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA088B98D   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA088B999   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0885E19   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0884E9F   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0884E93   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0884E87   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0884E71   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0884E59   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0884F41   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA026F15B   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA026F013   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA088BB2D   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA088BB39   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA088B9D5   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA088B9E1   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01A1FC4   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA012FBE5   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0131753   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA088BA35   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA088BA4D   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA045872D   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8E78418   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01B99F3   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01B9A15   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA088BAF5   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA088BBA3   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA0804ECF   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA07A6B1D   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01BA5C5   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01BA67D   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
0790: 0xA07FC617   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA088BC55   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA0801F2D   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA093A238   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA0876C78   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA07FC2CB   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8DC6F3A   ; 1EB: char *RAM_IMSI()
07B0: 0xA07FC2CF   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA07FC42F   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA07FC331   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01A1B50   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8474   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8DC7300   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FC0C01   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA07FC47B   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: (API) long GetFileSize(char *Filename)
07E0: 0xA02EE9AB   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: (API) void SendMP_cmd(cmd,substract)
07E8: 0xA8D075FD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D1F304   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA07F5A1B   ; 1FC: void CloseCSM(int id)
07F4: 0xA087B4AF   ; 1FD: SetProp2Square_v2
;S75v52 has these--> but s68 dont have lighter?
;7F8:              ; 1FE: char *RamLighterPower()
07FC: 0xA0316583   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: (MP) ScreenShoot
0804: 0xA087BC79   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0881C3B   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA087D31F   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA087A337   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA087B489   ; 205: SetProp2Square_v1
0818: 0xA0FC06BD   ; 206: void srand(unsigned int seed)
081C: 0xA088152F   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA07A6B3B   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA07F5959   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA088BA89   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA088BAA1   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA088BAB9   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA088BAD1   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA08851CF   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA08850B5   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA07FE0F5   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01BA111   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA01BA1A1   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA07EE91F   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA04E0621   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA080616F   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA0806597   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA088BBC1   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA088BBCD   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA088BC09   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA07D9C39   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA07FE32F   ; 21E: void FocusGUI(int id)
087C: 0xA07FE33F   ; 21F: void UnfocusGUI(void)

;880:              ; 220: IsSliderClosed
0884: 0xA029221C   ; 221: void SetCpuClockLow
0888: 0xA0292204   ; 222: void SetCpuClockTempHi
;S75v52 has these--> S68 has no media player?
;88C:              ; 223: IsMediaPlayerInBackground
;890:              ; 224: CloseMediaPlayer
0894: 0xA0246944   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02473F4   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA0247494   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA02474C4   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FC15DC   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA07E17BD   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA02AA0F1   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02A99E3   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02A9AE1   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA02EB8F7   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8D28194   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA07A3DC1   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8D2813C   ; 231: TAppointment *RamAppointment
08C8: 0xA00927B8   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA04D4329   ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar()
08E0: 0xA07E1767   ; 238: void SendAutoUSSDack(void)
08E4: 0xA01A81D0   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA01A833C   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC:              ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA0F3ABED   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0F3A85D   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0F3AAF5   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0F3B57D   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07A3FDF   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0EB6621   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0EB66D1   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA0337013   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA0B24831   ; 247: NetOff()
0920: 0xA8D06A7A   ; 248: char *RamFormatTrack()
0924: 0xA8D06CE2   ; 249: char *RamFreq()
0928: 0xA8D06E9A   ; 24A: char *RamChannel()
092C: 0xA080373F   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02BE6A1   ; 24C: int GetPeripheryState(int device, int check_state)
0934: 0xA02474F4   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA029ED40   ; 24E: void *GetPlayObjById(int handle)
093C: 0xA0B0B0AC   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA0B0AE44   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
;S75v52 has these-->
;944:              ; 251: char *RamDataSendFName()
;948:              ; 252: char *RamDataReceiveFName()
094C: 0xA8DE3AC2   ; 253: char *RamLastCallNum()
0950: 0xA02EB91B   ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA0804ECB   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xA034F21B   ; 256: isSetupTheme()
095C: 0xA07D2801   ; 257: isSendReceiveFile()
0960: 0xA07FBCC1   ; 258: int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0B2C740   ; 259: HObj Obs_CreateObject(int uid_in, int uid_out, int prio, int msg_callback, int emb4, int sync,unsigned int *ErrorNumber)
0968: 0xA0C48A80   ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA0B2A724   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0B64D34   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA0B64EB0   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA0B0DF38   ; 25E: int Obs_Start(HObj hObj)
097C: 0xA0B66028   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)

0980: 0xA0B65BE8   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0B655F8   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA0B0DB98   ; 262: int Obs_GetInfo(HObj hObj, int unk_0or1)
098C: 0xA0B653A4   ; 263: intObs_SetScaling(HObj hObj, int unk5)
0990: 0xA0B2DDC0   ; 264: int Obs_TranslateMessageGBS(GBS_MSG *msg, OBSevent *event_handler)
;S75v52 has these-->
0994: 0xA0B0E28C   ; 265: int Obs_Pause (HObj hObj)
0998: 0xA0B0E5E8   ; 266: int Obs_Resume (HObj hObj)
099C: 0xA0B0E414   ; 267: int Obs_Stop (HObj hObj)
09A0: 0xA0B0DDAC   ; 268: int Obs_Prepare (HObj hObj)
09A4: 0xA0BD2064   ; 269: int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0B0AFE8   ; 26A: int Obs_SetPosition (HObj hObj,int ms)
09AC: 0xA0B0EC74   ; 26B: int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA0B5D1E0   ; 26C: int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta)
09B4: 0xA0B5DEBC   ; 26D: int Obs_Sound_GetVolume (HObj hObj, char *vol)
09B8: 0xA0B5D6F8   ; 26E: int Obs_Sound_SetPurpose (HObj hObj,char purpose)
;09BC:             ; 26F:

;9C0:             ; 270:
;9C4:             ; 271:
;9C8:             ; 272:
;9CC:             ; 273:
;9D0:             ; 274:
;9D4:             ; 275:
;9D8:             ; 276:
;9DC:             ; 277:
;9E0:             ; 278:
;9E4:             ; 279:
;9E8:             ; 27A:
;9EC:             ; 27B:
;9F0:             ; 27C:
;9F4:             ; 27D:
;9F8:             ; 27E:
;9FC:             ; 27F:

;0A00:             ; 280:
0A04: 0xA8DEA230   ; 281: char *RamIsRunJava()
0A08: 0xA8DCD67C   ; 282: char *RamIsRunCamera()
0A0C: 0xA02DB3C9   ; 283: int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0B87853   ; 284: int IsGPRS()
0A14: 0xA0B8785B   ; 285: int IsEDGE()
0A18: 0xA0B7ECEB   ; 286: int GetSMSState()
0A1C: 0xA02AA9CB   ; 287: int BT_GetLocVisibility()
0A20: 0xA02C147D   ; 288: int GetCurrAudioPath()
0A24: 0xA0C04FFD   ; 289: int isDecryption()
;A28:              ; 28A: char *RamIsFileCache()
0A2C: 0xA8E37148   ; 28B: char *RamTotalHeapSize()
0A30: 0xA8E371B8   ; 28C: char *RamTemporaryHeapSize()
0A34: 0xA8D22704   ; 28D: char *RamBTNameDevice()
0A38: 0xA8D218F8   ; 28E: char *RamActiveGPRSProfileName()
;S75v52 has these-->
;A3C:              ; 28F: char *RamIsNumberTyping()

0A40: 0xA8E25418   ; 290: char *RamCallState()
0A44: 0xA026A380   ; 291: int RefreshAlarmClock()
0A48: 0xA8E83248   ; 292: char *RamIsAlarmAutorepeatOn()
0A4C: 0xA8E83244   ; 293: char *RamAlarmclockHour()
0A50: 0xA8E83244   ; 294: char *RamAlarmclockMinute()
;0A54:             ; 295: 
0A58: 0xA0255C15   ; 296: void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8E7BF94   ; 297: char *RamIsSoundRecord()
0A60: 0xA8E7BFF0   ; 298: char *RamIsSoundRecordQuality()
;S75v52 has these-->
;A64:              ; 299: char *RamExtendedCameraState()
0A68: 0xA025EE21   ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)
0A6C: 0xA0266145   ; 29B: GetTypeOfBTHeadset
0A70: 0xA8D27DB1   ; 29C: char *RamInputLanguage()
0A74: 0xA8D33E28   ; 29D: char *RamDisplayLanguage()
;0A78:             ; 29E: char *RamIsBTConnected()
;0A7C:             ; 29F: char *RamIsBTHeadsetConnected()

0A80: 0xA0269FAC   ; 2A0: int GetAlarmclockState(int state)
;A84:              ; 2A1:
;A88:              ; 2A2:
0A8C: 0xA0801FD1   ; 2A3: void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA07FEE33   ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA0805D89   ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA07FE439   ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA0802D93   ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA07FFC03   ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA07FD5D7   ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA07FD549   ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0805C2F   ; 2AB: void *GetPopupUserPointer(void *gui)
0AB0: 0xA09691D1   ; 2AC: int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA09693D9   ; 2AD: int SetSmsStatus(int index, int type)
0AB8: 0xA0803A89   ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA08970F9   ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA0804A89   ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8DE7728   ; 2B1: SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0B90E1D   ; 2B2: int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA0455E14   ; 2B3: NativeAbData *AllocNativeAbData(void)
0AD0: 0xA0455F24   ; 2B4: int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA04561AC   ; 2B5: int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA0456864   ; 2B6: WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA04561CC   ; 2B7: int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA0456AC0   ; 2B8: int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA04A16A0   ; 2B9: unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0897353   ; 2BA: void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA089415B   ; 2BB: void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0891205   ; 2BC: void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA089460F   ; 2BD: int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA089472B   ; 2BE: int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA089488D   ; 2BF: int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0894749   ; 2C0: int GetCursorTab(void *tab_gui)
0B04: 0xA08941C5   ; 2C1: void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA079F6FD   ; 2C2: int GetSubprovider(WSHDR* ws)
0B0C: 0xA079F931   ; 2C3: int GetRoamingState()
0B10: 0xA0255543   ; 2C4: int GetProfileVolumeSetting(int profile, int type)
0B14: 0xA8DA6FC4   ; 2C5: RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA0239B67   ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA0239BB9   ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA023A042   ; 2C8: int GetSecondsFromTime(*TTime time)
0B24: 0xA0239AA1   ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA0239BB9   ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA023A055   ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA023998C   ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA023A37D   ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA0239370   ; 2CE: int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA0239FE4   ; 2CF: int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA02393C1   ; 2D0: int GetDaysFromMonth(TDate *date)
0B44: 0xA02393A1   ; 2D1: int IsLeapYear(TDate *date)
0B48: 0xA043fe75   ; 2D2: void StartBrowser
;S75v52 has these-->
;0B4C:             ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab)
;0B50:             ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n)
;0B54:             ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
;0B58:             ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
;0B5C:             ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *)
;0B60:             ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
;0B64:             ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer)
;0B68:             ; 2DA: void *TViewGetUserPointer(void *gui)
0B6C: 0xA039e055   ; 2DB: void MediaSendCSM_Open(WSHDR *file, WSHDR *path)
0B70: 0xA07a1b09   ; 2DC: __thumb void SaveMaxIllumination(int level);
0B74: 0xA07a1b1d   ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec);
0B78: 0xA07a1b2d   ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter);
0B7C: 0xA07a1b49   ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter);

0B80: 0xA08959F7   ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index);
;S75v52 has these-->
;0B84:             ; 2E1: int GetExtUidByFileName_ws(WSHDR * fn)
;0B88:             ; 2E2: int wstrcmp(WSHDR*ws1,WSHDR*ws2)
;0B8C:             ; 2E3: int fexists(WSHDR* FileName)
;0B90:             ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char *entry,char *keyword)
;0B94:             ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char *entry,char *keyword)
;0B98:             ; 2E6: int SettingsAE_SetFlag(int val,int set,char *entry,char *keyword)
;0B9C:             ; 2E7: int SettingsAE_GetFlag(int *res,int set,char *entry,char *keyword)
;0BA0:             ; 2E8: int SettingsAE_Update(int val,int set,char *entry,char *keyword)
;0BA4:             ; 2E9: int SettingsAE_Read(int *res,int set,char *entry,char *keyword)
;0BA8:             ; 2EA: void* SettingsAE_GetEntryList(int set);
;0BAC:             ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag)
;0BB0:             ; 2EC: int i2c_transfer(I2C_MSG *msg)
;0BB4:             ; 2ED: int i2c_receive(I2C_MSG *msg)

0BC0: 0xA07F7507 ; 2F0: int PushDRWOBJOnLAYER(DRWOBJ*, LCDLAYER *);
0BC4: 0xA07F9207 ; 2F1 int LCDRedrawLAYER(LCDLAYER *);
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

