;SL75v39
;Библиотека функций
;Function Library
;(c) avkiev
;Version: 61026
;PatchID: 6122
;Details: https://patches.kibab.com/patches/details.php5?id=6122
/*

*/
+0074000
#pragma enable old_equal_ff
0000: 0xA00020F0   ; 00: SWI0
0004: 0xA00020F0   ; 01: SWI1
0008: 0xA00020F0   ; 02: SWI2
000C: 0xA00020F0   ; 03: SWI3
0010: 0xA00020F0   ; 04: SWI4
0014: 0xA026D849   ; 05: DecToHex
0018: 0xA01AA3FC   ; 06: GetAkku
001C: 0xA006F061   ; 07: GetLP
0020: 0xA01B4940   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA02326C4   ; 09: SwitchPhoneOff
0028: 0xA0250FE0   ; 0A: fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA02510A0   ; 0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA02511D0   ; 0C: fwrite(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0250F34   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0250F64   ; 0E: fflush
003C: 0xA0250F94   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0250BD8   ; 10: mkdir
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA0250A38   ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0250D2C   ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ; 14: malloc(unsigned int size)
0054: 0xA0094948   ; 15: mfree(void *)
0058: 0xA0FC7EF1   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA0FC995D   ; 17: strcat(char *,const char *)
0060: 0xA0FC997D   ; 18: strchr(const char *,int)
0064: 0xA0FC99A0   ; 19: strcmp(const char *,const char *)
0068: 0xA0FC9A3D   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA0FC9ABD   ; 1B: strlen(char *)
0070: 0xA01F5BB5   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA01F5B69   ; 1D: wsInsertChar
;078:              ; 1E: GetPITaddr
;07C:              ; 1F: DrawMainScreen

;080:              ; 20: DrawScreenSaver
0084: 0xA09744BB   ; 21: GetImgHeight
0088: 0xA09744CB   ; 22: GetImgWidth
008C: 0xA029B5ED   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
;090:              ; 24: DrawImage2
0094: 0xA029AB4F   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A017BD   ; 26: DrawImgBW
;09C:              ; 27: AddIconToIconbar
;0A0:              ; 28: getEELiteMaxID
;0A4:              ; 29: getEEFullMaxID
00A8: 0xA01E4178   ; 2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ; 2B: getEELiteBlockSizeVersion
;0B0:              ; 2C: getEEFullBlockSizeVersion
;0B4:              ; 2D: StartWriteEELiteBlock
;0B8:              ; 2E: FinishWriteEELiteBlock
;0BC:              ; 2F: DeleteEELiteBlock

;0C0:              ; 30: WriteEELiteBlock
00C4: 0xA0FC9C05   ; 31: strrchr
00C8: 0xA0280A5C   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0277464   ; 33: PlaySound2
00D0: 0xA0B388F0   ; 34: PlaySoundLoop
;0D4:              ; 35: AlarmClockRing
;0D8:              ; 36: GetATCmdString
00DC: 0xA09A4781   ; 37: OriginalATCGSN
;0E0:              ; 38: PostAtCommand
00E4: 0xA08E8AD5   ; 39: SendATAnswerStr
;0E8:              ; 3A: mfree_high
00EC: 0xA0FC8C59   ; 3B: MemChr
00F0: 0xA02510E0   ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ; 3D: editOrNewTXTModule
;0F8:              ; 3E: LoadProcesses
00FC: 0xA096F6F5   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA0289469   ; 40: GetVibraStatus
0104: 0xA08FA327   ; 41: GetProvider
;108:              ; 42: IsScreenSaver
010C: 0xA090224F   ; 43: IsUnlocked
;110:              ; 44: TempLigntOn
;114:              ; 45: GetWavLen
;118:              ; 46: HasNewSMS
;11C:              ; 47: HasFlashSMS
;120:              ; 48: ReadNewSMS
;124:              ; 49: ReadFlashSMS
0128: 0xA0279294   ; 4A: PlayFile
012C: 0xA0AA829C   ; 4B: StartMidlet
;130:              ; 4C: GetMissedCallsCount
0134: 0xA0093278   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
;138:              ; 4E: ShowMsgInR1_3
;13C:              ; 4F: ShowMsgInR1_4

;140:              ; 50: ShowMsgInR1_7
0144: 0xA0D4E4C3   ; 51: GetNetAccessMode
;148:              ; 52: GetIlluminationDataTable
014C: 0xA0FC8C7D   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA02BF499   ; 54: StrToInt
;154:              ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
;15C:              ; 57: IsCallAfterTimerStillRunning
0160: 0xA001838C   ; 58: ClearMemory
0164: 0xA0FC917C   ; 59: memcpy(void *dest,const void *source,int cnt)
;168:              ; 5A: KeypressOn
;16C:              ; 5B: KeypressOff
0170: 0xA01CF814   ; 5C: GetCPUClock()
0174: 0xA032FD77   ; 5D: GetCPULoad()
;178:              ; 5E: GetMMIMemUsed
017C: 0xA0094BE8   ; 5F: int GetFreeRamAvail()

;180:              ; 60: ShowMainMenu
;184:              ; 61: ShowNativeMenu
0188: 0xA0289431   ; 62: SetVibraStatus
;18C:              ; 63: MS_Wallpaper_Flush
;190:              ; 64: TriggerUpdate
;194:              ; 65: EndCall
;198:              ; 66: EndCallBusy
;19C:              ; 67: IsDirectCallActive
;1A0:              ; 68: GetScreenSaverRAM
01A4: 0xA009B180   ; 69: LockSched(void)
01A8: 0xA009B26C   ; 6A: UnlockSched(void)
01AC: 0xA0250AB0   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0250B30   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA02509F8   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0x00000000   ; 6E: IsCalling
01BC: 0xA09503B0   ; 6F: void RefreshGPRSTraffic()

01C0: 0xA09503E0   ; 70: int *GetGPRSTrafficPointer()
;1C4:              ; 71: DrawRoundRect
;1C8:              ; 72: SetCurrentSecondOfCall
;1CC:              ; 73: GetTypeOfCall
;1D0:              ; 74: GetFunctionPointer
;1D4:              ; 75: StoreXYWHtoRECT
;1D8:              ; 76: SetWindowText
;1DC:              ; 77: set2color_byPaletteAdr
;1E0:              ; 78: GetTimeFormat
;1E4:              ; 79: DrawObject
;1E8:              ; 7A: ClearWindowBuffer
;1EC:              ; 7B: GetProfileFilter
01F0: 0xA01AF213   ; 7C: SetVibration(unsigned int power)
01F4: 0xA0D0862F   ; 7D: IsIncognitoCall
01F8: 0xA0D07CCD   ; 7E: Rand
01FC: 0xA05316BD   ; 7F: IsPlayerOn

0200: 0xA05E4CF1   ; 80: ShowCallList(int list, int zero)
0204: 0xA0FC94D0   ; 81: HexToDec
0208: 0xA053179F   ; 82: GetCurrentTrackFilename
;20C:              ; 83: GetPathOfFoundFile
0210: 0xA0250DA4   ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ; 85: StrCmpNoCase
;218:              ; 86: ReadEEPROMData
;21C:              ; 87: WriteEEPROMData
0220: 0xA022D6A4   ; 88: GetAccessoryType
0224: 0xA0904524   ; 89: GetLangMesIntoWS
0228: 0xA0250988   ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA025123C   ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04D7261   ; 8C: RegExplorerExt(REGEXPLEXT const *)
;234:              ; 8D: GetProfileName
0238: 0xA0250C40   ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0250CC4   ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0251158   ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0250B70   ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09E9F00   ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA02326D0   ; 93: RebootPhone
0250: 0xA04D73FD   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04D733F   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ; 96: 
;25C:              ; 97: 
;260:              ; 98: 
;264:              ; 99: 
;268:              ; 9A: 
;26C:              ; 9B: 
;270:              ; 9C: 
;274:              ; 9D: 
;278:              ; 9E: 
;27C:              ; 9F: DrawRect

0280: 0xA0967021   ; A0: wsprintf(WSHDR *,const char *format,...)
;284:              ; A1: wstrcpy
;288:              ; A2: Unicode_GetCharByPosition
028C: 0xA0251720   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0967AE5   ; A4: AllocWS_2(int len)
0294: 0xA01F5339   ; A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA0950388   ; A6: void ResetGPRSTraffic()
029C: 0xA0D4232D   ; A7: char IsGPRSEnabled()
02A0: 0xA0D09E2D   ; A8: char IsGPRSConnected()
02A4: 0xA0902A37   ; A9: void KbdLock()
02A8: 0xA0A11BC9   ; AA: char *GetCurrentLocale()
02AC: 0xA00020F0   ; AB: SWI_AB
;2B0:              ; AC: DrawText
;2B4:              ; AD: StrAnsi2Uni
;2B8:              ; AE: StrUni2Ansi
;2BC:              ; AF: Hex2Int

;2C0:              ; B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
;2C8:              ; B2: GetBuildCanvas
;2CC:              ; B3: Seconds2iTime
02D0: 0xA08FE80B   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA026C80B   ; B5: GetWeek(TDate*)
02D8: 0xA0288C63   ; B6: GetProfile()
02DC: 0xA0288CC3   ; B7: SetProfile(char)
02E0: 0xA0FC92F0   ; B8: dwMODdw
02E4: 0xA090251B   ; B9: void KbdUnlock
02E8: 0xA0094B68   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC92D8   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC93C8   ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FC948C   ; BD: int DivBy10(int divident)
02F8: 0xA0060C91   ; BE: RunScaner
;2FC:              ; BF: SpellTime

;300:              ; C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
;308:              ; C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
;314:              ; C5: PIT_Manager_Core
0318: 0xA01A6B40   ; C6: char GetAkkuCapacity()
;31C:              ; C7: SWI_C7
0320: 0xA8D036D6   ; C8: RamCap
0324: 0xA8D036FA   ; C9: RamLS
0328: 0xA8E2EC2E   ; CA: RamNet
;32C:              ; CB: 
;330:              ; CC: RamMissedCalls
;334:              ; CD: RamMissedSMS
;338:              ; CE: RamDateTime
;33C:              ; CF: RamAlarm

0340: 0xA8D6A3D8   ; D0: RamAccPoint
;344:              ; D1: RamScreensaver
;348:              ; D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
;350:              ; D4: RamMissedMes
;354:              ; D5: RamIsLocked
;358:              ; D6: RamNetOnline
;35C:              ; D7: RamScreenBrightness
;360:              ; D8: RamMenuAnywhere
;364:              ; D9: RamShutdownMode
;368:              ; DA: RamIsShutdown
;36C:              ; DB: RamMainscreenAccuIcon
;370:              ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA8D77FF4   ; DE: RamIsSimPresent
037C: 0xA8D34F7C   ; DF: RamPressedKey

0380: 0xA8D29990   ; E0: RamScreenBuffer
0384: 0xA8E3E9AC   ; E1: unsigned int RamMPlayer_CtrlCode()
;388:              ; E2: RamKeyBuffer
;38C:              ; E3: RamProfileNum
0390: 0xA8A80000   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000260   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
;3AC:              ; EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B0   ; EF: Pic_Calendar

;3C0:              ; F0: Pic_AccuGraph
03C4: 0xA02FCAA1   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
;3D4:              ; F5: 
;3D8:              ; F6: 
;3DC:              ; F7: 
;3E0:              ; F8: Additional_PIT_address
;3E4:              ; F9: Additional_PIT_start
;3E8:              ; FA: Additional_PIT_end
;3EC:              ; FB: 
;3F0:              ; FC: PictureRelocationTable
;3F4:              ; FD: PictureRelocationBase
;3F8:              ; FE: NextPictureMagic
;3FC:              ; FF: 

0400: 0xA0092A94   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB99B8   ; 106: CSM_root()
041C: 0xA096E0A7   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA096E0B9   ; 108: FindCSMbyID(int id)
0424: 0xA096E175   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA0299C8D   ; 10F: freeUSSD()

0440: 0xA026DC21   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA0299CC9   ; 111: GetTypeUSSD()
0448: 0xA0299CD9   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FC9A8D   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FC9B09   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC9B39   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC9B89   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC9C05   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FC9C1D   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FC9C45   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC9CC1   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC7E9D   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FC8C7D   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FC90D8   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FC917C   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA01F5AA7   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F5AC9   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F5AED   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F5B21   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F5407   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0967021   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0967AE5   ; 125: AllocWS(int len)
0498: 0xA01F5D19   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA01F5937   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F59B1   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F5339   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA09013F1   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA096E251   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA096E259   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA096E261   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA096F6F5   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA096F719   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA096F729   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA096F747   ; 131: setColor(int a,int r,int g,int b,void *dest)
;4C8:              ; 132: 
04CC: 0xA0973F8D   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA0973FA3   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA097688F   ; 135: IsGuiOnTop(int id)
04D8: 0xA09769B3   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA09769C3   ; 137: CreateGUI(void *gui)
04E0: 0xA09769D1   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA0976A0B   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0976A1B   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0976A2B   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA0976A39   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA0976A47   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0976A57   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0976AEB   ; 13F: DirectRedrawGUI(void)

0500: 0xA0976B03   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA0976AF7   ; 141: PendedRedrawGUI(void)
0508: 0xA09FF367   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: LockSched_2(void)
051C: 0xA009B26C   ; 147: UnlockSched_2(void)
0520: 0xA0975F09   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA0971A0D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA096FC41   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA096FBAB   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0971A57   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA097689D   ; 14D: GetTopGUI(void)
0538: 0xA0A17529   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A17575   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A0123F   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0A01793   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0975AA7   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091808   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: KillGBSproc(int cepid)
0554: 0xA00E2EE0   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA00E1908   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA00E4404   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA00E170C   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA00E3160   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA00E2698   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA01192DC   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA00E3CE0   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA00E3D40   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA00E4404   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA00E22B4   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA00E3774   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E1E48   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC9EF4   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A0B707   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A0AB45   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0AE55   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A0B8A3   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A084CD   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A117AB   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A11741   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A1174D   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0250E1C   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA025162C   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0564B64   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0507A50   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA05088C4   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0953EE9   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)
05CC: 0xA0A4892D   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A48E25   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A48C29   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A49159   ; 176: int closesocket(int socket)
05DC: 0xA0A49061   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A4924B   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A496B9   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A503F5   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A50401   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E25B80   ; 17C: int socklasterr(void)
05F4: 0xA0976A67   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0976A77   ; 17E: void RestartIDLETMR(void)
05FC: 0xA0976A83   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A11645   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A1159D   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A115E5   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A11035   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A0AE8F   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA098FC11   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0990D21   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F581C   ; 18D: int available0(int sock)
0638: 0xA0D422C7   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA097A207   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097B971   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0976B79   ; 196: void RefreshGUI(void)
065C: 0xA097B9D1   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA097BAE9   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097B943   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA097B2E3   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A11029   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: 
;674:              ; 19D: 
;678:              ; 19E: 
;67C:              ; 19F: 

;680:              ; 1A0: 
;684:              ; 1A1: 
;688:              ; 1A2: 
;68C:              ; 1A3: 
;690:              ; 1A4: 
;694:              ; 1A5: 
;698:              ; 1A6: 
;69C:              ; 1A7: 
;6A0:              ; 1A8: 
;6A4:              ; 1A9: 
;6A8:              ; 1AA: 
;6AC:              ; 1AB: 
;6B0:              ; 1AC: 
;6B4:              ; 1AD: 
;6B8:              ; 1AE: 
;6BC:              ; 1AF: 

;6C0:              ; 1B0: 
;6C4:              ; 1B1: 
;6C8:              ; 1B2: 
;6CC:              ; 1B3: 
;6D0:              ; 1B4: 
;6D4:              ; 1B5: 
;6D8:              ; 1B6: 
;6DC:              ; 1B7: 
;6E0:              ; 1B8: 
;6E4:              ; 1B9: 
;6E8:              ; 1BA: 
;6EC:              ; 1BB: 
;6F0:              ; 1BC: 
;6F4:              ; 1BD: 
;6F8:              ; 1BE: 
;6FC:              ; 1BF: 

;700:              ; 1C0: 
;704:              ; 1C1: 
;708:              ; 1C2: 
;70C:              ; 1C3: 
;710:              ; 1C4: 
;714:              ; 1C5: 
;718:              ; 1C6: 
;71C:              ; 1C7: 
;720:              ; 1C8: 
;724:              ; 1C9: 
;728:              ; 1CA: 
;72C:              ; 1CB: 
;730:              ; 1CC: 
;734:              ; 1CD: 
;738:              ; 1CE: 
;73C:              ; 1CF: 

;740:              ; 1D0: 
;744:              ; 1D1: 
;748:              ; 1D2: 
;74C:              ; 1D3: 
;750:              ; 1D4: 
;754:              ; 1D5: 
;758:              ; 1D6: 
;75C:              ; 1D7: 
;760:              ; 1D8: 
;764:              ; 1D9: 
;768:              ; 1DA: 
;76C:              ; 1DB: 
;770:              ; 1DC: 
;774:              ; 1DD: 
;778:              ; 1DE: 
;77C:              ; 1DF: 

;780:              ; 1E0: 
;784:              ; 1E1: 
;788:              ; 1E2: 
;78C:              ; 1E3: 
;790:              ; 1E4: 
;794:              ; 1E5: 
;798:              ; 1E6: 
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: 
;7E8:              ; 1FA: 
;7EC:              ; 1FB: 
;7F0:              ; 1FC: 
;7F4:              ; 1FD: 
;7F8:              ; 1FE: 
;7FC:              ; 1FF: 

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

;------------------------- end -------------------------

