;M81v51
;Эльфпак
;ELFPack
;(c) Rst7/CBSIE, BoBa, Kren
;(p) NForce
;Version: 2.3
;PatchID: 7867
;Details: https://patches.kibab.com/patches/details.php5?id=7867
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=m81v51&f=ELFPack_2_3.zip

/*
Много доделок/переделок, подробности в логе на SVN.

Все эльфы, которые лежат в архиве надо обновить (все эльфы в архиве от 20.07.2007)! А также MegaDial теперь заменяется на CallCenter (из папки демонов MD необходимо убрать).

Установка самого патча аналогична установке ЭП 2.2.
*/
;********************************************************************************
;Библиотека функций 28.08.2007
+0074000
#pragma enable old_equal_ff
0000: 0xA0002040   ;   0: void loopback0()
0004: 0xA0002040   ;   1: void loopback1()
0008: 0xA0002040   ;   2: void loopback2()
000C: 0xA0002040   ;   3: void loopback3()
0010: 0xA0002040   ;   4: void loopback4()
0014: 0xA026EF41   ;   5: DecToHex
0018: 0xA01ABF68   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B64CC   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0233C14   ;   9: SwitchPhoneOff
0028: 0xA0252550   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0252610   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0252740   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA02524A4   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038:              ;   E: 
003C: 0xA0252504   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0252148   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0251FA8   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA025229C   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FF8B71   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FFA5DD   ;  17: char *strcat (char *,const char *)
0060: 0xA0FFA5FD   ;  18: char *strchr (const char *,int)
0064: 0xA0FFA620   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FFA6BD   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FFA73D   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F6ECD   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F6E81   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA096BA81   ;  1E: IMGHDR *GetPITaddr(int num)
;07C:              ;  1F: DrawMainScreen

;080:              ;  20: DrawScreenSaver
0084: 0xA096BBAB   ;  21: int GetImgHeight(int picture)
0088: 0xA096BBBB   ;  22: int GetImgWidth(int picture)
008C: 0xA029C961   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
;090:              ;  24: DrawImage2
0094: 0xA029BEC3   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA09FF9A5   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029C0E9   ;  27: AddIconToIconbar
00A0: 0xA102C834   ;  28: double fp_sint2fp(signed int i)
;0A4:              ;  29: 
00A8: 0xA01E53B8   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA102C6D4   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA01E4A54   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
00B4: 0xA102BA94   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA102C9F4   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA102C0A8   ;  2F: double fp_div(double divisor, double divident)

;0C0:              ;  30: WriteEELiteBlock
00C4: 0xA0FFA885   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0282218   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0278B70   ;  33: PlaySound2
00D0: 0xA0B5C1F0   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36:
;0DC:              ;  37: 
00E0: 0xA0556E07   ;  38: int Registry_GetRegistryHMIKeyID(char *Keyword)
00E4: 0xA0556A19   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA05549AB   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FF98D9   ;  3B: MemChr
00F0: 0xA0252650   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA05564A5   ;  3E: GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)

00FC: 0xA0966DE5   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028AC9D   ;  40: GetVibraStatus
0104: 0xA090C257   ;  41: GetProvider
0108: 0xA030475F   ;  42: IsScreenSaver
010C: 0xA09141BF   ;  43: int IsUnlocked(void)
0110: 0xA090E2D5   ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA027A9E8   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0ABE9C8   ;  4B: StartMidlet
0130: 0xA09B1E49   ;  4C: GetMissedCallsCount
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA096D625   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA096D685   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA096D68F   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D558FB   ;  51: GetNetAccessMode
0148: 0xA8D87CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA000AE85   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C4AF5   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FF9D58   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FF9DFC   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0913A7D   ;  5A: KeypressOn(int key)
016C: 0xA0913B8F   ;  5B: KeypressOff(int key)
0170: 0xA033C2BD   ;  5C: unsigned char GetCPUClock()
0174: 0xA033C2F7   ;  5D: unsigned char GetCPULoad()
0178: 0xA033C2C5   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA0337EC1   ;  60: ShowMainMenu
0184: 0xA02D11C7   ;  61: ShowNativeMenu
0188: 0xA028AC65   ;  62: SetVibraStatus
018C: 0xA029D6E1   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0252020   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA02520A0   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0251F68   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D28A41   ;  6E: int IsCalling()
01BC: 0xA0947A6C   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0947A9C   ;  70: int *GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0D29243   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02CC389   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029DBF9   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA029DBA9   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA0911BF9   ;  78: GetTimeFormat
01E4: 0xA0913329   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B0D67   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D28403   ;  7D: IsIncognitoCall
01F8: 0xA0D27ABD   ;  7E: int rand(void)
01FC: 0xA054C64D   ;  7F: IsPlayerOn

0200: 0xA05FE79D   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FFA150   ;  81: HexToDec
0208: 0xA054C72F   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0252314   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA026F269   ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
0220: 0xA006EF00   ;  88: GetAccessoryType
0224: 0xA0916494   ;  89: GetLangMesIntoWS
0228: 0xA0251EF8   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA02527AC   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04E6FA1   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0302D3F   ;  8D: GetProfileName
0238: 0xA02521B0   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252234   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02526C8   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA02520E0   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09E7E14   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0233C20   ;  93: RebootPhone
0250: 0xA04E713D   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04E707F   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02AA76F   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA0304C45   ;  9C: CloseScreensaver
0274: 0xA02FF3AB   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA095E709   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F6DBF   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA0252C90   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA095F1CD   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6579   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA0947A44   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D49779   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D29C01   ;  A8: char IsGPRSConnected()
02A4: 0xA09149A7   ;  A9: void KbdLock()
02A8: 0xA0A0FDB1   ;  AA: char *GetCurrentLocale()
02AC: 0xA0002040   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA033C0C1   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA091076F   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026DF03   ;  B5: char GetWeek(TDate *)
02D8: 0xA028A46B   ;  B6: char GetProfile()
02DC: 0xA028A4CB   ;  B7: char SetProfile(char)
02E0: 0xA0FF9F70   ;  B8: int sdiv(int denom,int number)
02E4: 0xA091448B   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA000AF28   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FFA048   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FFA10C   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
0314: 0xA02FF353   ;  C5: IsIdleUiOnTop
0318: 0xA01A86B4   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D836D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D836FA   ;  C9: RamLS
0328: 0xA8EADA2A   ;  CA: RAMNET *RamNet()
032C: 0xA8DF7974   ;  CB: RamRingtoneStatus
0330: 0xA8E684B4   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8DA850C   ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

0340: 0xA8DE90E4   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8000000   ;  D3: RamStby
0350: 0xA8E52114   ;  D4: char *RamMissedMes()
0354: 0xA8DB3CAC   ;  D5: RamIsLocked
0358: 0xA8E2B950   ;  D6: RamNetOnline
035C: 0xA8E2CA2C   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8DEBA9C   ;  DA: RamIsShutdown
036C: 0xA8F10D0C   ;  DB: RamMainscreenAccuIcon
0370: 0xA8E4BAB8   ;  DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8DF6D00   ;  DE: RamIsSimPresent
037C: 0xA8DB3C84   ;  DF: char *RamPressedKey()

0380: 0xA8DA8698   ;  E0: char *RamScreenBuffer()
0384: 0xA8EBD7A8   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xAC000000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0301AC1   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8DA85EC   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E2D070   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E386CC   ; 106: CSMROOT *CSM_root()
041C: 0xA0965797   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA09657A9   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA0965865   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029AFFD   ; 10F: void freeUSSD()

0440: 0xA026F319   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029B039   ; 111: char GetTypeUSSD()
0448: 0xA029B049   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FFA70D   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FFA789   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FFA7B9   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FFA809   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FFA885   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FFA89D   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FFA8C5   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FFA941   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FF8B1D   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA000AE85   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FF9D58   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FF9DFC   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F6DBF   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F6DE1   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F6E05   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F6E39   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F6647   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA095E709   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA095F1CD   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F7031   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F6C4F   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F6CC9   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6579   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0913355   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA0965941   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA0965949   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA0965951   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0966DE5   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0966E09   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0966E19   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0966E37   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FF9EB5   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA096B67D   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA096B693   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA096DF7F   ; 135: int IsGuiOnTop(int id)
04D8: 0xA096E0A3   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA096E0B3   ; 137: int CreateGUI(void *gui)
04E0: 0xA096E0C1   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA096E0FB   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA096E10B   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA096E11B   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA096E129   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA096E137   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA096E147   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA096E1DB   ; 13F: void DirectRedrawGUI(void)

0500: 0xA096E1F3   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA096E1E7   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FD54F   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA096D5F9   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA09690FD   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0967331   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA096729B   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA0969147   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA096DF8D   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A15715   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A15761   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA09FF427   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA09FF97B   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA096D197   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136985   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D41   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377F9   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135C15   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AC3   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA013639D   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136743   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA01373B3   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373F5   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0136039   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA01362B3   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F4B   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2324   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FFAB74   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A098EF   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A08D2D   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0903D   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A09A8B   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A066B5   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A0F993   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A0F929   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A0F935   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA025238C   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0252B9C   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05836F0   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0515B04   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0516978   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA094B5A5   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A46C25   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A4711D   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A46F21   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A47451   ; 176: int closesocket(int socket)
05DC: 0xA0A47359   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A47543   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A479B1   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A4E621   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A4E62D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EA48B4   ; 17C: int *socklasterr(void)
05F4: 0xA096E157   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA096E167   ; 17E: void RestartIDLETMR(void)
05FC: 0xA096E173   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A0F82D   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A0F785   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A0F7CD   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A0F21D   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A09077   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA098736D   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA098847D   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F3A04   ; 18D: int available0(int sock)
0638: 0xA0D49713   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA09718F7   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0973061   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA096E269   ; 196: void RefreshGUI(void)
065C: 0xA09730C1   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA09731D9   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0973033   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA09729D3   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A0F211   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D11CC   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D1170   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325E9   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA013271F   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013355B   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA09501F9   ; 1A7: char *Get_CC_NC()
06A0: 0xA0136849   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013789B   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136F13   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA01379B5   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA01362A1   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA01379B5   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394C1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0137999   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0139457   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379ED   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C75   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A01297   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA09FF2F3   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0A48425   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA09910ED   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F3C543   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3C227   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3C423   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E850E9   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E85177   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E85343   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E818DB   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA096F885   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA096F7ED   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A24F50   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A0F7B5   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A0F7C1   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A09C41   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A08CC7   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A08CBB   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A08CAF   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A08C99   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A08C81   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A08D69   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA04E6DC7   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA04E6C7F   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A0F955   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A0F961   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A0F7FD   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A0F809   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DED14   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA01379B5   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139523   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A0F85D   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A0F875   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0558B99   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F069FC   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F6743   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F6765   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A0F91D   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A0F9CB   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA0974D2B   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0913459   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F7315   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F73CD   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA096C49B   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A0FA7D   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA0971DB1   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0AEFB28   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA09FAAA0   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA096C14F   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8E4BF7E   ; 1EB: char *RAM_IMSI()
07B0: 0xA096C153   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA096C2B3   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA096C1B5   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DE8A0   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8E4C343   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FFA1C1   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA096C2FF   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA054C5B9   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D859AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9F678   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA096589F   ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA09FF2D7   ; 1FD: SetProp2Square_v2
07F8: 0xA8D87F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA0337CFB   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA09FFAA1   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A05A63   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A01147   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA09FE15F   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA09FF2B1   ; 205: SetProp2Square_v1
0818: 0xA0FF9C7D   ; 206: void srand(unsigned int seed)
081C: 0xA0A05357   ; 207: DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA0913477   ; 208: Get_WS_width(*ws, font)
0824: 0xA09657DD   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A0F8B1   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A0F8C9   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A0F8E1   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A0F8F9   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A08FF7   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A08EDD   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA096DF79   ; 210: int GetCurGuiID(void)
0844: 0xA00061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01F6E61   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA01F6EF1   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA095E7A3   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA062BEE5   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA0975FCB   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA09763F3   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA0A0F9E9   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0A0F9F5   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0A0FA31   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA0949ABD   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA096E1B3   ; 21E: void FocusGUI(int id)
087C: 0xA096E1C3   ; 21F: void UnfocusGUI(void)
;880:              ; 220:
0884: 0xA01D097C   ; 221: SetCpuClockLow(2)
0888: 0xA01D0964   ; 222: SetCpuClockTempHi(2)
0894: 0xA027B304   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA027BDB4   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA027BE54   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA027BE84   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FFAB9C   ; 229: void longjmp(jmp_buf, int)
#pragma disable old_equal_ff
+0
;********************************************************************************
;Эльфлоадер 2.3
;SWILIB_FUNC171,SWILIB_FUNC172
0x000745C4: 808607A06C8607A0
;SWILIB_FUNC19C
0x00074670: A58607A0
;SWILIB_FUNC1B8_1BB
0x000746E0: C49ADFA8C89ADFA8809ADFA8D49ADFA8
;SWILIB_FUNC1E9
0x000747A4: E88B07A0
;CODE,INITTAB,DATA_C,CONFIG_DATA_ID
0x00078000: 11FF2FE1850200EB0100A0E3F081BDE8
0x00078010: 10402DE90040A0E1940400EB000050E3
0x00078020: 1080BD180400A0E114C09FE500C09CE5
0x00078030: 3CFF2FE1040050E108C09FE500C09CE5
0x00078040: 1CFF2FE1489507A04C9507A00F402DE9
0x00078050: 930200EB0070A0E10040A0E30F80BDE8
0x00078060: 005080E20F402DE98D0200EB0060A0E1
0x00078070: 0F80BDE80010A0E30F402DE9880200EB
0x00078080: 0050A0E10F80BDE80F402DE9840200EB
0x00078090: 0070A0E10050A0E30F80BDE81EFF2FE1
0x000780A0: 00109DE5200011E3192F8F020400000A
0x000780B0: C70050E3B200DE0014E08D0501E08EE2
0x000780C0: 51208FE250109FE5001091E5000051E3
0x000780D0: 48109F05803CC0E3400D53E30900008A
0x000780E0: 800C10E300402D090040FD0803C191E7
0x000780F0: 04C08D150300001A01007CE320209F05
0x00078100: 04008D0514208DE50100BDE800F069E1
0x00078110: 0F80FDE81CFF2FE160470000809ADFA8
0x00078120: 004007A0588B07A004E02DE500200FE1
0x00078130: 040000EF00100FE1C01081E301F021E1
0x00078140: 0000A0E10000A0E10000A0E17AFF17EE
0x00078150: 0000A0E10000A0E10000A0E1FAFFFF1A
0x00078160: 0000A0E39A0F07EE0000A0E10000A0E1
0x00078170: 0000A0E10000A0E1150F07EE0000A0E1
0x00078180: 0000A0E10000A0E10000A0E102F021E1
0x00078190: 04F09DE4F04F2DE90C619FE50C819FE5
0x000781A0: 0040A0E108019FE504D04DE20050A0E3
0x000781B0: 067040E00D30A0E18020A0E3801CA0E3
0x000781C0: 0400A0E10A0000EF00A0A0E101007AE3
0x000781D0: 1300000A0D30A0E10720A0E10810A0E1
0x000781E0: 0B0000EF0090A0E10D00A0E101002DE9
0x000781F0: 04308DE20220A0E30010A0E30A00A0E1
0x00078200: 0F0000EF00B0A0E104108DE20A00A0E1
0x00078210: 0D0000EF0B0059E104D08DE207005901
0x00078220: 1700000A0720A0E10610A0E10800A0E1
0x00078230: 1E0100EF0D30A0E1602FA0E30210A0E3
0x00078240: C01F81E30400A0E10A0000EF00A0A0E1
0x00078250: 01007AE31100000A0D30A0E10720A0E1
0x00078260: 0810A0E10C0000EF070050E10550E011
0x00078270: 0D10A0E10A00A0E10D0000EF000055E3
0x00078280: 0400004A0010D4E558009FE5301041E2
0x00078290: 001080E5044080E50500A0E1F28FBDE8
0x000782A0: 0550E0E10500A0E1F28FBDE8D49607A0
0x000782B0: 8899DFA8C49707A001C08FE21CFF2FE1
0x000782C0: 10B5084C20001C30FFF764EF002807D5
0x000782D0: 2000FFF760EF002802D5034804210160
0x000782E0: 10BDC0465C9507A0789ADFA800402DE9
0x000782F0: 1D0100EF0080BDE87FB5FFB00025ED43
0x00078300: 0595642166A8FFF7F2EF7F9800246B46
0x00078310: 802211020ADF0190002801D528003EE1
0x00078320: 6B46342209A90BDF342805D001986946
0x00078330: 0DDF0120C04332E109989A49884204D0
0x00078340: 019869460DDF0220F4E709A8808D0B28
0x00078350: 02D30820C04322E1049416AD083511E0
0x00078360: 306801280AD128680599884200D20590
0x00078370: E9684018844201D22868441804982035
0x00078380: 401C0490049809A9898D884227DA08A8
0x00078390: 01B4119805990AAE768D01AB00227143
0x000783A0: 411802980FDF1199059A0AAB5B8D01B0
0x000783B0: 5A438918884204D0019869460DDF0320
0x000783C0: B8E701982E00083E6B46202231000BDF
0x000783D0: 2028C5D0019869460DDF0420BAE70598
0x000783E0: 251A280014DF040004D1019869460DDF
0x000783F0: 0D209FE72900FFF77AEF0020049016A8
0x00078400: 083053E02868012802D0022817D0B0E0
0x00078410: 02988268002A44D0006805996B46401A
0x00078420: 211801980BDF02998968884239D00198
0x00078430: 69460DDF200015DF0A20C043AFE00298
0x00078440: 806814DF0390002806D1019869460DDF
0x00078450: 200015DF06206DE70298039982680198
0x00078460: 6B460BDF02998968884208D001986946
0x00078470: 0DDF039815DF200015DF07206AE70398
0x00078480: 66AA05E0192902DA4368890053500830
0x00078490: 01680029F6D17899002000292ED10398
0x000784A0: 15DF0498401C04900298203002900598
0x000784B0: 41420791049809A9898D884260DA029D
0x000784C0: 684601B4083D696801AB029800220FDF
0x000784D0: 696801B0884295D0019869460DDF2000
0x000784E0: 15DF052026E7039DEB189A18059B5218
0x000784F0: 116862581219D21A6250401C789AC100
0x00078500: 9142CCD20299779B0968039D4A42C100
0x00078510: AD186D18ED186D682D062D0E0695FF2D
0x00078520: EBD0FD2DDFD0079D069E6519002EE4D0
0x00078530: 022E02D0172E09D012E0039EF3189A18
0x00078540: 521811686A5812196A50D6E7039EF318
0x00078550: 9A18059B521811686A581219D21AF3E7
0x00078560: 019869460DDF200015DF039815DF0C20
0x00078570: 63E7019869460DDF200015DF0B20D9E6
0x00078580: 019869460DDF00F00FFB079D0F9E829B
0x00078590: 819A80997F98A4196419A04700207FB0
0x000785A0: 04B070BD7F454C4610B5A0B069461400
0x000785B0: 7E22A3DF0023002221006846FFF79CFE
0x000785C0: 002801D0002000E0012020B010BD0000
0x000785D0: 00402DE914D04DE20D00A0E1530100EF
0x000785E0: 000050E31200000A04309DE508009DE5
0x000785F0: 010053E30600001A0C209DE5000052E3
0x00078600: 0B00000A10109DE532FF2FE114D08DE2
0x00078610: 0080BDE801002DE904209DE5AE10A0E3
0x00078620: DE1C81E30900A0E3420C80E3000100EF
0x00078630: 04D08DE214D08DE20080BDE800402DE9
0x00078640: 1C209FE51C109FE50000A0E301002DE9
0x00078650: 8030A0E30A00A0E3440C80E3050100EF
0x00078660: 0180BDE8D08507A09C9607A000402DE9
0x00078670: 460100EF410100EF470100EF0080BDE8
0x00078680: 00402DE904002DE90030A0E10A00A0E3
0x00078690: 440C80E30120A0E10110A0E3000100EF
0x000786A0: 0180BDE810B514008847200015DF10BD
0x000786B0: 10402DE90040A0E10A00A0E3440C80E3
0x000786C0: 540100EF0C009FE5001090E50400A0E1
0x000786D0: 1040BDE849FEFFEA3C9507A030402DE9
0x000786E0: A8409FE548D04DE240DE4DE20410A0E1
0x000786F0: 49008DE2C00F80E21A0000EF8C129FE5
0x00078700: D20F8DE2001091E5301081E24813CDE5
0x00078710: 1B0000EF0050A0E1101084E2D20F8DE2
0x00078720: 170000EF0D20A0E1D21F8DE204008DE2
0x00078730: 6B0000EF000050E30E00000AD20F8DE2
0x00078740: 0010A0E30010C5E7B9108DE2170000EF
0x00078750: 0030A0E30020A0E30210A0E1D20F8DE2
0x00078760: E4FEFFFA0D10A0E104008DE26C0000EF
0x00078770: 000050E3F0FFFF1A0D10A0E104008DE2
0x00078780: 6D0000EF48D08DE240DE8DE23080BDE8
0x00078790: 949507A010B58BB06A460024E44301A9
0x000787A0: 84DFA04201D1200000E002980BB010BD
0x000787B0: F0402DE948419FE548519FE578D04DE2
0x000787C0: 007094E50510A0E105008DE21A0000EF
0x000787D0: B8119FE5000057E3001091E5301081E2
0x000787E0: 0410CDE50300000A0000A0E3000084E5
0x000787F0: 0700A0E1150000EF04008DE2E4FFFFFA
0x00078800: 0070E0E3070050E13B00000A400C50E3
0x00078810: 0300000A101085E20100A0E3480100EF
0x00078820: 190000EA0D30A0E18020A0E3801CA0E3
0x00078830: 04008DE20A0000EF0060A0E1070056E1
0x00078840: 2D00000A400CA0E3140000EF0070A0E1
0x00078850: 0D30A0E1402CA0E30710A0E10600A0E1
0x00078860: 0B0000EF400C50E30D10A0E10600A0E1
0x00078870: 0700000A0D0000EF281085E20100A0E3
0x00078880: 480100EF0700A0E1150000EF78D08DE2
0x00078890: F080BDE80D0000EF6C109FE50060A0E3
0x000788A0: 0700A0E10620E0E1003090E5020053E1
0x000788B0: 0900000A00C091E502005CE10C005311
0x000788C0: 0700000A0620A0E13C1085E244008DE2
0x000788D0: 160000EF44108DE2E7FFFFEA003091E5
0x000788E0: 003080E5016086E2041081E2040080E2
0x000788F0: 400D56E3EBFFFFBA007084E578D08DE2
0x00078900: F080BDE8809ADFA8AC9507A0004007A0
0x00078910: 70402DE964509FE564609FE50040A0E1
0x00078920: 45FFFFEB63FEFFEBA0FFFFEBF30200EB
0x00078930: 0610A0E1010085E21A0000EF1C1086E2
0x00078940: 210085E21A0000EF40009FE5000090E5
0x00078950: 300080E22000C5E50000C5E5340086E2
0x00078960: 8C0000EF1C009FE5710100EF18009FE5
0x00078970: 001090E50400A0E1A0FDFFEB7080BDE8
0x00078980: 849ADFA8009607A0DC8607A0409507A0
0x00078990: 789ADFA8A82801D112487047AA2801D1
0x000789A0: 11487047AF2801D110487047B82801D1
0x000789B0: 0F487047BA2801D10E487047BF2801D1
0x000789C0: 0D487047B22801D10C487047B32801D1
0x000789D0: 0B487047C02804DBFF2802DCD4218900
0x000789E0: 40187047010400000404000007040000
0x000789F0: 51040000540400005704000006040000
0x00078A00: 5604000030B504000D0004E0FFF7C2FF
0x00078A10: 010028001CDF2078641C0028F6D130BD
0x00078A20: 30402DE90040A0E10250A0E1250EA0E1
0x00078A30: 0A0050E30600001A0010A0E30400A0E1
0x00078A40: 260100EF0410A0E10500A0E1ECFFFFFA
0x00078A50: 3080BDE808109FE50400A0E1240100EF
0x00078A60: 3080BDE8709607A030402DE90040A0E1
0x00078A70: 0F00A0E3250100EF0050A0E1071F8FE2
0x00078A80: 240100EF0020A0E30510A0E10400A0E1
0x00078A90: 940000EF0500A0E1290100EF3080BDE8
0x00078AA0: 7478740010402DE984409FE5000094E5
0x00078AB0: 000050E30400001A0400A0E3140000EF
0x00078AC0: 0010A0E3001080E5000084E5040080E2
0x00078AD0: 1080BDE8F0412DE954409FE5460100EF
0x00078AE0: 005094E52800A0E3006095E5900607E0
0x00078AF0: 2C0087E2140000EF0080A0E1042087E2
0x00078B00: 0510A0E11E0100EF010086E2000088E5
0x00078B10: 0500A0E1150000EF008084E5470100EF
0x00078B20: 0A00A0E3900601E0010188E0040080E2
0x00078B30: F081BDE8C49ADFA8054A00B5914203D0
0x00078B40: 044A1268904700BD3000FFF78EEF00BD
0x00078B50: D11D0000449507A010402DE940409FE5
0x00078B60: 20D04DE20030A0E10020A0E10410A0E1
0x00078B70: 0D00A0E1160000EF0D00A0E1E45505EB
0x00078B80: 020000EF0230A0E30220A0E30C1084E2
0x00078B90: FF00A0E3FF0C80E32B5605EB20D08DE2
0x00078BA0: 1080BDE8789607A0004B1847288107A0
0x00078BB0: 00B5080014DF00BD00B5080015DF00BD
0x00078BC0: 30402DE904D04DE20140A0E10250A0E1
0x00078BD0: 5E0100EF0D30A0E10520A0E10410A0E1
0x00078BE0: 0B0000EF3180BDE8F04F2DE928D04DE2
0x00078BF0: 0150A0E10060A0E300608DE504608DE5
0x00078C00: 14308DE28020A0E3801CA0E30A0000EF
0x00078C10: 0040A0E1010070E33801000A0080A0E3
0x00078C20: 0670A0E10690A0E114308DE20820A0E3
0x00078C30: 20108DE20B0000EF080050E32601001A
0x00078C40: 0810A0E320008DE2B20100EF000050E3
0x00078C50: 2101000AD0049FE501002DE9CC049FE5
0x00078C60: 01002DE90000A0E301002DE90030A0E1
0x00078C70: 0020A0E10010A0E1B4049FE5A80100EF
0x00078C80: 0C008DE5000050E30CD08DE21201000A
0x00078C90: 560100EF04008DE5000050E30400001A
0x00078CA0: 0020A0E30210A0E10D00A0E1570100EF
0x00078CB0: 090100EA00009DE5620100EF000050E3
0x00078CC0: 0020A01304108D12F6FFFF1A64249FE5
0x00078CD0: 00009DE50410A0E1A90100EF00009DE5
0x00078CE0: 0810A0E3580100EF04109DE500009DE5
0x00078CF0: 590100EF0000A0E301002DE901002DE9
0x00078D00: 01002DE91C008DE201002DE928008DE2
0x00078D10: 01002DE918109DE520308DE214009DE5
0x00078D20: 1C208DE25A0100EF000055E314D08DE2
0x00078D30: 0500001A10009DE5000050E3F8039F15
0x00078D40: FF50A003000090150150801218009DE5
0x00078D50: 080050E3010000AA00009DE5D60100EF
0x00078D60: 00009DE504109DE51020A0E3AC0100EF
0x00078D70: 000050E30100000A00009DE5AD0100EF
0x00078D80: 18009DE5100050E30100001A00009DE5
0x00078D90: AF0100EF18009DE5080050E3010000AA
0x00078DA0: 00009DE5B00100EF10009DE5030050E3
0x00078DB0: 0100001A00009DE5AB0100EF10009DE5
0x00078DC0: 040050E3000050130100001A00009DE5
0x00078DD0: B10100EF00009DE50120A0E3FF10A0E3
0x00078DE0: AE0100EF04109DE500009DE5AA0100EF
0x00078DF0: 00009DE504109DE55F0100EF140000EF
0x00078E00: 0080A0E10800A0E3140000EF1C008DE5
0x00078E10: 0090A0E108009DE5FF0055E32A00001A
0x00078E20: 070080E2A051A0E10C009DE595000BE0
0x00078E30: 0B00A0E1140000EF0070A0E10B10A0E1
0x00078E40: 1D0100EF07A0A0E100B0A0E3120000EA
0x00078E50: 001188E00020D1E5000052E30120D105
0x00078E60: 000052030210D105000051030400001A
0x00078E70: A0118AE00020D1E507C000E2332C82E1
0x00078E80: 0020C1E5010080E208109DE5010050E1
0x00078E90: EEFFFF3A0AA085E001B08BE20C009DE5
0x00078EA0: 00005BE10600002A00009DE50020A0E3
0x00078EB0: 0810A0E1600100EF0600A0E18030A0E3
0x00078EC0: F0FFFFEA0100A0E3740000EA0C109DE5
0x00078ED0: 68A29FE5910000E0015055E20400000A
0x00078EE0: 015055E22700000A015055E24D00000A
0x00078EF0: 6B0000EA140000EF0070A0E10750A0E1
0x00078F00: 00B0A0E3000000EA01B08BE20C009DE5
0x00078F10: 00005BE11900002A00009DE50020A0E3
0x00078F20: 0810A0E1600100EF0600A0E11CC0A0E3
0x00078F30: 080000EA0020D1E50130D1E50210D1E5
0x00078F40: E02002E2A3310CE0022083E1211382E1
0x00078F50: 0110C5E4010080E208109DE5010050E1
0x00078F60: E8FFFF2A00309AE5001188E00320D1E5
0x00078F70: 030052E1EEFFFF2AC010A0E3F3FFFFEA
0x00078F80: 0500A0E3450000EA8000A0E1140000EF
0x00078F90: 0070A0E10750A0E100B0A0E3000000EA
0x00078FA0: 01B08BE20C009DE500005BE11B00002A
0x00078FB0: 00009DE50020A0E30810A0E1600100EF
0x00078FC0: 0600A0E17ECEA0E30A0000EA0020D1E5
0x00078FD0: F83CA0E3022403E00130D1E50210D1E5
0x00078FE0: 83310CE0022083E1A111A0E1021081E1
0x00078FF0: B210C5E0010080E208109DE5010050E1
0x00079000: E6FFFF2A00309AE5001188E00320D1E5
0x00079010: 030052E1ECFFFF2AE01CA0E3F3FFFFEA
0x00079020: 0800A0E31D0000EA0001A0E1140000EF
0x00079030: 0070A0E10750A0E100A0A0E30D0000EA
0x00079040: 001188E00220D1E5010080E20120C5E4
0x00079050: 0120D1E50120C5E40020D1E50120C5E4
0x00079060: 0310D1E50110C5E408109DE5010050E1
0x00079070: F2FFFF3A01A08AE20C009DE500005AE1
0x00079080: 0500002A00009DE50020A0E30810A0E1
0x00079090: 600100EF0600A0E1F2FFFFEA0A00A0E3
0x000790A0: B200C9E108009DE50000C9E50C009DE5
0x000790B0: 0100C9E5047089E504109DE500009DE5
0x000790C0: 5D0100EF0020A0E304108DE20D00A0E1
0x000790D0: 570100EF000057E30B00001A0800A0E1
0x000790E0: 150000EF0700A0E1150000EF0900A0E1
0x000790F0: 150000EF14108DE20400A0E10D0000EF
0x00079100: 0000A0E328D08DE2F08FBDE80800A0E1
0x00079110: 150000EF14108DE20400A0E10D0000EF
0x00079120: 1C009DE528D08DE2F08FBDE8B98B07A0
0x00079130: B18B07A0B49607A0C08B07A0149ADFA8
0x00079140: B499DFA807E0412A02DB5B2A00DA2032
0x00079150: 491C0270401C0A78002AF4D100210170
0x00079160: 704700008C309FE510002DE90F20A0E3
0x00079170: 0A0051E30A00003A93C184E00AC0A0E3
0x00079180: A441A0E19C0404E0044041E0022284E1
0x00079190: 93418CE0ACC1A0E10C10A0E10A0051E3
0x000791A0: F4FFFF2A301081E20110C0E4020000EA
0x000791B0: 301081E20110C0E42222A0E10F1002E2
0x000791C0: 0A0051E3F9FFFF3A2E10A0E30110C0E4
0x000791D0: 7010A0E30110C0E46E10A0E30110C0E4
0x000791E0: 6710A0E30110C0E40010A0E30010C0E5
0x000791F0: 1000BDE81EFF2FE1CDCCCCCCF0402DE9
0x00079200: F4529FE50040A0E10560A0E1460100EF
0x00079210: 0070A0E3000000EA0670A0E1006096E5
0x00079220: 000056E30E00000A040096E50410A0E1
0x00079230: 190000EF000050E3F6FFFF1A000057E3
0x00079240: 0400000A000096E5000087E5000095E5
0x00079250: 000086E5006085E5470100EF080096E5
0x00079260: F080BDE8470100EF0000A0E3F080BDE8
0x00079270: F04F2DE980429FE570A29FE540DF4DE2
0x00079280: 0050A0E1250EA0E10A0050E30E00001A
0x00079290: 0510A0E10D00A0E1A9FFFFFA0D00A0E1
0x000792A0: D5FFFFEB0050B0E10000000A530000EA
0x000792B0: 0010A0E30D00A0E14AFEFFEB0050B0E1
0x000792C0: 5B00001A0C008AE24D0000EA460100EF
0x000792D0: 080094E5000000EA000090E5000050E3
0x000792E0: 0800000A041090E5050051E1F9FFFF1A
0x000792F0: 086090E5000056E3F6FFFF0A470100EF
0x00079300: 0600A0E13E0000EA470100EF040094E5
0x00079310: 000050E37300000A2000A0E34E0C80E3
0x00079320: 000055E11D00002A8000A0E3C0619FE5
0x00079330: 031005E28110A0E130B1A0E1040094E5
0x00079340: AB90A0E1258180E00070D8E507001BE1
0x00079350: 1400000A070019E11000000A0A10A0E1
0x00079360: 01008DE276FFFFFA002096E50510A0E1
0x00079370: 302082E20020CDE579FFFFEB0D00A0E1
0x00079380: 9DFFFFEB0050B0E11C00001A0010A0E3
0x00079390: 0D00A0E113FEFFEB0050A0E1240000EA
0x000793A0: 0000A0E3160000EA460100EF0000D8E5
0x000793B0: 00008BE10000C8E5470100EF0A10A0E1
0x000793C0: 01008DE25EFFFFFA002096E50510A0E1
0x000793D0: 302082E20020CDE561FFFFEB0D00A0E1
0x000793E0: 85FFFFEB0050B0E10700000A460100EF
0x000793F0: 0000D8E5000089E10000C8E5470100EF
0x00079400: 0500A0E140DF8DE2F08FBDE80010A0E3
0x00079410: 0D00A0E1F3FDFFEB0050B0E1DFFFFF0A
0x00079420: 460100EF0000D8E5000089E10000C8E5
0x00079430: 470100EF0C00A0E3140000EF0060A0E1
0x00079440: 0D00A0E11B0000EF010080E2140000EF
0x00079450: 040086E50D10A0E11A0000EF085086E5
0x00079460: 460100EF000094E50050A0E30070A0E3
0x00079470: 000086E5006084E50400A0E1004094E5
0x00079480: 000054E30100001A470100EF140000EA
0x00079490: 60109FE5017087E2001091E5070051E1
0x000794A0: F4FFFF2A005080E5470100EF080094E5
0x000794B0: 000050E30300000A040090E5150000EF
0x000794C0: 080094E5150000EF040094E5150000EF
0x000794D0: 0400A0E1004094E5150000EF000054E3
0x000794E0: F1FFFF1A080096E540DF8DE2F08FBDE8
0x000794F0: BC9607A0789ADFA8E499DFA8C89ADFA8
0x00079500: 30402DE92C509FE58840A0E3040095E5
0x00079510: 4C4D84E3000050E30200001A0400A0E1
0x00079520: 140000EF040085E5040095E50410A0E1
0x00079530: 1D0100EF3080BDE8C89ADFA813FD2FA0
0x00079540: F9FA2FA0EBD596A0CC50A2A08BBA96A0
0x00079550: F00000008899DFA8D49607A0303A5C5A
0x00079560: 42696E5C6574635C456C665061636B2E
0x00079570: 6263666700000000343A5C5A42696E5C
0x00079580: 6574635C456C665061636B2E62636667
0x00079590: 000000003A5C5A42696E5C4461656D6F
0x000795A0: 6E735C002A2E656C660000003A5C5A62
0x000795B0: 696E5C7377692E626C696200496C6C65
0x000795C0: 67616C206C6962726172792073697A65
0x000795D0: 2100000043616E27742072656164206C
0x000795E0: 696272617279210046756E6374696F6E
0x000795F0: 20256420636F6E666C69637421000000
0x00079600: 3A5C5A42696E5C696D675C656C665F73
0x00079610: 6D616C6C2E706E67000000003A5C5A42
0x00079620: 696E5C696D675C656C665F6269672E70
0x00079630: 6E6700005C9607A055000000FF089D05
0x00079640: A49607A0AC9607A0609607A0689607A0
0x00079650: FBC0FF7FA98507A000000000656C6600
0x00079660: 4F70656E00000000416C744F70656E00
0x00079670: 7C25647C000000002564282530335829
0x00079680: 0000000001014E6F2066756E6374696F
0x00079690: 6E20696E206C6962A100000048454C50
0x000796A0: 45520000849ADFA800000000A49ADFA8
0x000796B0: 00000000312E322E350000003A5C5A42
0x000796C0: 696E5C696D675C0000000100D09607A0
0x000796D0: FF00000001000000416C7068612D6368
0x000796E0: 616E207468726573686F6C6400000000
0x000796F0: 000000000000000000000000FF000000
0x00079700: 8000000001000000504E472063616368
0x00079710: 652073697A6500000000000000000000
0x00079720: 000000000000000014000000C8000000
0x00079730: 320000000500000044656661756C7420
0x00079740: 6269742D646570746800000000000000
0x00079750: 00000000000000000000000003000000
0x00079760: 02000000382062697473000000000000
0x00079770: 00000000000000000000000000000000
0x00079780: 00000000313620626974730000000000
0x00079790: 00000000000000000000000000000000
0x000797A0: 00000000323420626974732B616C7068
0x000797B0: 61000000000000000000000000000000
0x000797C0: 00000000
;PATCH_ONCREATE
0x00439D70: 108907A0
;PATCH_ONCLOSE
0x00439D84: B08607A0
;PATCH_EXT2_JUMPERS
0x004DCB3C: 0CF09FE5
0x004DCB40: 0CF09FE50CF09FE50CF09FE50CF09FE5
0x004DCB50: 4C8007A0608007A0748007A0888007A0
0x004DCB60: D48A07A0
;PATCH_EXT2_R5R7
0x004E6CD0: F5F73AEF
;PATCH_EXT2_CLUST2
0x004E6CF0: 3800
;PATCH_EXT2_R5R1
0x004E6DCE: F5F7
0x004E6DD0: BAEE
;PATCH_EXT2_R4R7
0x004E6F66: F5F7EAED
;PATCH_EXT2_CLUST1
0x004E6F92: 3800
;PATCH_EXT2_IMPL
0x004E6FB0: F5F7CCEDC046C046C046C046C046C046
0x004E6FC0: C046C046C046
;PATCH_EXT2_R6R5
0x004E7080: F5F75EED
;PATCH_NO_BROWSE_TXT
0x0056AC0E: 3030
;PATCH_ENABLE_ALTOPEN
0x005B6A4E: 0028
;PATCH_SHOWMSG_BLF
0x006728C8: 398B07A0
;PATCH_ESI1
0x00916558: 08F09FE5
;PATCH_ESI2
0x00916568: 048007A0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x0096BA80: 00490847108007A0
;FSWI_PATCH2
0x0139094C: A08007A0
;FSWI_PATCH1
0x01390A38: F4F01FE5
;------------------------- end -------------------------

