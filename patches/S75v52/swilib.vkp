;S75v52
;Библиотека функций
;Functions Library
;(c) avkiev
;Version: 150424
;PatchID: 8285
;Details: https://patches.kibab.com/patches/details.php5?id=8285
;!к патчу прикреплён файл, https://patches.kibab.com/cnt.php5?d=s75v52&f=S75sw52_Functions_library_231017.zip

/*
!ДЛЯ РАБОТЫ ЭТОГО ПАТЧА НЕОБХОДИМО УСТАНОВИТЬ ПОДРЕЗКУ КУЧИ!
8296

*/
+0074000
#pragma enable  old_equal_ff
0000: 0xA0090590   ;   0: void loopback0()
0004: 0xA0090590   ;   1: void loopback1()
0008: 0xA0090590   ;   2: void loopback2()
000C: 0xA0090590   ;   3: void loopback3()
0010: 0xA0090590   ;   4: void loopback4()
0014: 0xA026FBA1   ;   5: DecToHex
0018: 0xA01ABF5C   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B64C0   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA023490C   ;   9: void SwitchPhoneOff()
0028: 0xA0253228   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA02532E8   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0253418   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA025317C   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038:              ;   E: 
003C: 0xA02531DC   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0252E20   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0252C80   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0252F74   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FC3785   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FC51F1   ;  17: char *strcat (char *,const char *)
0060: 0xA0FC5211   ;  18: char *strchr (const char *,int)
0064: 0xA0FC5234   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FC52D1   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FC5351   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F78D1   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F7885   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA0976189   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA0302b7b   ;  1F: DrawMainScreen

0080: 0xA0303BF3   ;  20: DrawScreenSaver
0084: 0xA09762B3   ;  21: int GetImgHeight(int picture)
0088: 0xA09762C3   ;  22: int GetImgWidth(int picture)
008C: 0xA029D9BD   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA0a02a5f   ;  24: DrawImage2
0094: 0xA029CEB7   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A02989   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029D0DD   ;  27: AddIconToIconbar
00A0: 0xA01E6838   ;  28: getEELiteMaxID
00A4: 0xA01E59C4   ;  29: getEEFullMaxID
00A8: 0xA01E5DBC   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA01E6748   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA01E5458   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
00B4: 0xA01E69BC   ;  2D: StartWriteEELiteBlock
00B8: 0xA01E6CB4   ;  2E: FinishWriteEELiteBlock
00BC: 0xA01E68A0   ;  2F: DeleteEELiteBlock

00C0: 0xA01E6B9C   ;  30: WriteEELiteBlock
00C4: 0xA0FC5499   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0282E78   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02797D0   ;  33: PlaySound2
00D0: 0xA0B37A80   ;  34: void PlaySoundLoop(int _0x2F, int param2, int duration)
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA027CC50   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA0538033   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA0537C45   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA0535BD7   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FC44ED   ;  3B: MemChr
00F0: 0xA0253328   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA05376D1   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA09714ED   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028B8FD   ;  40: GetVibraStatus
0104: 0xA08FCB4B   ;  41: GetProvider
0108: 0xA0303BDF   ;  42: int IsScreenSaver()
010C: 0xA0904AB3   ;  43: int IsUnlocked(void)
0110: 0xA08FEBC9   ;  44: TempLightOn
0114: 0xA006F241   ;  45: int GetWavLen(char *filename)
;118:              ;  46: int HasNewSMS()
011C: 0xA029b211   ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA027B648   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0AA83F0   ;  4B: StartMidlet
0130: 0xA09B4E2D   ;  4C: int GetMissedCallsCount()
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA0977D2D   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA0977D8D   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0977D97   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D53207   ;  51: GetNetAccessMode
0148: 0xA8D07CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA0FC4511   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C1AC9   ;  54: int StrToInt(char *s, char **endp)
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FC496C   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FC4A10   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0904371   ;  5A: KeypressOn(int key)
016C: 0xA0904483   ;  5B: KeypressOff(int key)
0170: 0xA03327D1   ;  5C: unsigned char GetCPUClock()
0174: 0xA033280B   ;  5D: unsigned char GetCPULoad()
0178: 0xA03327D9   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA032E3CD   ;  60: ShowMainMenu
0184: 0xA02CE19B   ;  61: ShowNativeMenu
0188: 0xA028B8C5   ;  62: SetVibraStatus
018C: 0xA029E741   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
0190: 0xA0978820   ;  64: TriggerUpdate
0194: 0xA09b7495   ;  65: EndCall
0198: 0xA09b6423   ;  66: EndCallBusy
019C: 0xA03457b9   ;  67: IsDirectCallActive
01A0: 0xA0303BB9   ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0252CF8   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0252D78   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0252C40   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D0CD11   ;  6E: int IsCalling()
01BC: 0xA09520D8   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0952108   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA0a0240b   ;  71: DrawRoundRect
01C8: 0xA08fc8f5   ;  72: SetCurrentSecondOfCall
01CC: 0xA0D0D513   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02C935D   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029EC59   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA029EC09   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA09024ED   ;  78: GetTimeFormat
01E4: 0xA0903C1D   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B0D5B   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D0C6D3   ;  7D: IsIncognitoCall
01F8: 0xA0D0BD8D   ;  7E: int rand(void)
01FC: 0xA052D879   ;  7F: IsPlayerOn

0200: 0xA05E93D9   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FC4D64   ;  81: HexToDec
0208: 0xA052D95B   ;  82: __thumb WSHDR *GetLastAudioTrackFilename()
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0252FEC   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA026FEC9   ;  85: int strcmpi(const char *s1, const char *s2)
0218: 0xA01E5278   ;  86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA01E5508   ;  87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA022F810   ;  88: char GetAccessoryType(void)
0224: 0xA0906D88   ;  89: GetLangMesIntoWS
0228: 0xA0252BD0   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0253484   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04D46FD   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA03021BF   ;  8D: GetProfileName
0238: 0xA0252E88   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252F0C   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02533A0   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0252DB8   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09EADF8   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0234918   ;  93: void RebootPhone()
0250: 0xA04D4899   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04D47DB   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02A6F23   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA027B8B8   ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA03040C5   ;  9C: CloseScreensaver
0274: 0xA02FE82B   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA0968D75   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F77C3   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA0253968   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0969839   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6F7D   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA09520B0   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D47085   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D0DED1   ;  A8: char IsGPRSConnected()
02A4: 0xA090529B   ;  A9: void KbdLock()
02A8: 0xA0A12D95   ;  AA: char *GetCurrentLocale()
02AC: 0xA0090590   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA03325D5   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA0901063   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026EB63   ;  B5: char GetWeek(TDate *)
02D8: 0xA028B0CB   ;  B6: char GetProfile()
02DC: 0xA028B12B   ;  B7: char SetProfile(char)
02E0: 0xA0FC4B84   ;  B8: int sdiv(int denom,int number)
02E4: 0xA0904D7F   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC4B6C   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC4C5C   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FC4D20   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: void SpellTime()

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: void *GetBuffer(int patch_id)
0314: 0xA02FE7D3   ;  C5: char IsIdleUiOnTop()
0318: 0xA01A86A8   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D036D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D036FA   ;  C9: unsigned short *RamLS()
0328: 0xA8E2ED42   ;  CA: RAMNET *RamNet()
032C: 0xA8D78BEC   ;  CB: RamRingtoneStatus
0330: 0xA8DE9748   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8D29784   ;  CE: RamDateTime
033C: 0xA8E938A0   ;  CF: char *RamAlarm()

0340: 0xA8D6A35C   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
0348: 0xA8D297D8   ;  D2: char *RamAutoTime()
034C: 0xA8000000   ;  D3: RamStby
0350: 0xA8DD33A8   ;  D4: char *RamMissedMes()
0354: 0xA8D34F24   ;  D5: RamIsLocked
0358: 0xA8DACBCC   ;  D6: RamNetOnline
035C: 0xA8DADCA8   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: 
0368: 0xA8D6CD14   ;  DA: RamIsShutdown
036C: 0xA8E920EC   ;  DB: RamMainscreenAccuIcon
0370: 0xA8DCCD34   ;  DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8D77F78   ;  DE: RamIsSimPresent
037C: 0xA8D34EFC   ;  DF: char *RamPressedKey()

0380: 0xA8D29910   ;  E0: char *RamScreenBuffer()
0384: 0xA8E3EADC   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: void *FreeRAM()
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0300F41   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8D29864   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8DAE2EC   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB9948   ; 106: CSMROOT *CSM_root()
041C: 0xA096FE9F   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA096FEB1   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA096FF6D   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029BFF1   ; 10F: void freeUSSD()

0440: 0xA026FF79   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029C02D   ; 111: char GetTypeUSSD()
0448: 0xA029C03D   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FC5321   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FC539D   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC53CD   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC541D   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC5499   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FC54B1   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FC54D9   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC5555   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC3731   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FC4511   ; 11C: int memcmp(const void *m1, const void *m2, int n)
0474: 0xA0FC496C   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FC4A10   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F77C3   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F77E5   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F7809   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F783D   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F704B   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA0968D75   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA0969839   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F7A35   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F7653   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F76CD   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6F7D   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0903C49   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA0970049   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA0970051   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA0970059   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA09714ED   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0971511   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0971521   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA097153F   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC4AC8   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0975D85   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA0975D9B   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0978687   ; 135: int IsGuiOnTop(int id)
04D8: 0xA09787AB   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA09787BB   ; 137: int CreateGUI(void *gui)
04E0: 0xA09787C9   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA0978803   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0978813   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0978823   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA0978831   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA097883F   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA097884F   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA09788E3   ; 13F: void DirectRedrawGUI(void)

0500: 0xA09788FB   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA09788EF   ; 141: void PendedRedrawGUI(void)
0508: 0xA0A00533   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA0977D0F   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA0973805   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0971A39   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA09719A3   ; 14B: void SetColor(DRWOBJ *drwobj, const char *color1, const char *color2)
0530: 0xA097384F   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA0978695   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A186F9   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A18745   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A0240B   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA0A0295F   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)
0548: 0xA097789F   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136985   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D41   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377F9   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135C15   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AC3   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA013639D   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136743   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA01373B3   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373F5   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0136039   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA01362B3   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F4B   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2324   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC5788   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A0C8D3   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A0BD11   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0C021   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A0CA6F   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A09699   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A12977   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)
05A4: 0xA0A1290D   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A12919   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0253064   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0253874   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA056491C   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0505194   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0506008   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0955C11   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A49C09   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A4A101   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A49F05   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A4A435   ; 176: int closesocket(int socket)
05DC: 0xA0A4A33D   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A4A527   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A4A995   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A51605   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A51611   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E25BCC   ; 17C: int *socklasterr(void)
05F4: 0xA097885F   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA097886F   ; 17E: void RestartIDLETMR(void)
05FC: 0xA097887B   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A12811   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A12769   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A127B1   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A12201   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A0C05B   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0991A75   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0992B85   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F69E8   ; 18D: int available0(int sock)
0638: 0xA0D4701F   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA097BFFF   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097D769   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0978971   ; 196: void RefreshGUI(void)
065C: 0xA097D7C9   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA097D8E1   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097D73B   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA097D0DB   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A121F5   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D1BD0   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D1B74   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325E9   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA013271F   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013355B   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int csd_or_gprs)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA095A865   ; 1A7: char *Get_CC_NC()
06A0: 0xA0136849   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013789B   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136F13   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA01379B5   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA01362A1   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA01379B5   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394C1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0137999   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0139457   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379ED   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C75   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A0427B   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA0A022D7   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0A4B409   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA099B7F5   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F450D3   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F44DB7   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F44FB3   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E91449   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E914D7   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E916A3   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E8DC3B   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0979F8D   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0979EF5   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A27F34   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A12799   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A127A5   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A0CC25   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A0BCAB   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A0BC9F   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A0BC93   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A0BC7D   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A0BC65   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A0BD4D   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA04D4523   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA04D43DB   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A12939   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A12945   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A127E1   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A127ED   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DF718   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA01379B5   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139523   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A12841   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A12859   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0539DC5   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8E87F20   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F7147   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F7169   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A12901   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A129AF   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA097F433   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0903D4D   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F7D19   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F7DD1   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
0790: 0xA0976BA3   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A12A61   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA097C4B9   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0AD9550   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA09FDA84   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA0976857   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8DCD1FA   ; 1EB: char *RAM_IMSI()
07B0: 0xA097685B   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA09769BB   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA09768BD   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DF2A4   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8DCD5C0   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FC4DD5   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA0976A07   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA052D7E5   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D059AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D208F0   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA096FFA7   ; 1FC: void CloseCSM(int id)
07F4: 0xA0A022BB   ; 1FD: SetProp2Square_v2
07F8: 0xA8D07F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA032E207   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0A02A85   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A08A47   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A0412B   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0A01143   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0A02295   ; 205: SetProp2Square_v1
0818: 0xA0FC4891   ; 206: void srand(unsigned int seed)
081C: 0xA0A0833B   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA0903D6B   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA096FEE5   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A12895   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A128AD   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A128C5   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A128DD   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A0BFDB   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A0BEC1   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA0978681   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01F7865   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA01F78F5   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0968E0F   ; 216: void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA06174F9   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA09806D3   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA0980AFB   ; 219: void *AllocMLMenuItem(void *data)
0868: 0xA0A129CD   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0A129D9   ; 21B: void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0A12A15   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA0954129   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA09788BB   ; 21E: void FocusGUI(int id)
087C: 0xA09788CB   ; 21F: void UnfocusGUI(void)

;880:              ; 220: IsSliderClosed
0884: 0xA01D1380   ; 221: void SetCpuClockLow
0888: 0xA01D1368   ; 222: void SetCpuClockTempHi
088C: 0xA052D7C3   ; 223: IsMediaPlayerInBackground 
0890: 0xA052E0AB   ; 224: CloseMediaPlayer
0894: 0xA027BF64   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA027CA14   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA027CAB4   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA027CAE4   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FC57B0   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA095BCAD   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA02D28B9   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02D21AB   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02D22A9   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA052A5D3   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8D297D4   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0900FF1   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8D2977C   ; 231: TAppointment *RamAppointment
08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA06075AB   ; 233: void GetAllEmail()
;8D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate)
;8D4:              ; 235: int GetLunarYearID(int year)
;8D8:              ; 236: int GetLunarAnimal(int year)
;8DC:              ; 237: char *RamIconBar()
08E0: 0xA095BC57   ; 238: void SendAutoUSSDack(void)
08E4: 0xA01E5924   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA01E5A90   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC:              ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
08F4: 0xA0F41E4D   ; 23D: void MD5_Init(MD5_CTX *c)
08F8: 0xA0F41ABD   ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0F41D55   ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0F427DD   ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA090120F   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0E7E375   ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0E7E425   ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA05995D7   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA09A28F5   ; 247: NetOff()
0920: 0xA8D06BCE   ; 248: char *RamFormatTrack()
0924: 0xA8D06E36   ; 249: char *RamFreq()
0928: 0xA8D06FEE   ; 24A: char *RamChannel()
092C: 0xA097DCCB   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02EAE51   ; 24C: int GetPeripheryState(int device, int check_state)
0934: 0xA027CB14   ; 24D: int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA02C7508   ; 24E: void *GetPlayObjById(int handle)
093C: 0xA0CF8B6C   ; 24F: int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA0CF8904   ; 250: int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
0944: 0xA8ACDA5C   ; 251: unsigned int *RamSizeOfPart()
0948: 0xA8ACD9E4   ; 252: unsigned int *RamSizeOfRecievedSendFile()
094C: 0xA8DE4E76   ; 253: char *RamLastCallNum();
0950: 0xA052A5F7   ; 254: int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA097F42F   ; 255: void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xA8ACDAD0   ; 256: char *RamNameOfRecievedSendFile()
095C: 0xA8ACD9BE   ; 257: char *RamIsSendReceiveBT()
0960: 0xA097624D   ; 258: int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0D06938   ; 259: HObj Obs_CreateObject(int uid, int unk2, int unk2, int unk3, int unk4, int unk6,int unk7)
0968: 0xA0CFC2E0   ; 25A: int Obs_DestroyObject(HObj hObj)
096C: 0xA0D0491C   ; 25B: int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0D244D4   ; 25C: int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA0D24650   ; 25D: int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA0CFB9F8   ; 25E: int Obs_Start(HObj hObj)
097C: 0xA0D257C8   ; 25F: int Obs_Output_GetPictstruct(HObj hObj, IMGHDR *img)

0980: 0xA0D2538C   ; 260: int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0D24D98   ; 261: int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA0CFB658   ; 262: int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA0D24B44   ; 263: int Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA0D07FB8   ; 264: int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA0CFBD4C   ; 265: int Obs_Pause (HObj hObj)
0998: 0xA0CFC0A8   ; 266: int Obs_Resume (HObj hObj)
099C: 0xA0CFBED4   ; 267: int Obs_Stop (HObj hObj)
09A0: 0xA0CFB86C   ; 268: int Obs_Prepare (HObj hObj)
09A4: 0xA0D81110   ; 269: int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0CF8AA8   ; 26A: int Obs_SetPosition (HObj hObj,int ms)
;09AC: 0xA0        ; 26B: int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA0D2102C   ; 26C: int Obs_SetVolumeEx (HObj hObj, char vol, char delta)
09B4: 0xA0D21D08   ; 26D: int Obs_GetVolume (HObj hObj, char *vol)
09B8: 0xA0D21544   ; 26E: int Obs_SetPurpose (HObj hObj,char purpose)
;09BC:             ; 26F:

;09C0:             ; 270:
;09C4:             ; 271:
;09C8:             ; 272:
;09CC:             ; 273:
;09D0:             ; 274:
;09D4:             ; 275:
;09D8:             ; 276:
;09DC:             ; 277:
;09E0:             ; 278:
;09E4:             ; 279:
;09E8:             ; 27A:
;09EC:             ; 27B:
;09F0:             ; 27C:
;09F4:             ; 27D:
;09F8:             ; 27E:
;09FC:             ; 27F:

;0A00:             ; 280:
0A04: 0xA8DF0360   ; 281: char *RamIsRunJava()
0A08: 0xA8DD3694   ; 282: char *RamIsRunCamera()
0A0C: 0xA051A091   ; 283: int RunMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0D47007   ; 284: int IsGPRS()
0A14: 0xA8E2C778   ; 285: char *RamIsEDGE()
0A18: 0xA0D3E4BF   ; 286: int GetSMSState()
0A1C: 0xA02D3193   ; 287: int BT_GetLocVisibility()
0A20: 0xA02EDF5D   ; 288: int GetCurrAudioPath()
0A24: 0xA0DB40D1   ; 289: int isDecryption()
;0A28:             ; 28A: char *RamIsFileCache()
0A2C: 0xA8E43064   ; 28B: char *RamTotalHeapSize()
0A30: 0xA8E430D4   ; 28C: char *RamTemporaryHeapSize()
0A34: 0xA8D23CF0   ; 28D: char *RamBTNameDevice()
0A38: 0xA8D22EE4   ; 28E: char *RamActiveGPRSProfileName()
0A3C: 0xA8D35E3C   ; 28F: char *RamIsNumberTyping()

0A40: 0xA8E2B548   ; 290: char *RamCallState()
0A44: 0xA029FDB0   ; 291: int RefreshAlarmClock()
0A48: 0xA8E938A4   ; 292: char *RamIsAlarmAutorepeatOn()
0A4C: 0xA8E938AC   ; 293: char *RamAlarmclockHour()
0A50: 0xA8E938AD   ; 294: char *RamAlarmclockMinute()
;0A54:             ; 294: 
0A58: 0xA028B235   ; 296: void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8E8C548   ; 297: char *RamIsSoundRecord()
0A60: 0xA8E8C5A4   ; 298: char *RamIsSoundRecordQuality()
0A64: 0xA8D79640   ; 299: char *RamExtendedCameraState()
0A68: 0xA0294901   ; 29A: int SwitchAudioToBTHeadset(TypeOfBTHeadset, int unk)
0A6C: 0xA029BF4D   ; 29B: int GetTypeOfBTHeadset()
0A70: 0xA8D293F1   ; 29C: char *RamInputLanguage()
0A74: 0xA8D35468   ; 29D: char *RamDisplayLanguage()
0A78: 0xA8D23B40   ; 29E: char *RamIsBTConnected()
0A7C: 0xA8D23AD4   ; 29F: char *RamIsBTHeadsetConnected()

0A80: 0xA029F76C   ; 2A0: int GetAlarmclockState(int state)
;A84:              ; 2A1:
;A88:              ; 2A2:
0A8C: 0xA097C55D   ; 2A3: void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA09793BF   ; 2A4: void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA09802ED   ; 2A5: void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA09789C5   ; 2A6: void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA097D31F   ; 2A7: void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA097A18F   ; 2A8: int GetMenuItemCount(void *gui)
0AA4: 0xA0977B63   ; 2A9: int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0977AD5   ; 2AA: int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA0980193   ; 2AB: void *GetPopupUserPointer(void *gui)
0AB0: 0xA0B1EEFD   ; 2AC: int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA0B1F105   ; 2AD: int SetSmsStatus(int index, int type)
0AB8: 0xA097DFED   ; 2AE: void *GetHeaderPointer(void *gui)
0ABC: 0xA0A1DF05   ; 2AF: void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA097EFED   ; 2B0: void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8DED7D4   ; 2B1: SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0D505D1   ; 2B2: int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA0514260   ; 2B3: NativeAbData *AllocNativeAbData(void)
0AD0: 0xA0514370   ; 2B4: int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA05145F8   ; 2B5: int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA0514CB0   ; 2B6: WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA0514618   ; 2B7: int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA0514F0C   ; 2B8: int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA058F25C   ; 2B9: unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0A1E15F   ; 2BA: void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA0A1AF67   ; 2BB: void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0A18011   ; 2BC: void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA0A1B41B   ; 2BD: int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA0A1B537   ; 2BE: int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA0A1B699   ; 2BF: int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0A1B555   ; 2C0: int GetCursorTab(void *tab_gui)
0B04: 0xA0A1AFD1   ; 2C1: void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA08FC92D   ; 2C2: int GetSubprovider(WSHDR* ws)
0B0C: 0xA08FCB61   ; 2C3: int GetRoamingState()
0B10: 0xA028AB63   ; 2C4: int GetPrfileVolumeSetting(int profile, int type)
0B14: 0xA8DAD284   ; 2C5: char *RAM_EMS_Admin()
0B18: 0xA026F1FB   ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA026F1FB   ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA026F6D6   ; 2C8: int GetSecondsFromTime(TTime *time)
0B24: 0xA026F135   ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA026F24D   ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA026F6E9   ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA026F020   ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA026FA11   ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA026EA04   ; 2CE: int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA026F678   ; 2CF: int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA026EA55   ; 2D0: int GetDaysFromMonth(TDate *date)
0B44: 0xA026EA35   ; 2D1: int IsLeapYear(TDate *date)
;B48:              ; 2D2: StartNativeBrowserCore()
0B4C: 0xA0515094   ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA051463C   ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA095C5C3   ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA0980C23   ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA0981215   ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA098119F   ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA0981243   ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA0981249   ; 2DA: void *TViewGetUserPointer(void *gui)
0B6C: 0xA05F584D   ; 2DB: void SendMedia(WSHDR *file, WSHDR *path)
0B70: 0xA08FED39   ; 2DC: void SaveMaxIllumination(int level)
0B74: 0xA08FED4D   ; 2DD: void SetIlluminationoffTimeout(int time_sec)
0B78: 0xA08FED5D   ; 2DE: void IllumTimeRequest(int TimeMode, int Counter)
0B7C: 0xA08FED79   ; 2DF: void IllumTimeRelease(int TimeMode, int Counter)

0B80: 0xA0A1C803   ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index)
0B84: 0xA04D445D   ; 2E1: int GetExtUidByFileName_ws(WSHDR * fn)
0B88: 0xA01F7077   ; 2E2: int wstrcmp(WSHDR*ws1,WSHDR*ws2)
0B8C: 0xA04D6401   ; 2E3: int fexists(WSHDR* FileName)
0B90: 0xA028A7BB   ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char *entry,char *keyword)
0B94: 0xA028A779   ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char *entry,char *keyword)
0B98: 0xA028A713   ; 2E6: int SettingsAE_SetFlag(int val,int set,char *entry,char *keyword)
0B9C: 0xA028A6DD   ; 2E7: int SettingsAE_GetFlag(int *res,int set,char *entry,char *keyword)
0BA0: 0xA028A759   ; 2E8: int SettingsAE_Update(int val,int set,char *entry,char *keyword)
0BA4: 0xA028A725   ; 2E9: int SettingsAE_Read(int *res,int set,char *entry,char *keyword)
0BA8: 0xA02D2481   ; 2EA: void* SettingsAE_GetEntryList(int set);
0BAC: 0xA02D2587   ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag)
0BB0: 0xA01F1678   ; 2EC: int i2c_transfer(I2C_MSG *msg)
0BB4: 0xA01F16CC   ; 2ED: int i2c_receive(I2C_MSG *msg) 
;BB8:              ; 2EE: included in EL3.0
;BBC:              ; 2EF: included in EL3.0

/** NUCLEUS RTOS API **/

; A00A6528 - Версия нуклеуса

0C00: 0xA00A2420   ; 300: __arm NU_Create_Task
0C04: 0xA00A253C   ; 301: __arm NU_Delete_Task
0C08: 0xA00A2598   ; 302: __arm NU_Reset_Task
0C0C: 0xA00A25B8   ; 303: __arm NU_Terminate_Task
0C10: 0xA00A26B4   ; 304: __arm NU_Resume_Task
0C14: 0xA00A26FC   ; 305: __arm NU_Suspend_Task
0C18: 0xA00A2738   ; 306: __arm NU_Relinquish
0C1C: 0xA00A275C   ; 307: __arm NU_Sleep
0C20: 0xA00A3AA4   ; 308: __arm NU_Change_Priority
0C24: 0xA00A3ABC   ; 309: __arm NU_Change_Preemption
0C28: 0xA00A3AD8   ; 30A: __arm NU_Change_Time_Slice
0C2C: 0xA00A3AF0   ; 30B: __arm NU_Check_Stack           // CHECK IT!
0C30: 0xA00A2030   ; 30C: __arm NU_Current_Task_Pointer
0C34: 0xA00A2CD0   ; 30D: __arm NU_Established_Tasks     // CHECK IT!
0C38: 0xA00A6900   ; 30E: __arm NU_Task_Information 
0C3C: 0xA00A662C   ; 30F: __arm NU_Task_Pointers         // CHECK IT!

;C40:              ; 310: __arm NU_Create_Mailbox
;C44:              ; 311: __arm NU_Delete_Mailbox
;C48:              ; 312: __arm NU_Reset_Mailbox
;C4C:              ; 313: __arm NU_Send_To_Mailbox
;C50:              ; 314: __arm NU_Broadcast_To_Mailbox
;C54:              ; 315: __arm NU_Receive_From_Mailbox
;C58:              ; 316: __arm NU_Established_Mailboxes
;C5C:              ; 317: __arm NU_Mailbox_Information
;C60:              ; 318: __arm NU_Mailbox_Pointers
0C64: 0xA00A60D4   ; 319: __arm NU_Create_Queue
0C68: 0xA00A6174   ; 31A: __arm NU_Delete_Queue
;C6C:              ; 31B: __arm NU_Reset_Queue 
;C70:              ; 31C: __arm NU_Send_To_Front_Of_Queue 
0C74: 0xA00A6194   ; 31D: __arm NU_Send_To_Queue
;C78:              ; 31E: __arm NU_Broadcast_To_Queue 
0C7C: 0xA00A6238   ; 31F: __arm NU_Receive_From_Queue

0C80: 0xA00A62E8   ; 320: __arm NU_Established_Queues
0C84: 0xA00A63A0   ; 321: __arm NU_Queue_Information
0C88: 0xA00A62FC   ; 322: __arm NU_Queue_Pointers
;C8C:              ; 323: __arm NU_Create_Pipe
;C90:              ; 324: __arm NU_Delete_Pipe
;C94:              ; 325: __arm NU_Reset_Pipe
;C98:              ; 326: __arm NU_Send_To_Front_Of_Pipe
;C9C:              ; 327: __arm NU_Send_To_Pipe
;CA0:              ; 328: __arm NU_Broadcast_To_Pipe
;CA4:              ; 329: __arm NU_Receive_From_Pipe
;CA8:              ; 32A: __arm NU_Established_Pipes
;CAC:              ; 32B: __arm NU_Pipe_Information
;CB0:              ; 32C: __arm NU_Pipe_Pointers
0CB4: 0xA00A39C0   ; 32D: __arm NU_Create_Semaphore
0CB8: 0xA00A39F8   ; 32E: __arm NU_Delete_Semaphore
;CBC:              ; 32F: __arm NU_Reset_Semaphore 

0CC0: 0xA00A3A18   ; 330: __arm NU_Obtain_Semaphore
0CC4: 0xA00A39F8   ; 331: __arm NU_Release_Semaphore      // CHECK IT!
;CC8:              ; 332: __arm NU_Established_Semaphores
;CCC:              ; 333: __arm NU_Semaphore_Information
;CD0:              ; 334: __arm NU_Semaphore_Pointers
;CD4:              ; 335: __arm NU_Create_Event_Group
;CD8:              ; 336: __arm NU_Delete_Event_Group
;CDC:              ; 337: __arm NU_Set_Events
;CE0:              ; 338: __arm NU_Retrieve_Events
;CE4:              ; 339: __arm NU_Established_Event_Groups
;CE8:              ; 33A: __arm NU_Event_Group_Information
;CEC:              ; 33B: __arm NU_Event_Group_Pointers
;CF0:              ; 33C: __arm NU_Control_Signals
;CF4:              ; 33D: __arm NU_Receive_Signals
;CF8:              ; 33E: __arm NU_Register_Signal_Handler
;CFC:              ; 33F: __arm NU_Send_Signals

;D00:              ; 340: __arm NU_Create_Partition_Pool
;D04:              ; 341: __arm NU_Delete_Partition_Pool
;D08:              ; 342: __arm NU_Allocate_Partition
;D0C:              ; 343: __arm NU_Deallocate_Partition
;D10:              ; 344: __arm NU_Established_Partition_Pools
;D14:              ; 345: __arm NU_Partition_Pool_Information
;D18:              ; 346: __arm NU_Partition_Pool_Pointers
;D1C:              ; 347: __arm NU_Create_Memory_Pool
;D20:              ; 348: __arm NU_Delete_Memory_Pool
;D24:              ; 349: __arm NU_Allocate_Memory
;D28:              ; 34A: __arm NU_Deallocate_Memory
;D2C:              ; 34B: __arm NU_Established_Memory_Pools
;D30:              ; 34C: __arm NU_Memory_Pool_Information
;D34:              ; 34D: __arm NU_Memory_Pool_Pointers
0D38: 0xA00A8058   ; 34E: __arm NU_Control_Interrupts
0D3C: 0xA00A8084   ; 34F: __arm NU_Local_Control_Interrupts

0D40: 0xA00A809C   ; 350: __arm NU_Restore_Interrupts
;D44:              ; 351: __arm NU_Setup_Vector
0D48: 0xA00A232C   ; 352: __arm NU_Register_LISR
0D4C: 0xA00A27B8   ; 353: __arm NU_Activate_HISR
0D50: 0xA00A24CC   ; 354: __arm NU_Create_HISR
0D54: 0xA00A2578   ; 355: __arm NU_Delete_HISR
0D58: 0xA00A2058   ; 356: __arm NU_Current_HISR_Pointer
0D5C: 0xA00A2CD0   ; 357: __arm NU_Established_HISRs     // CHECK IT!
0D60: 0xA00A2D88   ; 358: __arm NU_HISR_Information      // CHECK IT!
0D64: 0xA00A3384   ; 359: __arm NU_HISR_Pointers         // CHECK IT!
0D68: 0xA00A82BC   ; 35A: __arm NU_Protect              // CHECK IT!
0D6C: 0xA00A84B0   ; 35B: __arm NU_Unprotect           // CHECK IT!
0D70: 0xA00A4274   ; 35C: __arm NU_Create_Timer
0D74: 0xA00A42E8   ; 35D: __arm NU_Delete_Timer
0D78: 0xA00A4308   ; 35E: __arm NU_Reset_Timer
0D7C: 0xA00A436C   ; 35F: __arm NU_Control_Timer

0D80: 0xA00A4274   ; 360: __arm NU_Established_Timers  // CHECK IT!
0D84: 0xA00A45CC   ; 361: __arm NU_Timer_Information   // CHECK IT!
0D88: 0xA00A3FC0   ; 362: __arm NU_Timer_Pointers
0D8C: 0xA00A8948   ; 363: __arm NU_Set_Clock
0D90: 0xA00A8954   ; 364: __arm NU_Retrieve_Clock
0D94: 0xA00A6528   ; 365: __arm NU_Release_Information
0D98: 0xA00A6528   ; 366: __arm NU_License_Information
;D9C:              ; 367: __arm NU_Disable_History_Saving
;DA0:              ; 368: __arm NU_Enable_History_Saving
;DA4:              ; 369: __arm NU_Make_History_Entry
;DA8:              ; 36A: __arm NU_Retrieve_History_Entry
;DAC:              ; 36B: __arm NU_Create_Driver
;DB0:              ; 36C: __arm NU_Delete_Driver
;DB4:              ; 36D: __arm NU_Request_Driver
;DB8:              ; 36E: __arm NU_Resume_Driver
;DBC:              ; 36F: __arm NU_Suspend_Driver

;DC0:              ; 370: __arm NU_Established_Drivers
;DC4:              ; 371: __arm NU_Driver_Pointers
;DC8:              ; 372: __arm NU_IS_SUPERVISOR_MODE
;DCC:              ; 373: __arm NU_SUPERVISOR_MODE
0DD0: 0xA00A1284   ; 374: __arm NU_USER_MODE
0DD4: 0xA8D17F9C   ; 375: __arm NU_SUPERV_USER_VARIABLES

;<Reserved>

0E00: 0xA0978675   ; 380: WSHDR *GetClipBoard()
0E04: 0xA097860D   ; 381: int CopyWsToClipboard(WSHDR *src)
0E08: 0xA09785F5   ; 382: void ClearClipboard(void)
0E0C: 0xA0971A93   ; 383: int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *)
0E10: 0xA0973793   ; 384: __swi __arm int LCDRedrawLAYER(LCDLAYER *)
0E14: 0xA0098F70   ; 385: GBSPROC *GetGBSProcAddress(unsigned short cepid)
0E18: 0xA00C7E8F   ; 386: void SetPropTo_obj0x17(DRWOBJ *, RECT *, int zero0, EIMGHDR *, int zero1, int zero2)
0E1C: 0xA096F551   ; 387: LCDLAYER *GetLCDLAYERByCurCepID()
0E20: 0xA0A07869   ; 388: void SetDepthBuffer(char depth)
0E24: 0xA0A0781D   ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth)
;E28:              ; 38A: void *RamAudioHookProc()
0E2C: 0xA8D16E08   ; 38B: char *RamLastStoreString()
;E30:              ; 38C: int format(unsigned short drive, unsigned int *error)
;E34:              ; 38D: int  stat(int fhandler, FStat *fstat, unsigned int *error)
0E38: 0xA0093124   ; 38E: void CreateICL(PGROUP *pg)
0E3C: 0xA0098224   ; 38F: PGroupProc *CreatePGroupRes(int mask, int unk_zero, TaskConfig *conf, int size)

0E40: 0xA0098E3C   ; 390: PGroupProc *PGroupCurrentTaskPointer()
0E44: 0xA0093AB4   ; 391: void *MemMBPAlloc(void *pool, int size)
0E48: 0xA00947A8   ; 392: void MemMBPFree(void *pool, void *ptr)
0E4C: 0xA8D35C74   ; 8393: void *MopiResourcePool(); ; RAM ;
; 0E50:            ; 394
; 0E54:            ; 395
; 0E58:            ; 396
; 0E5C:            ; 397
; 0E60:            ; 398
; 0E64:            ; 399
; 0E68:            ; 39A
; 0E6C:            ; 39B
; 0E70:            ; 39C
; 0E74:            ; 39D
; 0E78:            ; 39E
; 0E7C:            ; 39F

; 0E80:            ; 3A0
; 0E84:            ; 3A1
; 0E88:            ; 3A2
; 0E8C:            ; 3A3
; 0E90:            ; 3A4
; 0E94:            ; 3A5
; 0E98:            ; 3A6
; 0E9C:            ; 3A7
; 0EA0:            ; 3A8
; 0EA4:            ; 3A9
; 0EA8:            ; 3AA
; 0EAC:            ; 3AB
; 0EB0:            ; 3AC
; 0EB4:            ; 3AD
; 0EB8:            ; 3AE
; 0EBC:            ; 3AF

0EC0: 0xA028A659   ; 3B0: __thumb void SettingsAE_RegisterListener(SettingsAE_ListenerProc proc, int set, const char *entry, const char *keyword);
0EC4: 0xA028A6B3   ; 3B1: __thumb void SettingsAE_DeregisterListener(SettingsAE_ListenerProc proc, int set, const char *entry, const char *keyword);
0EC8: 0xA052D911   ; 3B2: __thumb WSHDR *GetLastAudioTrackDir();
0ECC: 0xA0303035   ; 3B3: __thumb IMGHDR *GetIMGHDRFromCanvasCache(unsigned int CanvasID);
0ED0: 0xA0902663   ; 3B4: __thumb GetDate_ws(WSHDR *ws, TDate *date, unsigned int unk);
0ED4: 0xA0902511   ; 3B5: __thumb GetTime_ws(WSHDR *ws, TTime *time, unsigned int unk);

#pragma disable old_equal_ff
+0
;------------------------- end -------------------------

