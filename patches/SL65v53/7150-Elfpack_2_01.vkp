;SL65v53
;Эльфпак
;ElfPack
;(c) Rst7/CBSIE, BoBa
;Version: 2.1
;PatchID: 7150
;Details: https://patches.kibab.com/patches/details.php5?id=7150
/*
;Также библиотека для патчей
;
;+Загрузка всех .elf-файлов из каталога 0:\ZBin\Daemons
;
;+Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
; Обрабатывается при помощи ExtD.elf - необходим в каталоге 0:\ZBin\Daemons
; по файлу 0:\ZBin\etc\extension.cfg. Формат файла:
; >>>>---
; ;Это комментарий, он начинается с символа ;
; 
; ;Универсальные для тех, у кого не указано какое-либо поле
; 
; RUN=0:\ZBin\TED\TED.elf
; SMALL=0:\ZBin\img\UNK_SMALL.png
; BIG=0:\ZBin\img\UNK_LARGE.png
; ALTRUN=0:\ZBin\TED\TED.elf
; 
; ;первый, расширение txt очень желательно указывать, т.к. по нему открываются неизвестные файлы
; [txt]
; SMALL=0:\ZBin\img\TXT_SMALL.png
; BIG=0:\ZBin\img\TXT_LARGE.png
; 
; ;второй
; [bcfg]
; RUN=0:\ZBin\utilities\CfgEdit.elf
; SMALL=0:\ZBin\img\BCFG_SMALL.png
; BIG=0:\ZBin\img\BCFG_LARGE.png
; 
; ; и т.д.
; 
; ; если поле не указано, то оно берется из первых
; ---<<<<<
;
;+Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив
; ММС.zip с сохранением путей.
;
;+Расширение таблицы регистрации расширений файлов
;
;+Очередной перенос HELPER_PROC на cepid=4407 для более корректной работы
; с жабой
;
;+Расширение PIT при помощи .png файлов
; Обрабатываются файлы из каталога 0:\ZBin\img\ с именами %d.png
; для замены штатных картинок или из эльфов - указатель на строку
; с именем файла вместо ID (аналогично ESI)


Совместим с Мастер-патчем и Picture Addon 5.1
*/

;ELFpack v2.1 (C)2007 by Rst7/CBSIE, BoBa
;SL65v53
;Также библиотека для патчей
;
;+Загрузка всех .elf-файлов из каталога 0:\ZBin\Daemons
;
;+Загрузка необходимых .elf файлов при выборе файла с произвольным расширением
; Обрабатывается при помощи ExtD.elf - необходим в каталоге 0:\ZBin\Daemons
; по файлу 0:\ZBin\etc\extension.cfg. Формат файла:
; >>>>---
; ;Это комментарий, он начинается с символа ;
; 
; ;Универсальные для тех, у кого не указано какое-либо поле
; 
; RUN=0:\ZBin\TED\TED.elf
; SMALL=0:\ZBin\img\UNK_SMALL.png
; BIG=0:\ZBin\img\UNK_LARGE.png
; ALTRUN=0:\ZBin\TED\TED.elf
; 
; ;первый, расширение txt очень желательно указывать, т.к. по нему открываются неизвестные файлы
; [txt]
; SMALL=0:\ZBin\img\TXT_SMALL.png
; BIG=0:\ZBin\img\TXT_LARGE.png
; 
; ;второй
; [bcfg]
; RUN=0:\ZBin\utilities\CfgEdit.elf
; SMALL=0:\ZBin\img\BCFG_SMALL.png
; BIG=0:\ZBin\img\BCFG_LARGE.png
; 
; ; и т.д.
; 
; ; если поле не указано, то оно берется из первых
; ---<<<<<
;
;+Для упрощения формирования структуры каталогов разархивируйте в корень MMC архив
; ММС.zip с сохранением путей.
;
;+Расширение таблицы регистрации расширений файлов
;
;+Очередной перенос HELPER_PROC на cepid=4407 для более корректной работы
; с жабой
;
;+Расширение PIT при помощи .png файлов
; Обрабатываются файлы из каталога 0:\ZBin\img\ с именами %d.png
; для замены штатных картинок или из эльфов - указатель на строку
; с именем файла вместо ID (аналогично ESI)


;Library

;05.02.2007

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 00: __arm void loopback0();
0004: 0xA0002070   ; 01: __arm void loopback1();
0008: 0xA0002070   ; 02: __arm void loopback2();
000C: 0xA0002070   ; 03: __arm void loopback3();
0010: 0xA0002070   ; 04: __arm void loopback4();
0014: 0xA082BE21   ; 05: DecToHex
0018: 0xA122CD24   ; 06: GetAkku
001C: 0xA13D7369   ; 07: GetLP
0020: 0xA122DBB8   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1249D98   ; 09: SwitchPhoneOff
0028: 0xA121C45C   ; 0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0FD9401   ; 0B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0030: 0xA0FD9451   ; 0C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA121C3B0   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA121C3E0   ; 0E: fflush
003C: 0xA121C410   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA121C240   ; 10: mkdir
0044: 0xA0FCF201   ; 11: OpenReadCloseFile
0048: 0xA121C15C   ; 12: GetFileAttrib
004C: 0xA121C2D8   ; 13: SetFileAttrib
0050: 0xA0820F98   ; 14: malloc(unsigned int size)
0054: 0xA0821000   ; 15: mfree(void *)
0058: 0xA15496C5   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA154A94D   ; 17: strcat(char *,const char *)
0060: 0xA154A96D   ; 18: strchr(const char *,int)
0064: 0xA154A990   ; 19: strcmp(const char *,const char *)
0068: 0xA154AA2D   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA154AAAD   ; 1B: strlen(char *)
0070: 0xA0BFCEE9   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0BFCE9D   ; 1D: wsInsertChar
0078: 0xA1151869   ; 1E: GetPITaddr
007C: 0xA164A017   ; 1F: DrawMainScreen

0080: 0xA164CDB5   ; 20: DrawScreenSaver
0084: 0xA115199D   ; 21: GetImgHeight
0088: 0xA11519AD   ; 22: GetImgWidth
008C: 0xA1642E61   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA1148A4D   ; 24: DrawImage2
0094: 0xA1642E3B   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA114898D   ; 26: DrawImgBW
009C: 0xA164283F   ; 27: AddIconToIconbar
00A0: 0xA122EC20   ; 28: getEELiteMaxID
00A4: 0xA121AE7C   ; 29: getEEFullMaxID
00A8: 0xA122EABC   ; 2A: GetEELiteBlockAddress
00AC: 0xA122EBC4   ; 2B: getEELiteBlockSizeVersion
00B0: 0xA121AAC0   ; 2C: getEEFullBlockSizeVersion
00B4: 0xA122EC54   ; 2D: StartWriteEELiteBlock
00B8: 0xA122ECD0   ; 2E: FinishWriteEELiteBlock
00BC: 0xA122EC2C   ; 2F: DeleteEELiteBlock

00C0: 0xA122EC8C   ; 30: WriteEELiteBlock
00C4: 0xA154ABF5   ; 31: strrchr
00C8: 0xA095221C   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0948400   ; 33: PlaySound2
00D0: 0xA0937920   ; 34: PlaySoundLoop
00D4: 0xA0B75AB3   ; 35: AlarmClockRing
00D8: 0xA0B106CD   ; 36: GetATCmdString
00DC: 0xA0B77BAF   ; 37: OriginalATCGSN
00E0: 0xA0B10069   ; 38: PostAtCommand
00E4: 0xA0B11787   ; 39: SendATAnswerStr
00E8: 0xA0BC0FBD   ; 3A: mfree_high
00EC: 0xA154A0C9   ; 3B: MemChr
00F0: 0xA121C4DC   ; 3C: SetFileSize
00F4: 0xA0A2CB31   ; 3D: editOrNewTXTModule
00F8: 0xA0B0EB59   ; 3E: LoadProcesses
00FC: 0xA11496B1   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA08E4277   ; 40: GetVibraStatus
0104: 0xA0B4C223   ; 41: GetProvider
0108: 0xA164D4E1   ; 42: IsScreenSaver
010C: 0xA1150A2F   ; 43: IsUnlocked
0110: 0xA0B6FAF9   ; 44: TempLigntOn
0114: 0xA0967330   ; 45: GetWavLen
0118: 0xA164C99D   ; 46: HasNewSMS
011C: 0xA164BA21   ; 47: HasFlashSMS
0120: 0xA0A2EBC3   ; 48: ReadNewSMS
0124: 0xA164851B   ; 49: ReadFlashSMS
0128: 0xA094A878   ; 4A: PlayFile
012C: 0xA0C3C5A8   ; 4B: StartMidlet
0130: 0xA0B487DD   ; 4C: GetMissedCallsCount
0134: 0xA0828294   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA113BCF7   ; 4E: ShowMsgInR1_3
013C: 0xA113BD07   ; 4F: ShowMsgInR1_4

0140: 0xA113BD6F   ; 50: ShowMsgInR1_7
0144: 0xA133945D   ; 51: GetNetAccessMode
0148: 0xA122E264   ; 52: GetIlluminationDataTable
014C: 0xA154A0ED   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA082BE5D   ; 54: StrToInt
0154: 0xA08E428D   ; 55: SwitchVibraOnOff
0158: 0xA0FCF421   ; 56: PlayVibra
015C: 0xA08283A0   ; 57: IsCallAfterTimerStillRunning
0160: 0xA0836F4C   ; 58: ClearMemory
0164: 0xA154A5B8   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA115035B   ; 5A: KeypressOn
016C: 0xA1150419   ; 5B: KeypressOff
0170: 0xA0905001   ; 5C: GetCPUClock()
0174: 0xA090503B   ; 5D: GetCPULoad()
0178: 0xA0905009   ; 5E: GetMMIMemUsed
017C: 0xA082100C   ; 5F: GetNonPermMemAvail

0180: 0xA08E4433   ; 60: ShowMainMenu
0184: 0xA08E927F   ; 61: ShowNativeMenu
0188: 0xA0002070   ; 62: SetVibraStatus
018C: 0xA1646843   ; 63: MS_Wallpaper_Flush
0190: 0xA113C651   ; 64: TriggerUpdate
0194: 0xA0B49F05   ; 65: EndCall
0198: 0xA0B1A8FB   ; 66: EndCallBusy
019C: 0xA164228D   ; 67: IsDirectCallActive
01A0: 0xA163F5A3   ; 68: GetScreenSaverRAM
01A4: 0xA082949C   ; 69: LockSched(void)
01A8: 0xA0829524   ; 6A: UnlockSched(void)
01AC: 0xA121C194   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA121C1D0   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA121C11C   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA130755B   ; 6E: IsCalling
01BC: 0xA16470FF   ; 6F: RefreshGPRSTraffic

01C0: 0xA164711D   ; 70: GetGPRSTrafficPointer
01C4: 0xA11473E3   ; 71: DrawRoundRect
01C8: 0xA0B44983   ; 72: SetCurrentSecondOfCall
01CC: 0xA1307d73   ; 73: GetTypeOfCall
01D0: 0xA08E49B7   ; 74: GetFunctionPointer
01D4: 0xA114DC95   ; 75: StoreXYWHtoRECT
01D8: 0xA1168635   ; 76: SetWindowText
01DC: 0xA1165E13   ; 77: set2color_byPaletteAdr
01E0: 0xA0B27D6F   ; 78: GetTimeFormat
01E4: 0xA114D061   ; 79: DrawObject
01E8: 0xA1165EA9   ; 7A: ClearWindowBuffer
01EC: 0xA08CC751   ; 7B: GetProfileFilter
01F0: 0xA1235F58   ; 7C: SetVibration(unsigned int power)
01F4: 0xA1306F75   ; 7D: IsIncognitoCall
01F8: 0xA1313761   ; 7E: Rand
01FC: 0xA0002070   ; 7F: IsPlayerOn

0200: 0xA0A8975D   ; 80: ShowCallList(int list, int zero)
0204: 0xA154A848   ; 81: HexToDec
0208: 0xA0002070   ; 82: GetCurrentTrackFilename
020C: 0xA093B018   ; 83: GetPathOfFoundFile
0210: 0xA121C310   ; 84: GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D79   ; 85: StrCmpNoCase
0218: 0xA121A9E8   ; 86: ReadEEPROMData
021C: 0xA121AB2C   ; 87: WriteEEPROMData
0220: 0xA0002070   ; 88: GetAccessoryType
0224: 0xA0002070   ; 89: GetLangMesIntoWS
0228: 0xA121C0AC   ; 8A: GetFreeFlexSpace
022C: 0xA121C670   ; 8B: GetTotalFlexSpace
0230: 0xA092F6E0   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0002070   ; 8D: GetProfileName
0238: 0xA121C270   ; 8E: fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA121C2A8   ; 8F: rmdir(const char * cDirectory, unsigned int *ErrorNumber)

0240: 0xA121C54C   ; 90: truncate(int FileHandler, int length, int *errornumber)
0244: 0xA121C210   ; 91: isdir(const char * cDirectory, unsigned int *ErrorNumber)
0248: 0xA121C310   ; 92: int stat(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
024C: 0xA1249DA4   ; 93: RebootPhone 
0250: 0xA092F7A4   ; 94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;254: 0x           ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);
;258:              ; 96: 
;25C:              ; 97: 
;260:              ; 98: 
0264: 0xA094A9A0   ; 99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA123664C   ; 9A: ;__arm int ChangeVolume(unsigned char Volume)
026C: 0xA8787D14   ; 9B: Audio params addr
;270:              ; 9C: 
;274:              ; 9D: 
;278:              ; 9E: 
027C: 0xA11472AF   ; 9F: DrawRect

0280: 0xA0BFC463   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0825E59   ; A1: wstrcpy
0288: 0xA0BFC9E7   ; A2: Unicode_GetCharByPosition
028C: 0xA121B8FC   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0BFCC5B   ; A4: AllocWS_2(int len)
0294: 0xA0BFC5A5   ; A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA16470C5   ; A6: __arm void ResetGPRSTraffic();
029C: 0xA1646F11   ; A7: char IsGPRSEnabled();
02A0: 0xA1315A95   ; A8: char IsGPRSConnected();
02A4: 0xA1151039   ; A9: __arm void KbdLock()              
02A8: 0xA0FCF001   ; AA: OpenWriteCloseFile
02AC: 0xA0002070   ; AB: __arm void loopback171();
02B0: 0xA0FCF1B1   ; AC: DrawText
02B4: 0xA0FCF0A1   ; AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; AE: StrUni2Ansi
02BC: 0xA0FCF051   ; AF: Hex2Int

02C0: 0xA0FCF351   ; B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ; B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; B2: GetBuildCanvas
02CC: 0xA0FCF301   ; B3: Seconds2iTime
02D0: 0xA0B26EF3   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF   ; B5: GetWeek(TDate*)
02D8: 0xA08CC115   ; B6: GetProfile()
02DC: 0xA08CBFE3   ; B7: SetProfile(char)
02E0: 0xA154A72C   ; B8: dwMODdw
02E4: 0xA1150CAF   ; B9: KbdUnlock
02E8: 0xA0820FA4   ; BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA154A714   ; BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0837018   ; BC: __arm int divide(int divisor, int dividend);
02F4: 0xA154A804   ; 0BD: __arm int DivBy10(int divident);

02F8: 0xA0FC0C91   ; BE: RunScaner (MPv14)
02FC: 0xA0801651   ; BF: SpellTime

0300: 0xA0FC7601   ; C0: MiniGPS
0304: 0xA0FC0C51   ; C1: RunDispatcher
0308: 0xA0FC12A1   ; C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; C3: ProcessFiles
0310: 0xA0FC0C01   ; C4: GetBuffer
0314: 0xA0002070   ; C5: PIT_Manager_Core
0318: 0xA122B1B4   ; C6: GetAkkuCapacity();
031C: 0xA0002070   ; C7: CallLibFunByNumber
0320: 0xA86BA6B4   ; C8: RamCap
0324: 0xA86BA6B6   ; C9: RamLS
0328: 0xA86C6C58   ; CA: RamNet
032C: 0xA86C6C5E   ; CB: RamNetRX
0330: 0xA86D4214   ; CC: RamMissedCalls * lg3
0334: 0xA86D9E2C   ; CD: RamMissedSMS * lg3

0338: 0x00000000   ; CE: RamDateTime
033C: 0xA86D2020   ; CF: RamAlarm
0340: 0xA86FFE20   ; D0: RamAccPoint
0344: 0xA868C39C   ; D1: RamScreensaver
0348: 0x00000000   ; D2: RamAutoTime
034C: 0xA868C390   ; D3: RamStby
0350: 0xA83D4430   ; D4: RamMissedMes * lg3
0354: 0xA86A1A98   ; D5: RamIsLocked
0358: 0xA868EFB0   ; D6: RamNetOnline
035C: 0xA86DC584   ; D7: RamScreenBrightness
0360: 0xA86903B9   ; D8: RamMenuAnywhere
0364: 0xA86FFE8C   ; D9: RamShutdownMode
0368: 0xA86FFE8C   ; DA: RamIsShutdown
036C: 0xA868C3D0   ; DB: RamMainscreenAccuIcon
0370: 0xA87623F4   ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA86C4A7C   ; DE: RamIsSimPresent
037C: 0xA86A1998   ; DF: RamPressedKey

0380: 0xA8699568   ; E0: RamScreenBuffer
;384:              ; E1: 
0388: 0xA86AEB7C   ; E2: RamKeyBuffer 
038C: 0xA86C7D54   ; E3: RamProfileNum
0390: 0xA8000300   ; E4: FreeRAM
0394: 0x00001297   ; E5: LP_MonthsShort
0398: 0x00000470   ; E6: Pic_Big0
039C: 0x000003F7   ; E7: Pic_Little0
03A0: 0x0000047E   ; E8: Pic_Extra
03A4: 0x000004CC   ; E9: Pic_Profiles
03A8: 0x00000501   ; EA: Pic_Vibra
03AC: 0x000003B3   ; EB: Pic_Call
03B0: 0x000004D4   ; EC: Pic_AdvNet
03B4: 0x0000118B   ; ED: LP_MonthsLong
03B8: 0x00000400   ; EE: LP_Weekdays
03BC: 0x00000503   ; EF: Pic_Calendar

03C0: 0x000004E2   ; F0: Pic_AccuGraph
03C4: 0xA1649E33   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
;3D4:              ; F5: 
;3D8:              ; F6: 
;3DC:              ; F7: 
03E0: 0xA0FD0050   ; F8: Additional_PIT_address
03E4: 0x000004CC   ; F9: Additional_PIT_start
03E8: 0x0000052F   ; FA: Additional_PIT_end
;3EC:              ; FB: 
03F0: 0xA0FC0A00   ; FC: PictureRelocationTable
03F4: 0x0000F000   ; FD: PictureRelocationBase
03F8: 0x00001E1E   ; FE: NextPictureMagic
;3FC:              ; FF: 

0400: 0xA0827B04   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826AA0   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0   ; 102: GBS_AcceptMessage(void)
040C: 0xA0826EC8   ; 103: GBS_ClearMessage(void)
0410: 0xA0827098   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F74   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA868A82C   ; 106: CSM_root()
041C: 0xA1137E53   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA1137E65   ; 108: FindCSMbyID(int id)
0424: 0xA1137F0F   ; 109: DoIDLE(void)
0428: 0x00000000   ; 10A: GetConfig(unsigned int id)
042C: 0x00000000   ; 810B: GetMinAdrScan()
0430: 0x00000000   ; 810C: GetMaxAdrScan()
0434: 0x00000000   ; 810D: GetCI()
0438: 0x00000000   ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA164B4D9   ; 10F: freeUSSD()

0440: 0xA0825E59   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA164B515   ; 111: GetTypeUSSD()
0448: 0xA164B525   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA154ABCD   ; 113: char * strpbrk (const char *s1,const char *s2);
0450: 0xA154AAF9   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA154AB29   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA154AB79   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA154ABF5   ; 117: strrchr_2(const char *s,int c)
0460: 0xA154AC0D   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA154AC89   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA154AD05   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1549671   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA154A0ED   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA154A570   ; 11D: zeromem(void *dest,int n)
0478: 0xA154A5B8   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0BFCD7B   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0BFCD9D   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0BFCDC1   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0BFCE55   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0BFC6BF   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0BFC463   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0BFCC5B   ; 125: AllocWS(int len)
0498: 0xA0BFD04F   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0BFCBF3   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0BFCC13   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0BFC5A5   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA114D061   ; 12A: DrawObject_2(DRWOBJ *)
;4AC: 0x           ; 12B: AddKeybMsgHook(void *proc)
;4B0: 0x           ; 12C: AddKeybMsgHook_end(void *proc)
;4B4: 0x           ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA11496B1   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA11496D5   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA11496E5   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA1149703   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA154A671   ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA114DC95   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA114DCAB   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA113C4F7   ; 135: IsGuiOnTop(int id)
04D8: 0xA113C5D9   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA113C5E9   ; 137: CreateGUI(void *gui)
04E0: 0xA113C5F7   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA113C631   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA113C641   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA113C651   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA113C65F   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA113C66D   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA113C67D   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA113C70F   ; 13F: DirectRedrawGUI(void)

0500: 0xA113C71B   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA113C7AB   ; 141: PendedRedrawGUI(void)
0508: 0xA1146CA9   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828330   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243BC   ; 145: GBS_GetCurCepid(void)
0518: 0xA082949C   ; 146: LockSched_2(void)
051C: 0xA0829524   ; 147: UnlockSched_2(void)
0520: 0xA113BCD9   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA1168635   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA1165EA9   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA1165E13   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA1168685   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA113C505   ; 14D: GetTopGUI(void)
0538: 0xA1153FDB   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA1154005   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA11473E3   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA1148963   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA113B891   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: KillGBSproc(int cepid)

0554: 0xA1529CC1   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA1529095   ; 156: png_create_info_struct(png_structp png_ptr) 08B5002800D108BD01214902
055C: 0xA152AAF9   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr) F7B582B00298002600250024002801D002980468
0560: 0xA1528F69   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes) B0B5051C0C1C082903DDECA1281C
0564: 0xA1529DFF   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15296E5   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1529A87   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA152A6EF   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA152A731   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA1529385   ; 15E: __arm png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA15295FB   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA152A287   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)

0584: 0x00000000   ;-161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA161A664   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA1138F65   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA1138441   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA113874F   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA11390FD   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA114DF8B   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA116E689   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA116E62D   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA116E637   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA121C348   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA121B7DC   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0BB981F   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0B51297   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0B51A8D   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA0B17A01   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)

;Handmaded functions
;05C4: ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8: ;172 __arm void REDRAW(void);

05CC: 0xA1286655   ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA1286927   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA12867D9   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA1286AA1   ; 176: __thumb int closesocket(int socket);
05DC: 0xA1286A1D   ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA1286B4B   ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA1286E27   ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA12A7819   ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA12A7825   ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA875B2F0   ; 817C: __arm int socklasterr(void);
05F4: 0xA113C68C   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA0C92CBE   ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA113C6A9   ; 17F: __thumb void DisableIDLETMR(void);
0600: 0xA116E55B   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA116E4C5   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA116E501   ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA116E51F   ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA1138787   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA082769C   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA1284271   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA1284CA1   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *);

0620: 0x00000082   ; 8188: __adr int ScreenW(void);
0624: 0x00000082   ; 8189: __adr int ScreenH(void);
0628: 0x00000016   ; 818A: __adr int HeaderH(void);
062C: 0x00000016   ; 818B: __adr int SoftkeyH(void);

0630: 0xA08298B4   ; 18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0CCB9A8   ; 18D: __arm int available0(int sock);
0638: 0xA1316341   ; 18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA113F0DF   ; 18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA0828F64   ; 190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0829090   ; 191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA0829210   ; 192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA0829268   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA08292C4   ; 194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA11405A1   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA113C785   ; 196: __thumb void RefreshGUI(void);
065C: 0xA11405F3   ; 197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA1140701   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA1140573   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA113FEC5   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA116E515   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);

;Handmaded function
;0670: ; 19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);

0674: 0xA1233F78   ; 19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA1233F40   ; 19E: __arm void StartCpuUsageCount(void);
067C: 0xA08751A9   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA08752DF   ; 1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA087611B   ; 1A1: __thumb int inflateEnd(z_streamp strm);
0688: 0xA08C6249   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA0C37620   ; 1A3: __arm int GetCurrentGPRSProfile(void);
0690: 0xA0C375C4   ; 1A4: __arm int GetDisconnectTime(void);
0694: 0xA08C6273   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA08283A0   ; 1A6: __arm int IsTimerProc(GBSTMR *);
069C: 0xA0B1BAFB   ; 1A7:  char* Get_NC_CC();

06A0: 0xA1529B85   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA152AB97   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA152A24F   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA152ACBF   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA15295E9   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA152ACDB   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA152BA31   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA152AC95   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA152B9C7   ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA152ACE9   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA1528FC9   ; 1B2: __arm int png_check_sig(png_bytep sig, int num);

06CC: 0xA1149FC3   ; 1B3: __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA11472AF   ; 1B4: __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000   ; 81B5: __adr int isnewSGold(void);
06D8: 0xA1287347   ; 1B6: __arm int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA128C4F9   ; 1B7: __arm unsigned int str2ip(const char *);

;Handmaded function
;06E0: 0x ; 81B8: __adr void *EXT_TOP(void);
;06E4: 0x ; 81B9: __adr void *PNG_TOP(void);
;06E8: 0x ; 81BA: __adr void *LIB_TOP(void);
;06EC: 0x ; 81BB: __adr void *DATA_N_SFB(void);

06F0: 0xA1514E7F   ; 1BC: __arm void SHA1_Init(SHA_CTX *c)
06F4: 0xA1514B63   ; 1BD: __arm void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA1514D5F   ; 1BE: __arm void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA140B549   ; 1BF: __arm RSA * RSA_new_method(RSA_METHOD *method)
0700: 0xA140B5D7   ; 1C0: __arm void RSA_free (RSA *r)
0704: 0xA140B7A3   ; 1C1: __arm int RSA_sign(int type, char *m, unsigned int m_len,char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA1408DA3   ; 1C2: __arm BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)

070C: 0xA113D6FF   ; 1C3: __arm void SetMenuItemCount(void *gui,int n)
0710: 0xA113D677   ; 1C4: __arm void SetCursorToMenuItem(void *gui,int n)
0714: 0xA11516A3   ; 1C5: __arm int GetFontYSIZE(int font);

0718: 0xA116E4ED   ; 1C6: __arm void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA116E4F7   ; 1C7: __arm int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA11392B5   ; 1C8: __arm EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA11383DB   ; 1C9: __arm void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA11383CF   ; 1CA: __arm void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA11383C3   ; 1CB: __arm void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA11383AD   ; 1CC: __arm void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA1138395   ; 1CD: __arm void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA113847D   ; 1CE: __arm void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA092EE10   ; 1CF: __swi __arm REGEXPLEXT *get_regextpnt_by_uid(int uid);
0740: 0xA092EF90   ; 1D0: __swi __arm int GetExtUid_ws(WSHDR * ext);
;0744:  ;1D1:
;0748:  ;1D2:
;074C:  ;1D3:
;0750:  ;1D4:
;0754:  ;1D5:
;0758:  ;1D6:
;075C:  ;1D8:
;0760:  ;1D9:
;0764:  ;1DA:
;0768:  ;1DB:
;076C   ;1DC:
;0770   ;1DE:
;0774   ;1DF:
0778: 0xA092EE10   ;1E0: REGEXPLEXT_ARM_NEW *GetEXPLEXTByRegN(int id)
077C: 0xA092F428   ;1E1: int GetFileTypeRegNFromFullFileName(WSHDR * fullname)

;07E8:0000000000   ;1FA: char *RamVolumeStep()
07EC: 0xA86C39A8   ;1FB: char *RamMediaIsPlaying()
07F0: 0xA86A1994   ; 1FC: char RamIsMainScreen()
;7F4: 0000000000   ; 1FD: char IsNumberTyping()

//0xA0941008 ;  __arm void GetFileNameFromFullFileName(WSHDR * dest, WSHDR * fullname);
//0xA09410C0 ;  __arm void GetFolderNameFromFullFileName(WSHDR * dest, WSHDR * fullname);
//0xA092F428 ;  __arm int GetFileTypeRegNFromFullFileName(WSHDR * fullname);
//0xA092EF90 ;  __arm int GetFileTypeRegN(WSHDR * extension);
//0xA0BFCE7D ;  __thumb void wstrcopybypos(WSHDR *destws,WSHDR *sourcews,__int16 position,__int16 maxlen)
//0xA0BFC96B ;  __thumb short wstrrchr(WSHDR *,unsigned short maxlen, unsigned short symbol)
//0xA0BFC6EB ;  __thumb int wstrcmp ((WSHDR *,WSHDR *);
//0xA08751A9 ;  __thumb int ZEXPORT inflateInit2_ OF((z_streamp strm, int  windowBits, const char *version, int stream_size));
//0xA08752DF ;  __thumb int ZEXPORT inflate OF((z_streamp strm, int flush));
//0xA087611B ;  __thumb int ZEXPORT inflateEnd OF((z_streamp strm));
#pragma disable old_equal_ff
+0

#pragma enable old_equal_ff

; FREAD32
0x00FD9400: FBB51500002403E00199AD1B08180190
0x00FD9410: 002D0FD00948854201DB461E00E02E00
0x00FD9420: 0098074F029B01993F683200B8472418
0x00FD9430: B042E9D0200003B0F0BDC04601400000
0x00FD9440: F094FDA0
;----------------------------------------
; FWRITE32
0x00FD9450: FBB51500002403E00199AD1B08180190
0x00FD9460: 002D0FD00948854201DB461E00E02E00
0x00FD9470: 0098074F029B01993F683200B8472418
0x00FD9480: B042E9D0200003B0F0BDC04601400000
0x00FD9490: F494FDA0
;RET_ADRS
0x00FD94F0: 9cc421A184c521A1 ;A121C49C-fread  A121C584-fwrite;RET_ADRS
#pragma disable old_equal_ff



;locale=Russian_Russia.1251;ElfLoader+ESI+RunElfsByExtention+FSWI

;FSWI_PATCH1
0x000925E0: 1A0000EA DCF09FE5
;FSWI_PATCH3,FSWI_PATCH2
0x000926C3: A100000000 000480FDA0
;PATCH_GET_REGEXT1
0x0092EE30: 81C282E0 D8A41AEB
;PATCH_GET_REGEXT2
0x0092EE44: 810282E0 D8A41AEB
;PATCH_GET_EXT
0x0092F020: 857288E0 57A41AEB
;REG_FILE
0x0092F648: F0452DE920608DE2 04F01FE54482FDA0
;PATCH_REGEXPL
0x0092F730: C4FFFFEB A4A21AEB
;PATCH_PROPERTY2
0x00969A7C: 070092E8 AFB919EB
;PATCH_BIG_ICON
0x0096A45C: 010080E2 57B719EB
;PATCH_PROPERTY1
0x00997974: 0400A0E1 ED0119EB
;PATCH_NO_BROWSE_TXT
0x00B7BC20: 211C 16E0
;SWILIB_FUNC095
#pragma enable old_equal_ff
0x00FD4254: 4083FDA0
;SWILIB_FUNC12B_12D
0x00FD44AC: F483FDA0
0x00FD44B0: 6884FDA0B884FDA0
;SWILIB_FUNC171,SWILIB_FUNC172
0x00FD45C4: B491FDA09091FDA0
;SWILIB_FUNC19C
0x00FD4670: D991FDA0
;SWILIB_FUNC1B8_1BB
0x00FD46E0: 309168A8349168A8289168A8389168A8
;FSWI_CODE
0x00FD8000: 1EFF2FE100109DE5200011E3122F8F02
0x00FD8010: 0400000AC70050E3B200DE0014E08D05
0x00FD8020: 01E08EE235208FE234109FE5803CC0E3
0x00FD8030: 400D53E30500008A800C10E300402D09
0x00FD8040: 0040FD0803C191E704C08D1514208D05
0x00FD8050: 0100BDE800F069E10F80FDE81CFF2FE1
0x00FD8060: 604700000040FDA0
;CODE,DATA_C
0x00FD8100: 11FF2FE1203EA0E10A0053E31040BD08
0x00FD8110: 1102000AEC3E9FE50140A0E10210A0E1
0x00FD8120: 04209FE5020050E113FF2FE110270000
0x00FD8130: 0400A0E10140A0E3184080E51EFF2FE1
0x00FD8140: 180095E5000050E3070092E81EFF2F01
0x00FD8150: 390200EB0000A0E3180085E58DDF8DE2
0x00FD8160: F080BDE8F8B5061C0D1C00F0CBF90028
0x00FD8170: 00D0002500240027014A126810470000
0x00FD8180: 1490FDA048709FE5007097E52480A0E3
0x00FD8190: 987527E01EFF2FE134C09FE500C09CE5
0x00FD81A0: 2420A0E392C12CE01EFF2FE120009FE5
0x00FD81B0: 000090E52420A0E3920120E01EFF2FE1
0x00FD81C0: 0810A0E1410000EA105094E510508DE5
0x00FD81D0: 1B0000EA309168A804E02DE500200FE1
0x00FD81E0: 000000EF00100FE1C01081E301F021E1
0x00FD81F0: 0000A0E10000A0E10000A0E17AFF17EE
0x00FD8200: 0000A0E10000A0E10000A0E1FAFFFF1A
0x00FD8210: 0000A0E39A0F07EE0000A0E10000A0E1
0x00FD8220: 0000A0E10000A0E1150F07EE0000A0E1
0x00FD8230: 0000A0E10000A0E10000A0E102F021E1
0x00FD8240: 04F09DE4F74F2DE930809DE534909DE5
0x00FD8250: 38A09DE53CB09DE540409DE50370A0E1
0x00FD8260: D60100EB0050A0E1460100EF0060A0E3
0x00FD8270: 006085E5047085E504009DE5080085E5
0x00FD8280: 0C80C5E508009DE5BE00C5E11090C5E5
0x00FD8290: 00009DE5140085E518A085E51CB085E5
0x00FD82A0: 0800A0E3140000EF001097E5212EA0E1
0x00FD82B0: 0A0052E30010940501108112001080E5
0x00FD82C0: 046080E5200085E5470100EFF78FBDE8
0x00FD82D0: 14219FE514319FE530002DE9002092E5
0x00FD82E0: 003093E5204EA0E10A0054E30200000A
0x00FD82F0: 3000BDE8010080E21EFF2FE100C0A0E3
0x00FD8300: 000052E3F9FFFF0A084083E2020000EA
0x00FD8310: 01C08CE202005CE1F4FFFF0A245094E4
0x00FD8320: 010055E1F9FFFF1A2400A0E3903C21E0
0x00FD8330: 200091E5000090E53000BDE81EFF2FE1
0x00FD8340: F0412DE9A0409FE50060A0E19C009FE5
0x00FD8350: 10D04DE2007090E50050A0E3088087E2
0x00FD8360: 010000EA015085E2248088E2000094E5
0x00FD8370: 000055E1FF81BD08040096E5001098E5
0x00FD8380: 010050E1F6FFFF1A0C0098E51020A0E3
0x00FD8390: 0D10A0E1A30000EF001096E50D00A0E1
0x00FD83A0: 190000EF000050E3EDFFFF1A2400A0E3
0x00FD83B0: 907526E0140096E5290100EF200096E5
0x00FD83C0: 150000EF000094E52410A0E3010040E2
0x00FD83D0: 000084E5050040E0910002E0241086E2
0x00FD83E0: 0600A0E11E0100EFFF81BDE8249168A8
0x00FD83F0: 309168A8F0402DE90040B0E10100001A
0x00FD8400: 0000A0E3F080BDE81C519FE50C00A0E3
0x00FD8410: 0560A0E1140000EF0070B0E1F7FFFF0A
0x00FD8420: 460100EF158000EF0010A0E3001087E5
0x00FD8430: 044087E5080087E5000095E5000050E3
0x00FD8440: 0100001A030000EA0060A0E1000096E5
0x00FD8450: 000050E3FBFFFF1A007086E5470100EF
0x00FD8460: 0100A0E3F080BDE8F0402DE90040B0E1
0x00FD8470: 0500000AB0509FE50C00A0E3006095E5
0x00FD8480: 140000EF0070B0E10100001A0000A0E3
0x00FD8490: F080BDE8460100EF158000EF006087E5
0x00FD84A0: 044087E5080087E5007085E5470100EF
0x00FD84B0: 0100A0E3F080BDE830402DE968409FE5
0x00FD84C0: 0450A0E1000000EA0540A0E1005095E5
0x00FD84D0: 000055E33080BD08041095E5000051E1
0x00FD84E0: F8FFFF1A460100EF000095E5000084E5
0x00FD84F0: 470100EF081095E50500A0E1FFFEFFEB
0x00FD8500: 3080BDE870B5094E04000D003668002E
0x00FD8510: 02D07268100001D1002070BD21002800
0x00FD8520: 90470028F2D0012070BD00002C9168A8
0x00FD8530: 00402DE91D0100EF0080BDE87FB5FFB0
0x00FD8540: 0025ED430595642166A8FFF7F2EF7F98
0x00FD8550: 00246B46802211020ADF0190002801D5
0x00FD8560: 28003EE16B46342209A90BDF342805D0
0x00FD8570: 019869460DDF0120C04332E109989A49
0x00FD8580: 884204D0019869460DDF0220F4E709A8
0x00FD8590: 808D0B2802D30820C04322E1049416AD
0x00FD85A0: 083511E0306801280AD1286805998842
0x00FD85B0: 00D20590E9684018844201D228684418
0x00FD85C0: 04982035401C0490049809A9898D8842
0x00FD85D0: 27DA08A801B4119805990AAE768D01AB
0x00FD85E0: 00227143411802980FDF1199059A0AAB
0x00FD85F0: 5B8D01B05A438918884204D001986946
0x00FD8600: 0DDF0320B8E701982E00083E6B462022
0x00FD8610: 31000BDF2028C5D0019869460DDF0420
0x00FD8620: BAE70598251A280014DF040004D10198
0x00FD8630: 69460DDF0D209FE72900FFF77AEF0020
0x00FD8640: 049016A8083053E02868012802D00228
0x00FD8650: 17D0B0E002988268002A44D000680599
0x00FD8660: 6B46401A211801980BDF029989688842
0x00FD8670: 39D0019869460DDF200015DF0A20C043
0x00FD8680: AFE00298806814DF0390002806D10198
0x00FD8690: 69460DDF200015DF06206DE702980399
0x00FD86A0: 826801986B460BDF02998968884208D0
0x00FD86B0: 019869460DDF039815DF200015DF0720
0x00FD86C0: 6AE7039866AA05E0192902DA43688900
0x00FD86D0: 5350083001680029F6D1789900200029
0x00FD86E0: 2ED1039815DF0498401C049002982030
0x00FD86F0: 0290059841420791049809A9898D8842
0x00FD8700: 60DA029D684601B4083D696801AB0298
0x00FD8710: 00220FDF696801B0884295D001986946
0x00FD8720: 0DDF200015DF052026E7039DEB189A18
0x00FD8730: 059B5218116862581219D21A6250401C
0x00FD8740: 789AC1009142CCD20299779B0968039D
0x00FD8750: 4A42C100AD186D18ED186D682D062D0E
0x00FD8760: 0695FF2DEBD0FD2DDFD0079D069E6519
0x00FD8770: 002EE4D0022E02D0172E09D012E0039E
0x00FD8780: F3189A18521811686A5812196A50D6E7
0x00FD8790: 039EF3189A18059B521811686A581219
0x00FD87A0: D21AF3E7019869460DDF200015DF0398
0x00FD87B0: 15DF0C2063E7019869460DDF200015DF
0x00FD87C0: 0B20D9E6019869460DDF00F05DF9079D
0x00FD87D0: 0F9E829B819A80997F98A4196419A047
0x00FD87E0: 00207FB004B070BD7F454C4610B5A0B0
0x00FD87F0: 694614007E22A3DF0023002221006846
0x00FD8800: FFF79CFE002801D0002000E0012020B0
0x00FD8810: 10BD000010402DE90040A0E10700A0E3
0x00FD8820: 440C80E3540100EF0C009FE5001090E5
0x00FD8830: 0400A0E11040BDE830FEFFEA0090FDA0
0x00FD8840: 10402DE9AFDF4DE26F0F8DE20140A0E1
0x00FD8850: 1A0000EF70109FE56F0F8DE2170000EF
0x00FD8860: 0D20A0E16F1F8DE204008DE26B0000EF
0x00FD8870: 000050E30F00000A0410A0E16F0F8DE2
0x00FD8880: 1A0000EFAD108DE26F0F8DE2170000EF
0x00FD8890: 0030A0E30020A0E30210A0E16F0F8DE2
0x00FD88A0: 25FFFFFA0D10A0E104008DE26C0000EF
0x00FD88B0: 000050E3EFFFFF1A0D10A0E104008DE2
0x00FD88C0: 6D0000EFAFDF8DE21080BDE8908AFDA0
0x00FD88D0: 30402DE930509FE50040A0E11F0200EB
0x00FD88E0: 140085E28C0000EF20009FE50520A0E1
0x00FD88F0: 0010A0E3710100EF14009FE5001090E5
0x00FD8900: 0400A0E13040BDE8FCFDFFEA988AFDA0
0x00FD8910: 4088FDA00490FDA080280BDB06490818
0x00FD8920: 80380078802805DB044AFF21C9434000
0x00FD8930: 1018405A7047C046108BFDA0908BFDA0
0x00FD8940: 30B504000D0004E0FFF7E6FF01002800
0x00FD8950: 1CDF2078641C0028F6D130BD30402DE9
0x00FD8960: 0040A0E10150A0E10010A0E30500A0E1
0x00FD8970: 260100EF0510A0E10400A0E1EFFFFFFA
0x00FD8980: 3080BDE830402DE90040A0E10F00A0E3
0x00FD8990: 250100EF0050A0E1071F8FE2240100EF
0x00FD89A0: 0020A0E30510A0E10400A0E1940000EF
0x00FD89B0: 0500A0E1290100EF3080BDE874787400
0x00FD89C0: F0472DE968409FE568609FE5460100EF
0x00FD89D0: 005094E5007096E5018085E22400A0E3
0x00FD89E0: 90080AE00A00A0E1140000EF0090A0E1
0x00FD89F0: 0A10A0E11D0100EF000057E30600000A
0x00FD8A00: 2400A0E3900502E00710A0E10900A0E1
0x00FD8A10: 1E0100EF0700A0E1150000EF008084E5
0x00FD8A20: 009086E5470100EF850185E0000189E0
0x00FD8A30: F087BDE8249168A8309168A870402DE9
0x00FD8A40: 0040A0E10150A0E1FF00A0E3250100EF
0x00FD8A50: 0060A0E10410A0E11F0100EF5C10A0E3
0x00FD8A60: 0600A0E11C0000EF0510A0E10600A0E1
0x00FD8A70: 210100EF0600A0E1C1FFFFEB0600A0E1
0x00FD8A80: 290100EF7080BDE8004B1847D881FDA0
0x00FD8A90: 2A2E656C66000000303A5C5A42696E5C
0x00FD8AA0: 4461656D6F6E735C00000000FC8AFDA0
0x00FD8AB0: 55000000FF077805008BFDA0088BFDA0
0x00FD8AC0: ED87FDA000000000303A5C5A42696E5C
0x00FD8AD0: 696D675C656C665F736D616C6C2E706E
0x00FD8AE0: 67000000303A5C5A42696E5C696D675C
0x00FD8AF0: 656C665F6269672E706E6700656C6600
0x00FD8B00: C88AFDA000000000E48AFDA000000000
0x00FD8B10: 5F5F275F223AC5D85F255F3C5F5F5F5F
0x00FD8B20: 5F27272222072D2D5F545F3E5F5F5F5F
0x00FD8B30: FFF6F75FFD83B315F063F23CBF2D52F4
0x00FD8B40: F82B4969A3E714FAF1FCF33E5F5F5FF5
0x00FD8B50: 808182838485868788898A8B8C8D8E8F
0x00FD8B60: 909192939495969798999A9B9C9D9E9F
0x00FD8B70: A0A1A2A3A4A5A6A7A8A9AAABACADAEAF
0x00FD8B80: E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
0x00FD8B90: 10041104120413041404150416041704
0x00FD8BA0: 180419041A041B041C041D041E041F04
0x00FD8BB0: 20042104220423042404250426042704
0x00FD8BC0: 280429042A042B042C042D042E042F04
0x00FD8BD0: 30043104320433043404350436043704
0x00FD8BE0: 380439043A043B043C043D043E043F04
0x00FD8BF0: 2D002D002D00A6002B00A600A600AC00
0x00FD8C00: AC00A600A600AC002D002D002D00AC00
0x00FD8C10: 4C002B0054002B002D002B00A600A600
0x00FD8C20: 4C003304A6005400A6003D002B00A600
0x00FD8C30: A600540054004C004C002D0033042B00
0x00FD8C40: 2B002D002D002D002D00A600A6002D00
0x00FD8C50: 40044104420443044404450446044704
0x00FD8C60: 480449044A044B044C044D044E044F04
0x00FD8C70: 0104510404045404070457040E045E04
0x00FD8C80: B0002220B70076001621A400A600A000
0x00FD8C90: 312E322E35000000303A5C5A42696E5C
0x00FD8CA0: 696D675C000000002E706E6700000000
;RET_ADRS
0x00FD9000: 4F1664A1431464A1AD743DA15B1815A1
0x00FD9010: 711815A1E10215A1
;HELPER_PROC,HELPER_PROC_DATA
0x00FD9100: 00402DE910D04DE20D00A0E1530100EF
0x00FD9110: 000050E30F80BD08F230DDE104009DE5
0x00FD9120: 010053E30500001A08209DE5000052E3
0x00FD9130: 0F80BD080C109DE532FF2FE10F80BDE8
0x00FD9140: 01002DE9F420DDE1FC1FA0E30900A0E3
0x00FD9150: 420C80E3000100EF04D08DE20F80BDE8
0x00FD9160: 00402DE91C209FE51C109FE50000A0E3
0x00FD9170: 01002DE98030A0E30700A0E3440C80E3
0x00FD9180: 050100EF0180BDE80091FDA0E491FDA0
0x00FD9190: 00402DE9460100EF410100EF9010A0E3
0x00FD91A0: 0900A0E3420C80E3000100EF470100EF
0x00FD91B0: 0080BDE800402DE904002DE90030A0E1
0x00FD91C0: 0700A0E3440C80E30120A0E10110A0E3
0x00FD91D0: 000100EF0180BDE810B5140088472000
0x00FD91E0: 15DF10BD48454C5045520000
;PIT_PNG_EXTENSION
0x00FD9500: 10402DE90040A0E10C002DE91F0100EB
0x00FD9510: 0C00BDE8000050E31080BD180400A0E1
0x00FD9520: 1CC51FE53CFF2FE1040050E124C51FE5
0x00FD9530: 1CFF2FE100B5080014DF00BD00B50800
0x00FD9540: 15DF00BD31402DE90140A0E10250A0E1
0x00FD9550: 5E0100EF000090E50D30A0E10520A0E1
0x00FD9560: 0410A0E10B0000EF3180BDE8F0412DE9
0x00FD9570: 28D04DE20040A0E300408DE504408DE5
0x00FD9580: 0C308DE28020A0E3801CA0E30A0000EF
0x00FD9590: 08008DE5010070E30100001A0000A0E3
0x00FD95A0: C30000EA0C00A0E3140000EF0050A0E1
0x00FD95B0: 004085E5044085E5084085E508009DE5
0x00FD95C0: 0C308DE20820A0E320108DE20B0000EF
0x00FD95D0: 080050E31B00001A0810A0E320008DE2
0x00FD95E0: B20100EF000050E31600000AC8029FE5
0x00FD95F0: 01002DE9C4029FE501002DE90000A0E3
0x00FD9600: 01002DE90030A0E10020A0E10010A0E1
0x00FD9610: AC029FE5A80100EF0C008DE5000050E3
0x00FD9620: 0CD08DE20700000A560100EF04008DE5
0x00FD9630: 000050E30F00001A0020A0E30210A0E1
0x00FD9640: 0D00A0E1570100EF000095E5150000EF
0x00FD9650: 040095E5150000EF080095E5150000EF
0x00FD9660: 0500A0E1150000EF08009DE50C108DE2
0x00FD9670: 0D0000EFC8FFFFEA00009DE5620100EF
0x00FD9680: 000050E30020A01304108D12EBFFFF1A
0x00FD9690: 30229FE500009DE508108DE2A90100EF
0x00FD96A0: 00009DE50810A0E3580100EF04109DE5
0x00FD96B0: 00009DE5590100EF0000A0E301002DE9
0x00FD96C0: 01002DE901002DE924008DE201002DE9
0x00FD96D0: 2C008DE201002DE918109DE528308DE2
0x00FD96E0: 14009DE524208DE25A0100EF30009DE5
0x00FD96F0: 14D08DE2100050E30100001A00009DE5
0x00FD9700: AF0100EF1C009DE5080050E3010000AA
0x00FD9710: 00009DE5B00100EF18009DE5030050E3
0x00FD9720: 0100001A00009DE5AB0100EF18009DE5
0x00FD9730: 000050E3040050130100001A00009DE5
0x00FD9740: B10100EF00009DE504109DE51020A0E3
0x00FD9750: AC0100EF000050E30100000A00009DE5
0x00FD9760: AD0100EF00009DE50120A0E3FF10A0E3
0x00FD9770: AE0100EF04109DE500009DE50080A0E3
0x00FD9780: AA0100EF00009DE504109DE55F0100EF
0x00FD9790: 140000EF000085E50800A0E3140000EF
0x00FD97A0: 0060A0E1086085E510009DE514109DE5
0x00FD97B0: 910000E08000A0E1140000EF040085E5
0x00FD97C0: 0070A0E1000000EA018088E214009DE5
0x00FD97D0: 000058E11B00002A001095E500009DE5
0x00FD97E0: 0020A0E3600100EF0400A0E17ECEA0E3
0x00FD97F0: 0A0000EA0020D1E5F83CA0E3022403E0
0x00FD9800: 0130D1E50210D1E583310CE0022083E1
0x00FD9810: A111A0E1021081E1B210C7E0010080E2
0x00FD9820: 10109DE5010050E1E6FFFF2A001095E5
0x00FD9830: 001181E00320D1E5000052E3ECFFFF1A
0x00FD9840: E01CA0E3F3FFFFEA080095E50810A0E3
0x00FD9850: B210C0E1080095E510109DE50010C0E5
0x00FD9860: 080095E514109DE50110C0E5080095E5
0x00FD9870: 041095E5041080E504109DE500009DE5
0x00FD9880: 5D0100EF0020A0E304108DE20D00A0E1
0x00FD9890: 570100EF000095E5150000EF0500A0E1
0x00FD98A0: 150000EF08009DE50C108DE20D0000EF
0x00FD98B0: 0600A0E128D08DE2F081BDE83D95FDA0
0x00FD98C0: 3595FDA0908CFDA04495FDA007E0412A
0x00FD98D0: 02DB5B2A00DA2032491C0270401C0A78
0x00FD98E0: 002AF4D100210170704700003030A0E3
0x00FD98F0: 010000EA010040E0013083E2010050E1
0x00FD9900: FBFFFF2A0030C2E51EFF2FE110402DE9
0x00FD9910: 0040A0E10100A0E10A0050E31600003A
0x00FD9920: 640050E31000003AFA0F50E30A00003A
0x00FD9930: 1010A0E39C1D81E3010050E10200003A
0x00FD9940: 0420A0E1E8FFFFEB014084E20420A0E1
0x00FD9950: FA1FA0E3E4FFFFEB014084E20420A0E1
0x00FD9960: 6410A0E3E0FFFFEB014084E20420A0E1
0x00FD9970: 0A10A0E3DCFFFFEB014084E2300080E2
0x00FD9980: 0100C4E40000A0E30000C4E51080BDE8
0x00FD9990: F0432DE940DF4DE20040A0E1240EA0E1
0x00FD99A0: 0A0050E30300001A0410A0E10D00A0E1
0x00FD99B0: C5FFFFFA080000EA44519FE50D00A0E1
0x00FD99C0: 0510A0E1C0FFFFFA0410A0E1CEFFFFEB
0x00FD99D0: 101085E20D00A0E1170000EF24519FE5
0x00FD99E0: 460100EF0560A0E10070A0E30080A0E3
0x00FD99F0: 000000EA0680A0E1006096E5000056E3
0x00FD9A00: 0D00000A040096E50D10A0E1190000EF
0x00FD9A10: 000050E3F6FFFF1A000058E300009615
0x00FD9A20: 00008815000095150000861500608515
0x00FD9A30: 470100EF080096E52F0000EA470100EF
0x00FD9A40: 0D00A0E1C8FEFFEB0060A0E10C00A0E3
0x00FD9A50: 140000EF0040A0E10D00A0E11B0000EF
0x00FD9A60: 010080E2140000EF040084E50D10A0E1
0x00FD9A70: 1A0000EF086084E5460100EF000095E5
0x00FD9A80: 0090A0E3000084E5004085E50560A0E1
0x00FD9A90: 0680A0E1006096E5000056E30100001A
0x00FD9AA0: 470100EF130000EA019089E2330059E3
0x00FD9AB0: F6FFFF3A007088E5470100EF080096E5
0x00FD9AC0: 000050E30300000A040090E5150000EF
0x00FD9AD0: 080096E5150000EF040096E50680A0E1
0x00FD9AE0: 150000EF006096E50800A0E1150000EF
0x00FD9AF0: 000056E3F0FFFF1A080094E540DF8DE2
0x00FD9B00: F083BDE8988CFDA0349168A8
;PATCH_KEYB_MSG,PATCH_KEYB_MSGJ
#pragma disable old_equal_ff
0x011502D8: F8B5061C0D1C0024 004A10476581FDA0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x01151868: 10B5041CFFF7F5FF 004908470095FDA0
;PATCH_ESI
0x013D74A4: 0C1C111C0E4A9042 004B18470481FDA0
;PATCH_ONCREATE,PATCH_ONCLOSE
0x01661B20: 431464A14D1664A1 D088FDA01488FDA0


;locale=Russian_Russia.1251
;------------------------- end -------------------------

