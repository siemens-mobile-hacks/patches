;SL65v53
;Elfpack 2.2
;Elfpack 2.2
;(c) Rst7/CBSIE, BoBa
;Version: 
;! доступна новая версия патча, https://patches.kibab.com/patches/details.php5?id=8564
;PatchID: 7372
;Details: https://patches.kibab.com/patches/details.php5?id=7372
/*
No English doc at the moment! :(
English: Elfpack 2.2
*/

;Library


;07.04.2007

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 00: __arm void loopback0();
0004: 0xA0002070   ; 01: __arm void loopback1();
0008: 0xA0002070   ; 02: __arm void loopback2();
000C: 0xA0002070   ; 03: __arm void loopback3();
0010: 0xA0002070   ; 04: __arm void loopback4();
0014: 0xA082BE21   ; 05: DecToHex
0018: 0xA122CD24   ; 06: GetAkku
001C: 0xA13D7369   ; 07: GetLP
0020: 0xA122DBB8   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1249D98   ; 09: SwitchPhoneOff
0028: 0xA121C45C   ; 0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;002C: 0x ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;0030: 0x ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA121C3B0   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA121C3E0   ; 0E: fflush
003C: 0xA121C410   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA121C240   ; 10: mkdir
0044: 0xA0FCF201   ; 11: OpenReadCloseFile
0048: 0xA121C15C   ; 12: GetFileAttrib
004C: 0xA121C2D8   ; 13: SetFileAttrib
0050: 0xA0820F98   ; 14: malloc(unsigned int size)
0054: 0xA0821000   ; 15: mfree(void *)
0058: 0xA15496C5   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA154A94D   ; 17: strcat(char *,const char *)
0060: 0xA154A96D   ; 18: strchr(const char *,int)
0064: 0xA154A990   ; 19: strcmp(const char *,const char *)
0068: 0xA154AA2D   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA154AAAD   ; 1B: strlen(char *)
0070: 0xA0BFCEE9   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0BFCE9D   ; 1D: wsInsertChar
0078: 0xA1151869   ; 1E: GetPITaddr
007C: 0xA164A017   ; 1F: DrawMainScreen

0080: 0xA164CDB5   ; 20: DrawScreenSaver
0084: 0xA115199D   ; 21: GetImgHeight
0088: 0xA11519AD   ; 22: GetImgWidth
008C: 0xA1642E61   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA1148A4D   ; 24: DrawImage2
0094: 0xA1642E3B   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA114898D   ; 26: DrawImgBW
009C: 0xA164283F   ; 27: AddIconToIconbar
00A0: 0xA122EC20   ; 28: getEELiteMaxID
00A4: 0xA121AE7C   ; 29: getEEFullMaxID
00A8: 0xA122EABC   ; 2A: GetEELiteBlockAddress
00AC: 0xA122EBC4   ; 2B: getEELiteBlockSizeVersion
00B0: 0xA121AAC0   ; 2C: getEEFullBlockSizeVersion
00B4: 0xA122EC54   ; 2D: StartWriteEELiteBlock
00B8: 0xA122ECD0   ; 2E: FinishWriteEELiteBlock
00BC: 0xA122EC2C   ; 2F: DeleteEELiteBlock

00C0: 0xA122EC8C   ; 30: WriteEELiteBlock
00C4: 0xA154ABF5   ; 31: strrchr
00C8: 0xA095221C   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0948400   ; 33: PlaySound2
00D0: 0xA0937920   ; 34: PlaySoundLoop
00D4: 0xA0B75AB3   ; 35: AlarmClockRing
00D8: 0xA0B106CD   ; 36: GetATCmdString
00DC: 0xA0B77BAF   ; 37: OriginalATCGSN
00E0: 0xA0B10069   ; 38: PostAtCommand
00E4: 0xA0B11787   ; 39: SendATAnswerStr
00E8: 0xA0BC0FBD   ; 3A: mfree_high
00EC: 0xA154A0C9   ; 3B: MemChr
00F0: 0xA121C4DC   ; 3C: SetFileSize
00F4: 0xA0A2CB31   ; 3D: editOrNewTXTModule
00F8: 0xA0B0EB59   ; 3E: LoadProcesses
00FC: 0xA11496B1   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA08E4277   ; 40: GetVibraStatus
0104: 0xA0B4C223   ; 41: GetProvider
0108: 0xA164D4E1   ; 42: IsScreenSaver
010C: 0xA1150A2F   ; 43: IsUnlocked
0110: 0xA0B6FAF9   ; 44: TempLigntOn
0114: 0xA0967330   ; 45: GetWavLen
0118: 0xA164C99D   ; 46: HasNewSMS
011C: 0xA164BA21   ; 47: HasFlashSMS
0120: 0xA0A2EBC3   ; 48: ReadNewSMS
0124: 0xA164851B   ; 49: ReadFlashSMS
0128: 0xA094A878   ; 4A: PlayFile
012C: 0xA0C3C5A8   ; 4B: StartMidlet
0130: 0xA0B487DD   ; 4C: GetMissedCallsCount
0134: 0xA0828294   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA113BCF7   ; 4E: ShowMsgInR1_3
013C: 0xA113BD07   ; 4F: ShowMsgInR1_4

0140: 0xA113BD6F   ; 50: ShowMsgInR1_7
0144: 0xA133945D   ; 51: GetNetAccessMode
0148: 0xA122E264   ; 52: GetIlluminationDataTable
014C: 0xA154A0ED   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA082BE5D   ; 54: StrToInt
0154: 0xA08E428D   ; 55: SwitchVibraOnOff
0158: 0xA0FCF421   ; 56: PlayVibra
015C: 0xA08283A0   ; 57: IsCallAfterTimerStillRunning
0160: 0xA0836F4C   ; 58: ClearMemory
0164: 0xA154A5B8   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA115035B   ; 5A: KeypressOn
016C: 0xA1150419   ; 5B: KeypressOff
0170: 0xA0905001   ; 5C: GetCPUClock()
0174: 0xA090503B   ; 5D: GetCPULoad()
0178: 0xA0905009   ; 5E: GetMMIMemUsed
017C: 0xA082100C   ; 5F: GetNonPermMemAvail

0180: 0xA08E4433   ; 60: ShowMainMenu
0184: 0xA08E927F   ; 61: ShowNativeMenu
0188: 0xA0002070   ; 62: SetVibraStatus
018C: 0xA1646843   ; 63: MS_Wallpaper_Flush
0190: 0xA113C651   ; 64: TriggerUpdate
0194: 0xA0B49F05   ; 65: EndCall
0198: 0xA0B1A8FB   ; 66: EndCallBusy
019C: 0xA164228D   ; 67: IsDirectCallActive
01A0: 0xA163F5A3   ; 68: GetScreenSaverRAM
01A4: 0xA082949C   ; 69: LockSched(void)
01A8: 0xA0829524   ; 6A: UnlockSched(void)
01AC: 0xA121C194   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA121C1D0   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA121C11C   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA130755B   ; 6E: IsCalling
01BC: 0xA16470FF   ; 6F: RefreshGPRSTraffic

01C0: 0xA164711D   ; 70: GetGPRSTrafficPointer
01C4: 0xA11473E3   ; 71: DrawRoundRect
01C8: 0xA0B44983   ; 72: SetCurrentSecondOfCall
01CC: 0xA1307d73   ; 73: GetTypeOfCall
01D0: 0xA08E49B7   ; 74: GetFunctionPointer
01D4: 0xA114DC95   ; 75: StoreXYWHtoRECT
01D8: 0xA1168635   ; 76: SetWindowText
01DC: 0xA1165E13   ; 77: set2color_byPaletteAdr
01E0: 0xA0B27D6F   ; 78: GetTimeFormat
01E4: 0xA114D061   ; 79: DrawObject
01E8: 0xA1165EA9   ; 7A: ClearWindowBuffer
01EC: 0xA08CC751   ; 7B: GetProfileFilter
01F0: 0xA1235F58   ; 7C: SetVibration(unsigned int power)
01F4: 0xA1306F75   ; 7D: IsIncognitoCall
01F8: 0xA1313761   ; 7E: Rand
01FC: 0xA0002070   ; 7F: IsPlayerOn

0200: 0xA0A8975D   ; 80: ShowCallList(int list, int zero)
0204: 0xA154A848   ; 81: HexToDec
0208: 0xA0002070   ; 82: GetCurrentTrackFilename
020C: 0xA093B018   ; 83: GetPathOfFoundFile
0210: 0xA121C310   ; 84: GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0825D79   ; 85: StrCmpNoCase
0218: 0xA121A9E8   ; 86: ReadEEPROMData
021C: 0xA121AB2C   ; 87: WriteEEPROMData
0220: 0xA0002070   ; 88: GetAccessoryType
0224: 0xA0002070   ; 89: GetLangMesIntoWS
0228: 0xA121C0AC   ; 8A: GetFreeFlexSpace
022C: 0xA121C670   ; 8B: GetTotalFlexSpace
0230: 0xA092F6E0   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0002070   ; 8D: GetProfileName
0238: 0xA121C270   ; 8E: fmove(const char * SourceFileName, const char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA121C2A8   ; 8F: rmdir(const char * cDirectory, unsigned int *ErrorNumber)

0240: 0xA121C54C   ; 90: truncate(int FileHandler, int length, int *errornumber)
0244: 0xA121C210   ; 91: isdir(const char * cDirectory, unsigned int *ErrorNumber)
0248: 0xA121C310   ; 92: int stat(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
024C: 0xA1249DA4   ; 93: RebootPhone 
0250: 0xA092F7A4   ; 94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;254: 0x           ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);
;258:              ; 96: 
;25C:              ; 97: 
;260:              ; 98: 
0264: 0xA094A9A0   ; 99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA123664C   ; 9A: ;__arm int ChangeVolume(unsigned char Volume)
026C: 0xA8787D14   ; 9B: Audio params addr
;270:              ; 9C: 
;274:              ; 9D: 
;278:              ; 9E: 
027C: 0xA11472AF   ; 9F: DrawRect

0280: 0xA0BFC463   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0825E59   ; A1: wstrcpy
0288: 0xA0BFC9E7   ; A2: Unicode_GetCharByPosition
028C: 0xA121B8FC   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0BFCC5B   ; A4: AllocWS_2(int len)
0294: 0xA0BFC5A5   ; A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA16470C5   ; A6: __arm void ResetGPRSTraffic();
029C: 0xA1646F11   ; A7: char IsGPRSEnabled();
02A0: 0xA1315A95   ; A8: char IsGPRSConnected();
02A4: 0xA1151039   ; A9: __arm void KbdLock()              
02A8: 0xA0FCF001   ; AA: OpenWriteCloseFile
02AC: 0xA0002070   ; AB: __arm void loopback171();
02B0: 0xA0FCF1B1   ; AC: DrawText
02B4: 0xA0FCF0A1   ; AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; AE: StrUni2Ansi
02BC: 0xA0FCF051   ; AF: Hex2Int

02C0: 0xA0FCF351   ; B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ; B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; B2: GetBuildCanvas
02CC: 0xA0FCF301   ; B3: Seconds2iTime
02D0: 0xA0B26EF3   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA08257CF   ; B5: GetWeek(TDate*)
02D8: 0xA08CC115   ; B6: GetProfile()
02DC: 0xA08CBFE3   ; B7: SetProfile(char)
02E0: 0xA154A72C   ; B8: dwMODdw
02E4: 0xA1150CAF   ; B9: KbdUnlock
02E8: 0xA0820FA4   ; BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA154A714   ; BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0837018   ; BC: __arm int divide(int divisor, int dividend);
02F4: 0xA154A804   ; 0BD: __arm int DivBy10(int divident);

02F8: 0xA0FC0C91   ; BE: RunScaner (MPv14)
02FC: 0xA0801651   ; BF: SpellTime

0300: 0xA0FC7601   ; C0: MiniGPS
0304: 0xA0FC0C51   ; C1: RunDispatcher
0308: 0xA0FC12A1   ; C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; C3: ProcessFiles
0310: 0xA0FC0C01   ; C4: GetBuffer
0314: 0xA0002070   ; C5: PIT_Manager_Core
0318: 0xA122B1B4   ; C6: GetAkkuCapacity();
031C: 0xA0002070   ; C7: CallLibFunByNumber
0320: 0xA86BA6B4   ; C8: RamCap
0324: 0xA86BA6B6   ; C9: RamLS
0328: 0xA86C6C58   ; CA: RamNet
032C: 0xA86C6C5E   ; CB: RamNetRX
0330: 0xA86D4214   ; CC: RamMissedCalls * lg3
0334: 0xA86D9E2C   ; CD: RamMissedSMS * lg3

0338: 0x00000000   ; CE: RamDateTime
033C: 0xA86D2020   ; CF: RamAlarm
0340: 0xA86FFE20   ; D0: RamAccPoint
0344: 0xA868C39C   ; D1: RamScreensaver
0348: 0x00000000   ; D2: RamAutoTime
034C: 0xA868C390   ; D3: RamStby
0350: 0xA83D4430   ; D4: RamMissedMes * lg3
0354: 0xA86A1A98   ; D5: RamIsLocked
0358: 0xA868EFB0   ; D6: RamNetOnline
035C: 0xA86DC584   ; D7: RamScreenBrightness
0360: 0xA86903B9   ; D8: RamMenuAnywhere
0364: 0xA86FFE8C   ; D9: RamShutdownMode
0368: 0xA86FFE8C   ; DA: RamIsShutdown
036C: 0xA868C3D0   ; DB: RamMainscreenAccuIcon
0370: 0xA87623F4   ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA86C4A7C   ; DE: RamIsSimPresent
037C: 0xA86A1998   ; DF: RamPressedKey

0380: 0xA8699568   ; E0: RamScreenBuffer
;384:              ; E1: 
0388: 0xA86AEB7C   ; E2: RamKeyBuffer 
038C: 0xA86C7D54   ; E3: RamProfileNum
0390: 0xA8000300   ; E4: FreeRAM
0394: 0x00001297   ; E5: LP_MonthsShort
0398: 0x00000470   ; E6: Pic_Big0
039C: 0x000003F7   ; E7: Pic_Little0
03A0: 0x0000047E   ; E8: Pic_Extra
03A4: 0x000004CC   ; E9: Pic_Profiles
03A8: 0x00000501   ; EA: Pic_Vibra
03AC: 0x000003B3   ; EB: Pic_Call
03B0: 0x000004D4   ; EC: Pic_AdvNet
03B4: 0x0000118B   ; ED: LP_MonthsLong
03B8: 0x00000400   ; EE: LP_Weekdays
03BC: 0x00000503   ; EF: Pic_Calendar

03C0: 0x000004E2   ; F0: Pic_AccuGraph
03C4: 0xA1649E33   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
03D0: 0xA154C3C4   ; F4: size_t strcspn(const char *s1, const char *s2)
;3D4:              ; F5: 
;3D8:              ; F6: 
;3DC:              ; F7: 
03E0: 0xA0FD0050   ; F8: Additional_PIT_address
03E4: 0x000004CC   ; F9: Additional_PIT_start
03E8: 0x0000052F   ; FA: Additional_PIT_end
;3EC:              ; FB: 
03F0: 0xA0FC0A00   ; FC: PictureRelocationTable
03F4: 0x0000F000   ; FD: PictureRelocationBase
03F8: 0x00001E1E   ; FE: NextPictureMagic
;3FC:              ; FF: 

0400: 0xA0827B04   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826AA0   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA08271A0   ; 102: GBS_AcceptMessage(void)
040C: 0xA0826EC8   ; 103: GBS_ClearMessage(void)
0410: 0xA0827098   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0827F74   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA868A82C   ; 106: CSM_root()
041C: 0xA1137E53   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA1137E65   ; 108: FindCSMbyID(int id)
0424: 0xA1137F0F   ; 109: DoIDLE(void)
0428: 0x00000000   ; 10A: GetConfig(unsigned int id)
042C: 0x00000000   ; 810B: GetMinAdrScan()
0430: 0x00000000   ; 810C: GetMaxAdrScan()
0434: 0x00000000   ; 810D: GetCI()
0438: 0x00000000   ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA164B4D9   ; 10F: freeUSSD()

0440: 0xA0825E59   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA164B515   ; 111: GetTypeUSSD()
0448: 0xA164B525   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA154AA7D   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA154AAF9   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA154AB29   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA154AB79   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA154ABF5   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA154AC0D   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA154AC89   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA154AD05   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA1549671   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA154A0ED   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA154A570   ; 11D: zeromem(void *dest,int n)
0478: 0xA154A5B8   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0BFCD7B   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0BFCD9D   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0BFCDC1   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0BFCE55   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0BFC6BF   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA0BFC463   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0BFCC5B   ; 125: AllocWS(int len)
0498: 0xA0BFD04F   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0BFCBF3   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0BFCC13   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0BFC5A5   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA114D061   ; 12A: DrawObject_2(DRWOBJ *)
;4AC: 0x           ; 12B: AddKeybMsgHook(void *proc)
;4B0: 0x           ; 12C: AddKeybMsgHook_end(void *proc)
;4B4: 0x           ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA11496B1   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA11496D5   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA11496E5   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA1149703   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA154A670   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA114DC95   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA114DCAB   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA113C4F7   ; 135: IsGuiOnTop(int id)
04D8: 0xA113C5D9   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA113C5E9   ; 137: CreateGUI(void *gui)
04E0: 0xA113C5F7   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA113C631   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA113C641   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA113C651   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA113C65F   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA113C66D   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA113C67D   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA113C70F   ; 13F: DirectRedrawGUI(void)

0500: 0xA113C71B   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA113C7AB   ; 141: PendedRedrawGUI(void)
0508: 0xA1146CA9   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0828330   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829A08   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243BC   ; 145: GBS_GetCurCepid(void)
0518: 0xA082949C   ; 146: LockSched_2(void)
051C: 0xA0829524   ; 147: UnlockSched_2(void)
0520: 0xA113BCD9   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA1168635   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA1165EA9   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA1165E13   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA1168685   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA113C505   ; 14D: GetTopGUI(void)
0538: 0xA1153FDB   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA1154005   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA11473E3   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA1148963   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA113B891   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0826964   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: KillGBSproc(int cepid)

0554: 0xA1529CC1   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA1529095   ; 156: png_create_info_struct(png_structp png_ptr) 08B5002800D108BD01214902
055C: 0xA152AAF9   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr) F7B582B00298002600250024002801D002980468
0560: 0xA1528F69   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes) B0B5051C0C1C082903DDECA1281C
0564: 0xA1529DFF   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15296E5   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1529A87   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA152A6EF   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA152A731   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA1529385   ; 15E: __arm png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA15295FB   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA152A287   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)

0584: 0x00000000   ;-161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA161A664   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA1138F65   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA1138441   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA113874F   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA11390FD   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA114DFB1   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA116E689   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA116E62D   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA116E637   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA121C348   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA121B7DC   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0BB981F   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0B51297   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0B51A8D   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA0B17A01   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)

;Handmaded functions
;05C4: ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05С8: ;172 __arm void REDRAW(void);

05CC: 0xA1286655   ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA1286927   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA12867D9   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA1286AA1   ; 176: __thumb int closesocket(int socket);
05DC: 0xA1286A1D   ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA1286B4B   ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA1286E27   ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA12A7819   ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA12A7825   ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA875B2F0   ; 817C: __arm int socklasterr(void);
05F4: 0xA113C68D   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA113C69D   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA113C6A9   ; 17F: __thumb void DisableIDLETMR(void)
0600: 0xA116E55B   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA116E4C5   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA116E501   ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA116E50B   ; 183: __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA1138787   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA082769C   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA1284271   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA1284CA1   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *);

0620: 0x00000082   ; 8188: __adr int ScreenW(void);
0624: 0x00000082   ; 8189: __adr int ScreenH(void);
0628: 0x00000016   ; 818A: __adr int HeaderH(void);
062C: 0x00000016   ; 818B: __adr int SoftkeyH(void);

0630: 0xA08298B4   ; 18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0CCB9A8   ; 18D: __arm int available0(int sock);
0638: 0xA1316341   ; 18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA113F0DF   ; 18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA0828F64   ; 190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0829090   ; 191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA0829210   ; 192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA0829268   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA08292C4   ; 194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA11405A1   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA113C785   ; 196: __thumb void RefreshGUI(void);
065C: 0xA11405F3   ; 197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA1140701   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA1140573   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA113FEC5   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA116E515   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);

;Handmaded function
;0670: ; 19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);

0674: 0xA1233F78   ; 19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA1233F40   ; 19E: __arm void StartCpuUsageCount(void);
067C: 0xA08751A9   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA08752DF   ; 1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA087611B   ; 1A1: __thumb int inflateEnd(z_streamp strm);
0688: 0xA08C6249   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA0C37620   ; 1A3: __arm int GetCurrentGPRSProfile(void);
0690: 0xA0C375C4   ; 1A4: __arm int GetDisconnectTime(void);
0694: 0xA08C6273   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA08283A0   ; 1A6: __arm int IsTimerProc(GBSTMR *);
069C: 0xA0B1BAFB   ; 1A7:  char* Get_NC_CC();

06A0: 0xA1529B85   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA152AB97   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA152A24F   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA152ACBF   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA15295E9   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA152ACDB   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA152BA31   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA152AC95   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA152B9C7   ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA152ACE9   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA1528FC9   ; 1B2: __arm int png_check_sig(png_bytep sig, int num);

06CC: 0xA1149FC3   ; 1B3: __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA11472AF   ; 1B4: __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000   ; 81B5: __adr int isnewSGold(void);
06D8: 0xA1287347   ; 1B6: __arm int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA128C4F9   ; 1B7: __arm unsigned int str2ip(const char *);

;Handmaded function
;06E0: 0x ; 81B8: __adr void *EXT_TOP(void);
;06E4: 0x ; 81B9: __adr void *PNG_TOP(void);
;06E8: 0x ; 81BA: __adr void *LIB_TOP(void);
;06EC: 0x ; 81BB: __adr void *DATA_N_SFB(void);

06F0: 0xA1514E7F   ; 1BC: __arm void SHA1_Init(SHA_CTX *c)
06F4: 0xA1514B63   ; 1BD: __arm void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA1514D5F   ; 1BE: __arm void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA140B549   ; 1BF: __arm RSA * RSA_new_method(RSA_METHOD *method)
0700: 0xA140B5D7   ; 1C0: __arm void RSA_free (RSA *r)
0704: 0xA140B7A3   ; 1C1: __arm int RSA_sign(int type, char *m, unsigned int m_len,char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA1408DA3   ; 1C2: __arm BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)

070C: 0xA113D6FF   ; 1C3: __arm void SetMenuItemCount(void *gui,int n)
0710: 0xA113D677   ; 1C4: __arm void SetCursorToMenuItem(void *gui,int n)
0714: 0xA11516A3   ; 1C5: __arm int GetFontYSIZE(int font);
0718: 0xA116E4ED   ; 1C6: __arm void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA116E4F7   ; 1C7: __arm int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA11392B5   ; 1C8: __arm EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA11383DB   ; 1C9: __arm void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA11383CF   ; 1CA: __arm void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA11383C3   ; 1CB: __arm void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA11383AD   ; 1CC: __arm void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA1138395   ; 1CD: __arm void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA113847D   ; 1CE: __arm void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA092EE10   ; 1CF: __swi __arm REGEXPLEXT *get_regextpnt_by_uid(int uid);

0740: 0xA092EF90   ; 1D0: __swi __arm int GetExtUid_ws(WSHDR * ext);
0744: 0xA116E653   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA116E65D   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA116E53D   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA116E547   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA123D1B4   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA152ACCD   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA152BA93   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA116E583   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA116E597   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);

0768: 0xA0A2C1D3   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA87B5964   ; 81DB: __arm PDU *IncommingPDU(void);
0770: 0xA0BFC949   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA0BFC96B   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA116E623   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA116E6B9   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)
0780: 0xA1141645   ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA114D14D   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA113B303   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA113B1EB   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA113A92D   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA116E749   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA113F54F   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
07AC: 0xA868B6FE   ; 1EB: __arm char *RAM_IMSI(void);

;07E8:0000000000   ; 1FA: char *RamVolumeStep()
07EC: 0xA86C39A8   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA86A1994   ; 1FC: char RamIsMainScreen()
;7F4: 0000000000   ; 1FD: char IsNumberTyping()

//0xA0941008 ;  __arm void GetFileNameFromFullFileName(WSHDR * dest, WSHDR * fullname);
//0xA09410C0 ;  __arm void GetFolderNameFromFullFileName(WSHDR * dest, WSHDR * fullname);
//0xA092F428 ;  __arm int GetFileTypeRegNFromFullFileName(WSHDR * fullname);
//0xA092EF90 ;  __arm int GetFileTypeRegN(WSHDR * extension);
//0xA0BFCE7D ;  __thumb void wstrcopybypos(WSHDR *destws,WSHDR *sourcews,__int16 position,__int16 maxlen)
//0xA0BFC96B ;  __thumb short wstrrchr(WSHDR *,unsigned short maxlen, unsigned short symbol)
//0xA0BFC6EB ;  __thumb int wstrcmp ((WSHDR *,WSHDR *);
//0xA08751A9 ;  __thumb int ZEXPORT inflateInit2_ OF((z_streamp strm, int  windowBits, const char *version, int stream_size));
//0xA08752DF ;  __thumb int ZEXPORT inflate OF((z_streamp strm, int flush));
//0xA087611B ;  __thumb int ZEXPORT inflateEnd OF((z_streamp strm));
#pragma disable old_equal_ff
+0
;ElfLoader+ESI+RunElfsByExtention+FSWI

;FSWI_PATCH1
0x000925E0: 1A0000EA DCF09FE5
;FSWI_PATCH3,FSWI_PATCH2
0x000926C3: A100000000 002481FDA0
;PATCH_GET_REGEXT1
0x0092EE30: 81C282E0 ACA41AEB
;PATCH_GET_REGEXT2
0x0092EE44: 810282E0 ACA41AEB
;PATCH_GET_EXT
0x0092F020: 857288E0 2BA41AEB
;REG_FILE
0x0092F648: F0452DE920608DE2 04F01FE51882FDA0
;PATCH_REGEXPL
0x0092F730: C4FFFFEB 76A21AEB
;PATCH_PROPERTY2
0x00969A7C: 070092E8 71B919EB
;PATCH_BIG_ICON
0x0096A45C: 010080E2 90B719EB
;PATCH_PROPERTY1
0x00997974: 0400A0E1 AF0119EB
;PATCH_NO_BROWSE_TXT
0x00B7BC20: 211C 16E0
;SWILIB_FUNC00B,SWILIB_FUNC00C
#pragma enable old_equal_ff
0x00FD402C: C584FDA0
0x00FD4030: 0185FDA0
;SWILIB_FUNC095
0x00FD4254: D882FDA0
;SWILIB_FUNC12B_12D
0x00FD44AC: 8083FDA0
0x00FD44B0: E483FDA03484FDA0
;SWILIB_FUNC171,SWILIB_FUNC172
0x00FD45C4: D488FDA0B088FDA0
;SWILIB_FUNC19C
0x00FD4670: F988FDA0
;SWILIB_FUNC1B8_1BB
0x00FD46E0: 309168A8349168A82C9168A83C9168A8
;CODE,DATA_C
0x00FD8000: 11FF2FE1203EA0E10A0053E31040BD08
0x00FD8010: E802000A14309FE5003093E50140A0E1
0x00FD8020: 0210A0E108209FE5020050E113FF2FE1
0x00FD8030: 0895FDA0102700000400A0E10140A0E3
0x00FD8040: 184080E51EFF2FE1180095E5000050E3
0x00FD8050: 070092E81EFF2F010E0300EB0000A0E3
0x00FD8060: 180085E58DDF8DE2F080BDE810402DE9
0x00FD8070: 0040A0E1960400EB000050E31080BD18
0x00FD8080: 0400A0E114C09FE500C09CE53CFF2FE1
0x00FD8090: 040050E108C09FE500C09CE51CFF2FE1
0x00FD80A0: 0C95FDA01095FDA07068718800F0E8F9
0x00FD80B0: 022809D0311CE86A044A126890470028
0x00FD80C0: 02D1034800680047F8BD00001895FDA0
0x00FD80D0: 1495FDA040709FE5007097E52480A0E3
0x00FD80E0: 987527E01EFF2FE12CC09FE500C09CE5
0x00FD80F0: 2420A0E392C12CE01EFF2FE118009FE5
0x00FD8100: 000090E52420A0E3920120E01EFF2FE1
0x00FD8110: 105094E510508DE53E0000EA309168A8
0x00FD8120: 1EFF2FE100109DE5200011E3192F8F02
0x00FD8130: 0400000AC70050E3B200DE0014E08D05
0x00FD8140: 01E08EE251208FE250109FE5001091E5
0x00FD8150: 000051E348109F05803CC0E3400D53E3
0x00FD8160: 0900008A800C10E300402D090040FD08
0x00FD8170: 03C191E704C08D150300001A01007CE3
0x00FD8180: 20209F0504008D0514208DE50100BDE8
0x00FD8190: 00F069E10F80FDE81CFF2FE160470000
0x00FD81A0: 2C9168A80040FDA0E48CFDA004E02DE5
0x00FD81B0: 00200FE1000000EF00100FE1C01081E3
0x00FD81C0: 01F021E10000A0E10000A0E10000A0E1
0x00FD81D0: 7AFF17EE0000A0E10000A0E10000A0E1
0x00FD81E0: FAFFFF1A0000A0E39A0F07EE0000A0E1
0x00FD81F0: 0000A0E10000A0E10000A0E1150F07EE
0x00FD8200: 0000A0E10000A0E10000A0E10000A0E1
0x00FD8210: 02F021E104F09DE4F74F2DE930809DE5
0x00FD8220: 34909DE538A09DE53CB09DE540409DE5
0x00FD8230: 0370A0E1780200EB0050A0E1460100EF
0x00FD8240: 0060A0E3006085E5047085E504009DE5
0x00FD8250: 080085E50C80C5E508009DE5BE00C5E1
0x00FD8260: 1090C5E500009DE5140085E518A085E5
0x00FD8270: 1CB085E50800A0E3140000EF001097E5
0x00FD8280: 212EA0E10A0052E30010940501108112
0x00FD8290: 001080E5046080E5200085E5470100EF
0x00FD82A0: F78FBDE800402DE90810A0E1202EA0E1
0x00FD82B0: 0A0052E3010080120080BD180100A0E1
0x00FD82C0: CF0100EF000050E30080BD08200090E5
0x00FD82D0: 000090E50080BDE8FF412DE994509FE5
0x00FD82E0: 0040A0E190009FE50060A0E3007090E5
0x00FD82F0: 000000EA016086E2000095E5000056E1
0x00FD8300: FF81BD082400A0E3907628E0040094E5
0x00FD8310: 081098E5010050E1F5FFFF1A140098E5
0x00FD8320: 0F20A0E30D10A0E1A30000EF001094E5
0x00FD8330: 0D00A0E1190000EF000050E3ECFFFF1A
0x00FD8340: 140098E5290100EF200098E5150000EF
0x00FD8350: 000095E52410A0E3010040E2000085E5
0x00FD8360: 060040E0910002E0241088E20800A0E1
0x00FD8370: 1E0100EFFF81BDE8249168A8309168A8
0x00FD8380: 70402DE90040B0E10100001A0000A0E3
0x00FD8390: 7080BDE824519FE50C00A0E3140000EF
0x00FD83A0: 0060B0E1F8FFFF0A460100EF0000A0E3
0x00FD83B0: 000086E5044086E5158000EF080086E5
0x00FD83C0: 000000EA0050A0E1000095E5000050E3
0x00FD83D0: FBFFFF1A006085E5470100EF0100A0E3
0x00FD83E0: 7080BDE8F0402DE90040B0E10500000A
0x00FD83F0: C8509FE50C00A0E3006095E5140000EF
0x00FD8400: 0070B0E10100001A0000A0E3F080BDE8
0x00FD8410: 460100EF006087E5044087E5158000EF
0x00FD8420: 080087E5007085E5470100EF0100A0E3
0x00FD8430: F080BDE830402DE980409FE50450A0E1
0x00FD8440: 000000EA0540A0E1005095E5000055E3
0x00FD8450: 3080BD08041095E5000051E1F8FFFF1A
0x00FD8460: 460100EF000095E5000084E5470100EF
0x00FD8470: 081095E50500A0E131FF2FE13080BDE8
0x00FD8480: E1B50F4F0D00002600E001263F68002F
0x00FD8490: 14D07A681000F9D00098290090470028
0x00FD84A0: F4D00128F1D0022800D1E8BD0328EDD1
0x00FD84B0: 012E01D10220E8BD0020E8BD3000E8BD
0x00FD84C0: 289168A8FBB51500002403E00199AD1B
0x00FD84D0: 08180190002D0ED08026F600B54200DA
0x00FD84E0: 2E000098054F029B01993F683200B847
0x00FD84F0: 2418B042EAD02000FEBDC0461C95FDA0
0x00FD8500: FBB51500002403E00199AD1B08180190
0x00FD8510: 002D0ED08026F600B54200DA2E000098
0x00FD8520: 054F029B01993F683200B8472418B042
0x00FD8530: EAD02000FEBDC0462095FDA000402DE9
0x00FD8540: 1D0100EF0080BDE87FB5FFB00025ED43
0x00FD8550: 0595642166A8FFF7F2EF7F9800246B46
0x00FD8560: 802211020ADF0190002801D528003FE1
0x00FD8570: 6B46342209A90BDF342805D001986946
0x00FD8580: 0DDF0120C04333E109989B49884204D0
0x00FD8590: 019869460DDF0220F4E709A8808D0B28
0x00FD85A0: 02D30820C04323E1029410E028680128
0x00FD85B0: 0AD1A8680599884200D2059069694018
0x00FD85C0: 844201D2A86844180298401C02900298
0x00FD85D0: 09A9898D884229DA08A801B411980399
0x00FD85E0: 0AAD6D8D01AB00226943411802980FDF
0x00FD85F0: 1199039A0AAB5B8D01B05A4389188842
0x00FD8600: 04D0019869460DDF0320BBE7029816A9
0x00FD8610: 40010D1801986B46202229000BDF2028
0x00FD8620: C4D0019869460DDF0420BBE70598251A
0x00FD8630: 280014DF040004D1019869460DDF0D20
0x00FD8640: A0E72900FFF77AEF002054E003980068
0x00FD8650: 012802D0022817D0B4E003980269002A
0x00FD8660: 47D0806805996B46401A211801980BDF
0x00FD8670: 0399096988423CD0019869460DDF2000
0x00FD8680: 15DF0A20C043B3E00398006914DF0490
0x00FD8690: 002806D1019869460DDF200015DF0620
0x00FD86A0: 70E703980499026901986B460BDF0399
0x00FD86B0: 0969884208D0019869460DDF049815DF
0x00FD86C0: 200015DF07206DE7002066AB05E0192A
0x00FD86D0: 02DA496892009950401C049AC1005118
0x00FD86E0: 0A68002AF3D17899002000292FD10498
0x00FD86F0: 15DF0298401C02900598414207910298
0x00FD8700: 09A9898D884264DA400116A908180390
0x00FD8710: 684601B4049801AB4168029800220FDF
0x00FD8720: 0499496801B0884290D0019869460DDF
0x00FD8730: 200015DF052025E7049DEB189A18059B
0x00FD8740: 5218116862581219D21A6250401C789A
0x00FD8750: C1009142CBD20399779B8968049D4A42
0x00FD8760: C100AD186D18ED186D682D062D0E0695
0x00FD8770: FF2DEBD0FD2DDFD0079D069E6519002E
0x00FD8780: E4D0022E02D0172E09D012E0049EF318
0x00FD8790: 9A18521811686A5812196A50D6E7049E
0x00FD87A0: F3189A18059B521811686A581219D21A
0x00FD87B0: F3E7019869460DDF200015DF049815DF
0x00FD87C0: 0C205FE7019869460DDF200015DF0B20
0x00FD87D0: D8E6019869460DDF00F0AAFA079D0F9E
0x00FD87E0: 829B819A80997F98A4196419A0470020
0x00FD87F0: 7FB004B070BDC0467F454C4610B5A0B0
0x00FD8800: 694614007E22A3DF0023002221006846
0x00FD8810: FFF79AFE002801D0002000E0012020B0
0x00FD8820: 10BD00000F402DE90D00A0E1530100EF
0x00FD8830: 000050E30F80BD08F230DDE104009DE5
0x00FD8840: 010053E30500001A08209DE5000052E3
0x00FD8850: 0F80BD080C109DE532FF2FE10F80BDE8
0x00FD8860: 01002DE9F420DDE1FC1FA0E30900A0E3
0x00FD8870: 420C80E3000100EF04D08DE20F80BDE8
0x00FD8880: 00402DE91C209FE51C109FE50000A0E3
0x00FD8890: 01002DE98030A0E30700A0E3440C80E3
0x00FD88A0: 050100EF0180BDE82488FDA01C96FDA0
0x00FD88B0: 00402DE9460100EF410100EF9010A0E3
0x00FD88C0: 0900A0E3420C80E3000100EF470100EF
0x00FD88D0: 0080BDE800402DE904002DE90030A0E1
0x00FD88E0: 0700A0E3440C80E30120A0E10110A0E3
0x00FD88F0: 000100EF0180BDE810B5140088472000
0x00FD8900: 15DF10BD10402DE90040A0E10700A0E3
0x00FD8910: 440C80E3540100EF0C009FE5001090E5
0x00FD8920: 0400A0E11040BDE8B4FDFFEA0095FDA0
0x00FD8930: 10402DE9AFDF4DE26F0F8DE20140A0E1
0x00FD8940: 1A0000EF70109FE56F0F8DE2170000EF
0x00FD8950: 0D20A0E16F1F8DE204008DE26B0000EF
0x00FD8960: 000050E30F00000A0410A0E16F0F8DE2
0x00FD8970: 1A0000EFAD108DE26F0F8DE2170000EF
0x00FD8980: 0030A0E30020A0E30210A0E16F0F8DE2
0x00FD8990: ECFEFFFA0D10A0E104008DE26C0000EF
0x00FD89A0: 000050E3EFFFFF1A0D10A0E104008DE2
0x00FD89B0: 6D0000EFAFDF8DE21080BDE82495FDA0
0x00FD89C0: 10B58BB06A460024E44301A984DFA042
0x00FD89D0: 01D1200000E002980BB010BDF0402DE9
0x00FD89E0: 24419FE538D04DE2005094E5000055E3
0x00FD89F0: 0300000A0000A0E3000084E50500A0E1
0x00FD8A00: 150000EF04619FE50050E0E3440086E2
0x00FD8A10: EAFFFFFA050050E13900000A400C50E3
0x00FD8A20: 0300000A0610A0E10100A0E3480100EF
0x00FD8A30: 330000EA0D30A0E18020A0E3801CA0E3
0x00FD8A40: 440086E20A0000EF0070A0E1050057E1
0x00FD8A50: 2B00000A400CA0E3140000EF0050A0E1
0x00FD8A60: 0D30A0E1402CA0E30510A0E10700A0E1
0x00FD8A70: 0B0000EF400C50E30D10A0E10700A0E1
0x00FD8A80: 0600000A0D0000EF181086E20100A0E3
0x00FD8A90: 480100EF0500A0E1150000EF180000EA
0x00FD8AA0: 0D0000EF0070A0E30700E0E160109FE5
0x00FD8AB0: 072195E7000052E10721911700005211
0x00FD8AC0: 07319517020053110500000A0720A0E1
0x00FD8AD0: 2C1086E204008DE2160000EF04108DE2
0x00FD8AE0: E9FFFFEA072195E7000052E107119107
0x00FD8AF0: 07118507017087E2400D57E3EAFFFFBA
0x00FD8B00: 005084E538D08DE2F080BDE82C9168A8
0x00FD8B10: 2C95FDA00040FDA030402DE944509FE5
0x00FD8B20: 0040A0E155FFFFEBABFFFFEB660200EB
0x00FD8B30: 2C0085E28C0000EF0510A0E10000A0E3
0x00FD8B40: 7AFFFFEB20009FE5182085E20010A0E3
0x00FD8B50: 710100EF14009FE5001090E50400A0E1
0x00FD8B60: 3040BDE825FDFFEA8495FDA03089FDA0
0x00FD8B70: 0495FDA080280BDB0649081880380078
0x00FD8B80: 802805DB044AFF21C94340001018405A
0x00FD8B90: 7047C0463496FDA0B496FDA030B50400
0x00FD8BA0: 0D0004E0FFF7E6FF010028001CDF2078
0x00FD8BB0: 641C0028F6D130BD30402DE90040A0E1
0x00FD8BC0: 0150A0E10010A0E30500A0E1260100EF
0x00FD8BD0: 0510A0E10400A0E1EFFFFFFA3080BDE8
0x00FD8BE0: 30402DE90040A0E10F00A0E3250100EF
0x00FD8BF0: 0050A0E1071F8FE2240100EF0020A0E3
0x00FD8C00: 0510A0E10400A0E1940000EF0500A0E1
0x00FD8C10: 290100EF3080BDE874787400F0472DE9
0x00FD8C20: 68409FE568609FE5460100EF005094E5
0x00FD8C30: 007096E5018085E22400A0E390080AE0
0x00FD8C40: 0A00A0E1140000EF0090A0E10A10A0E1
0x00FD8C50: 1D0100EF000057E30600000A2400A0E3
0x00FD8C60: 900502E00710A0E10900A0E11E0100EF
0x00FD8C70: 0700A0E1150000EF008084E5009086E5
0x00FD8C80: 470100EF850185E0000189E0F087BDE8
0x00FD8C90: 249168A8309168A870402DE90040A0E1
0x00FD8CA0: 0150A0E1FF00A0E3250100EF0060A0E1
0x00FD8CB0: 0410A0E11F0100EF5C10A0E30600A0E1
0x00FD8CC0: 1C0000EF0510A0E10600A0E1210100EF
0x00FD8CD0: 0600A0E1C1FFFFEB0600A0E1290100EF
0x00FD8CE0: 7080BDE800402DE920D04DE20020A0E1
0x00FD8CF0: 0C1F8FE20D00A0E1160000EF0D00A0E1
0x00FD8D00: 371009EB020000EF1C109FE50230A0E3
0x00FD8D10: 0220A0E3FF00A0E3FF0C80E3A71009EB
0x00FD8D20: 20D08DE20080BDE8256400000496FDA0
0x00FD8D30: 004B1847AC81FDA000B5080014DF00BD
0x00FD8D40: 00B5080015DF00BD30402DE904D04DE2
0x00FD8D50: 0140A0E10250A0E15E0100EF000090E5
0x00FD8D60: 0D30A0E10520A0E10410A0E10B0000EF
0x00FD8D70: 3180BDE8F0432DE928D04DE20040A0E3
0x00FD8D80: 00408DE504408DE518308DE28020A0E3
0x00FD8D90: 801CA0E30A0000EF14008DE5010070E3
0x00FD8DA0: 3300000A0C00A0E3140000EF0050A0E1
0x00FD8DB0: 004085E5044085E5084085E514009DE5
0x00FD8DC0: 18308DE20820A0E320108DE20B0000EF
0x00FD8DD0: 080050E31B00001A0810A0E320008DE2
0x00FD8DE0: B20100EF000050E31600000AA4039FE5
0x00FD8DF0: 01002DE9A0039FE501002DE90000A0E3
0x00FD8E00: 01002DE90030A0E10020A0E10010A0E1
0x00FD8E10: 88039FE5A80100EF0C008DE5000050E3
0x00FD8E20: 0CD08DE20700000A560100EF04008DE5
0x00FD8E30: 000050E31100001A0020A0E30210A0E1
0x00FD8E40: 0D00A0E1570100EF000095E5150000EF
0x00FD8E50: 040095E5150000EF080095E5150000EF
0x00FD8E60: 0500A0E1150000EF14009DE518108DE2
0x00FD8E70: 0D0000EF0000A0E328D08DE2F083BDE8
0x00FD8E80: 00009DE5620100EF000050E30020A013
0x00FD8E90: 04108D12E9FFFF1A04239FE500009DE5
0x00FD8EA0: 14108DE2A90100EF00009DE50810A0E3
0x00FD8EB0: 580100EF04109DE500009DE5590100EF
0x00FD8EC0: 0000A0E301002DE901002DE901002DE9
0x00FD8ED0: 1C008DE201002DE92C008DE201002DE9
0x00FD8EE0: 18109DE520308DE214009DE51C208DE2
0x00FD8EF0: 5A0100EF30009DE514D08DE2080050E3
0x00FD8F00: 010000AA00009DE5D60100EF00009DE5
0x00FD8F10: 04109DE51020A0E3AC0100EF000050E3
0x00FD8F20: 0100000A00009DE5AD0100EF1C009DE5
0x00FD8F30: 100050E30100001A00009DE5AF0100EF
0x00FD8F40: 1C009DE5080050E3010000AA00009DE5
0x00FD8F50: B00100EF10009DE5030050E30100001A
0x00FD8F60: 00009DE5AB0100EF10009DE5040050E3
0x00FD8F70: 0100001A00009DE5B10100EF10009DE5
0x00FD8F80: 000050E30300000A00009DE50120A0E3
0x00FD8F90: FF10A0E3AE0100EF10009DE5000050E3
0x00FD8FA0: 0100001A00009DE5D70100EF04109DE5
0x00FD8FB0: 00009DE5AA0100EF00009DE504109DE5
0x00FD8FC0: 5F0100EF140000EF000085E50800A0E3
0x00FD8FD0: 140000EF0060A0E1086085E510009DE5
0x00FD8FE0: 000050E308009DE52700000A0C109DE5
0x00FD8FF0: 0080A0E3910000E01C90A0E3140000EF
0x00FD9000: 040085E50070A0E1000000EA018088E2
0x00FD9010: 0C009DE5000058E11800002A001095E5
0x00FD9020: 00009DE50020A0E3600100EF0400A0E1
0x00FD9030: 080000EA0020D1E50130D1E50210D1E5
0x00FD9040: E02002E2A33109E0022083E1211382E1
0x00FD9050: 0110C7E4010080E208109DE5010050E1
0x00FD9060: E9FFFF2A001095E5001181E00320D1E5
0x00FD9070: 000052E3EEFFFF1AC010A0E3F3FFFFEA
0x00FD9080: 080095E50510A0E3270000EAA081A0E1
0x00FD9090: 070010E30C009DE501808812980009E0
0x00FD90A0: 0900A0E1140000EF040085E50070A0E1
0x00FD90B0: 0910A0E11D0100EF0090A0E30E0000EA
0x00FD90C0: 001095E50110D0E7000051E30400000A
0x00FD90D0: A01187E00020D1E507C000E2332C82E1
0x00FD90E0: 0020C1E5010080E208109DE5010050E1
0x00FD90F0: F2FFFF3A077088E0019089E20C009DE5
0x00FD9100: 000059E10600002A001095E500009DE5
0x00FD9110: 0020A0E3600100EF0400A0E18030A0E3
0x00FD9120: F0FFFFEA080095E50110A0E3B210C0E1
0x00FD9130: 080095E508109DE50010C0E5080095E5
0x00FD9140: 0C109DE50110C0E5080095E5041095E5
0x00FD9150: 041080E504109DE500009DE55D0100EF
0x00FD9160: 0020A0E304108DE20D00A0E1570100EF
0x00FD9170: 000095E5150000EF0500A0E1150000EF
0x00FD9180: 14009DE518108DE20D0000EF0600A0E1
0x00FD9190: 28D08DE2F083BDE8418DFDA0398DFDA0
0x00FD91A0: B497FDA0488DFDA007E0412A02DB5B2A
0x00FD91B0: 00DA2032491C0270401C0A78002AF4D1
0x00FD91C0: 00210170704700008C309FE510002DE9
0x00FD91D0: 0F20A0E30A0051E30A00003A93C184E0
0x00FD91E0: 0AC0A0E3A441A0E19C0404E0044041E0
0x00FD91F0: 022284E193418CE0ACC1A0E10C10A0E1
0x00FD9200: 0A0051E3F4FFFF2A301081E20110C0E4
0x00FD9210: 020000EA301081E20110C0E42222A0E1
0x00FD9220: 0F1002E20A0051E3F9FFFF3A2E10A0E3
0x00FD9230: 0110C0E47010A0E30110C0E46E10A0E3
0x00FD9240: 0110C0E46710A0E30110C0E40010A0E3
0x00FD9250: 0010C0E51000BDE81EFF2FE1CDCCCCCC
0x00FD9260: F0402DE95C529FE50040A0E10560A0E1
0x00FD9270: 460100EF0070A0E3000000EA0670A0E1
0x00FD9280: 006096E5000056E30E00000A040096E5
0x00FD9290: 0410A0E1190000EF000050E3F6FFFF1A
0x00FD92A0: 000057E30400000A000096E5000087E5
0x00FD92B0: 000095E5000086E5006085E5470100EF
0x00FD92C0: 080096E5F080BDE8470100EF0000A0E3
0x00FD92D0: F080BDE8F0472DE9E8419FE540DF4DE2
0x00FD92E0: 0050A0E1250EA0E10A0050E30700001A
0x00FD92F0: 0510A0E10D00A0E1AAFFFFFA0D00A0E1
0x00FD9300: D6FFFFEB0050B0E11B00000A330000EA
0x00FD9310: 040094E5000050E36700000A400B55E3
0x00FD9320: 1900002A8000A0E394A19FE5031005E2
0x00FD9330: 8110A0E13091A0E1040094E5A960A0E1
0x00FD9340: 257180E00080D7E5080019E11000000A
0x00FD9350: 080016E10C00000A0A10A0E10D00A0E1
0x00FD9360: 90FFFFFA0510A0E196FFFFEB0D00A0E1
0x00FD9370: BAFFFFEB0050B0E11800001A0D00A0E1
0x00FD9380: 7BFEFFEB0050A0E1200000EA0000A0E3
0x00FD9390: 130000EA460100EF0000D7E5000089E1
0x00FD93A0: 0000C7E5470100EF0A10A0E10D00A0E1
0x00FD93B0: 7CFFFFFA0510A0E182FFFFEB0D00A0E1
0x00FD93C0: A6FFFFEB0050B0E10700000A460100EF
0x00FD93D0: 0000D7E5000086E10000C7E5470100EF
0x00FD93E0: 0500A0E140DF8DE2F087BDE80D00A0E1
0x00FD93F0: 5FFEFFEB0050B0E1E3FFFF0A460100EF
0x00FD9400: 0000D7E5000086E10000C7E5470100EF
0x00FD9410: 0C00A0E3140000EF0060A0E10D00A0E1
0x00FD9420: 1B0000EF010080E2140000EF040086E5
0x00FD9430: 0D10A0E11A0000EF085086E5460100EF
0x00FD9440: 000094E50080A0E3000086E5006084E5
0x00FD9450: 0400A0E1004094E5000054E30100001A
0x00FD9460: 470100EF130000EA018088E2330058E3
0x00FD9470: F6FFFF3A0010A0E3001080E5470100EF
0x00FD9480: 080094E5000050E30300000A040090E5
0x00FD9490: 150000EF080094E5150000EF040094E5
0x00FD94A0: 150000EF0400A0E1004094E5150000EF
0x00FD94B0: 000054E3F1FFFF1A080096E540DF8DE2
0x00FD94C0: F087BDE8BC97FDA0349168A810402DE9
0x00FD94D0: 24409FE5040094E5000050E30200001A
0x00FD94E0: 400CA0E3140000EF040084E5040094E5
0x00FD94F0: 401CA0E31D0100EF1080BDE8349168A8
0x00FD9500: 4F1664A1431464A1AD743DA15B1815A1
0x00FD9510: 711815A1A76F14A17D3715A19CC421A1
0x00FD9520: 84C521A12A2E656C66000000496C6C65
0x00FD9530: 67616C206C6962726172792073697A65
0x00FD9540: 2100000043616E27742072656164206C
0x00FD9550: 696272617279210046756E6374696F6E
0x00FD9560: 20256420636F6E666C69637421000000
0x00FD9570: 303A5C5A62696E5C7377692E626C6962
0x00FD9580: 00000000303A5C5A42696E5C4461656D
0x00FD9590: 6F6E735C4E4F575C00000000303A5C5A
0x00FD95A0: 42696E5C4461656D6F6E735C00000000
0x00FD95B0: 0096FDA055000000FF0778052496FDA0
0x00FD95C0: 2C96FDA0FD87FDA000000000303A5C5A
0x00FD95D0: 42696E5C696D675C656C665F736D616C
0x00FD95E0: 6C2E706E67000000303A5C5A42696E5C
0x00FD95F0: 696D675C656C665F6269672E706E6700
0x00FD9600: 656C660001014E6F2066756E6374696F
0x00FD9610: 6E20696E206C6962A100000048454C50
0x00FD9620: 45520000CC95FDA000000000E895FDA0
0x00FD9630: 000000005F5F275F223AC5D85F255F3C
0x00FD9640: 5F5F5F5F5F27272222072D2D5F545F3E
0x00FD9650: 5F5F5F5FFFF6F75FFD83B315F063F23C
0x00FD9660: BF2D52F4F82B4969A3E714FAF1FCF33E
0x00FD9670: 5F5F5FF5808182838485868788898A8B
0x00FD9680: 8C8D8E8F909192939495969798999A9B
0x00FD9690: 9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAAB
0x00FD96A0: ACADAEAFE0E1E2E3E4E5E6E7E8E9EAEB
0x00FD96B0: ECEDEEEF100411041204130414041504
0x00FD96C0: 16041704180419041A041B041C041D04
0x00FD96D0: 1E041F04200421042204230424042504
0x00FD96E0: 26042704280429042A042B042C042D04
0x00FD96F0: 2E042F04300431043204330434043504
0x00FD9700: 36043704380439043A043B043C043D04
0x00FD9710: 3E043F042D002D002D00A6002B00A600
0x00FD9720: A600AC00AC00A600A600AC002D002D00
0x00FD9730: 2D00AC004C002B0054002B002D002B00
0x00FD9740: A600A6004C003304A6005400A6003D00
0x00FD9750: 2B00A600A600540054004C004C002D00
0x00FD9760: 33042B002B002D002D002D002D00A600
0x00FD9770: A6002D00400441044204430444044504
0x00FD9780: 46044704480449044A044B044C044D04
0x00FD9790: 4E044F04010451040404540407045704
0x00FD97A0: 0E045E04B0002220B70076001621A400
0x00FD97B0: A600A000312E322E35000000303A5C5A
0x00FD97C0: 42696E5C696D675C00000000
;PATCH_KEYB_MSG,PATCH_KEYB_MSGJ
#pragma disable old_equal_ff
0x01146F9C: E86A0CF0 004A1047
0x01146FA0: EDFB0028 A980FDA0
;PATCH_GET_PIT,PATCH_GET_PITJ
0x01151868: 10B5041CFFF7F5FF 004908476C80FDA0
;PATCH_ESI
0x013D74A4: 0C1C111C0E4A9042 004B18470480FDA0
;PATCH_ONCREATE,PATCH_ONCLOSE
0x01661B20: 431464A14D1664A1 188BFDA00489FDA0

;------------------------- end -------------------------

